{
  "version": 3,
  "sources": ["src/index.js", "src/cache/Cache.js", "src/api/requests/AniListRequest.js", "src/api/requests/MALRequest.js", "src/api/requests/SimklRequest.js", "src/api/requests/TMDbRequest.js", "src/api/requests/RequestQueue.js", "src/api/services/AnilistApi.js", "src/core/ZoroError.js", "src/api/services/MalApi.js", "src/api/services/SimklApi.js", "src/auth/Authentication.js", "src/auth/AuthModal.js", "src/auth/MALAuthentication.js", "src/auth/SimklAuthentication.js", "src/auth/SimklPinModal.js", "src/features/Theme.js", "src/processing/Processor.js", "src/features/Trending.js", "src/editing/Edit.js", "src/editing/modals/RenderEditModal.js", "src/editing/modals/AniListEditModal.js", "src/editing/modals/MALEditModal.js", "src/editing/modals/SimklEditModal.js", "src/editing/modals/SupportEditModal.js", "src/rendering/helpers/DOMHelper.js", "src/core/constants.js", "src/details/CustomExternalURL.js", "src/details/RenderDetailPanel.js", "src/details/DetailPanelSource.js", "src/details/OpenDetailPanel.js", "src/details/MoreDetailsPanel.js", "src/features/Export.js", "src/features/Sample.js", "src/features/Prompt.js", "src/rendering/core/Render.js", "src/rendering/helpers/APISourceHelper.js", "src/rendering/helpers/FormatterHelper.js", "src/rendering/renderers/CardRenderer.js", "src/rendering/renderers/SearchRenderer.js", "src/rendering/renderers/TableRenderer.js", "src/rendering/renderers/MediaListRenderer.js", "src/rendering/renderers/StatsRenderer.js", "src/rendering/helpers/EmojiIconMapper.js", "src/features/ConnectedNotes.js", "src/ui/SidePanel.js", "src/settings/ZoroSettingTab.js"],
  "sourcesContent": ["import { Plugin, Notice } from 'obsidian';\n\nimport { Cache } from './cache/Cache.js';\nimport { RequestQueue } from './api/requests/RequestQueue.js';\nimport { AnilistApi } from './api/services/AnilistApi.js';\nimport { MalApi } from './api/services/MalApi.js';\nimport { SimklApi } from './api/services/SimklApi.js';\n\nimport { Authentication } from './auth/Authentication.js';\nimport { MALAuthentication } from './auth/MALAuthentication.js';\nimport { SimklAuthentication } from './auth/SimklAuthentication.js';\n\nimport { Theme } from './features/Theme.js';\nimport { Processor } from './processing/Processor.js';\nimport { Edit } from './editing/Edit.js';\nimport { MoreDetailsPanel } from './details/MoreDetailsPanel.js';\nimport { Export } from './features/Export.js';\nimport { Sample } from './features/Sample.js';\nimport { Prompt } from './features/Prompt.js';\n\nimport { Render } from './rendering/core/Render.js';\nimport { EmojiIconMapper } from './rendering/helpers/EmojiIconMapper.js';\nimport { ConnectedNotes } from './features/ConnectedNotes.js';\nimport { SidePanel, ZORO_VIEW_TYPE } from './ui/SidePanel.js';\n\nimport { DEFAULT_SETTINGS, getDefaultGridColumns, GRID_COLUMN_OPTIONS } from './core/constants.js';\nimport { ZoroSettingTab } from './settings/ZoroSettingTab.js';\n\nclass ZoroPlugin extends Plugin {\n\tconstructor(app, manifest) {\n\t\tsuper(app, manifest);\n\t\tthis.globalListeners = [];\n\t\tthis.cache = new Cache({ obsidianPlugin: this });\n\t\tthis.requestQueue = new RequestQueue(this);\n\t\tthis.api = new AnilistApi(this);\n\t\tthis.auth = new Authentication(this);\n\t\tthis.malAuth = new MALAuthentication(this);\n\t\tthis.malApi = new MalApi(this);\n\t\tthis.simklAuth = new SimklAuthentication(this);\n\t\tthis.simklApi = new SimklApi(this);\n\t\tthis.theme = new Theme(this);\n\t\tthis.processor = new Processor(this);\n\t\tthis.edit = new Edit(this);\n\t\tthis.moreDetailsPanel = new MoreDetailsPanel(this);\n\t\tthis.export = new Export(this);\n\t\tthis.sample = new Sample(this);\n\t\tthis.prompt = new Prompt(this);\n\t}\n\n\t\n\n\trenderError(el, message, context = '', onRetry = null) {\n\t\tel.empty?.();\n\t\tel.classList.add('zoro-error-container');\n\n\t\tconst wrapper = el.createDiv({ cls: 'zoro-error-box' });\n\t\twrapper.createEl('strong', { text: `\u274C ${context || 'Something went wrong'}` });\n\t\twrapper.createEl('pre', { text: message });\n\n\t\tif (onRetry) {\n\t\t\twrapper.createEl('button', { text: '\uD83D\uDD04 Retry', cls: 'zoro-retry-btn' })\n\t\t\t\t\t.onclick = () => {\n\t\t\t\t\t\tel.empty();\n\t\t\t\t\t\tonRetry();\n\t\t\t\t\t};\n\t\t} else if (this.app?.workspace?.activeLeaf?.rebuildView) {\n\t\t\twrapper.createEl('button', { text: 'Reload Note', cls: 'zoro-retry-btn' })\n\t\t\t\t\t.onclick = () => this.app.workspace.activeLeaf.rebuildView();\n\t\t}\n\t}\n\n\tgetAniListUrl(mediaId, mediaType = 'ANIME') {\n\t\treturn this.api.getAniListUrl(mediaId, mediaType);\n\t}\n\n\tgetMALUrl(mediaId, mediaType = 'ANIME') {\n\t\treturn this.malApi.getMALUrl(mediaId, mediaType);\n\t}\n\n\tgetSimklUrl(mediaId, mediaType = 'ANIME') {\n\t\treturn this.simklApi.getSimklUrl(mediaId, mediaType);\n\t}\n\n\tgetSourceSpecificUrl(mediaId, mediaType, source) {\n\t\tconst type = String(mediaType || '').toUpperCase();\n\t\tconst numericId = Number(mediaId) || 0;\n\n\t\tif ((type === 'MOVIE' || type === 'TV') && numericId > 0) {\n\t\t\treturn `https://www.themoviedb.org/${type === 'MOVIE' ? 'movie' : 'tv'}/${numericId}`;\n\t\t}\n\n\t\tswitch ((source || '').toLowerCase()) {\n\t\t\tcase 'mal':\n\t\t\t\treturn this.getMALUrl(mediaId, mediaType);\n\t\t\tcase 'simkl':\n\t\t\t\treturn this.getSimklUrl(mediaId, mediaType);\n\t\t\tcase 'anilist':\n\t\t\tdefault:\n\t\t\t\treturn this.getAniListUrl(mediaId, mediaType);\n\t\t}\n\t}\n\n\tasync updateDefaultApiSourceBasedOnAuth() {\n\t\ttry {\n\t\t\tif (this.settings.defaultApiUserOverride) return;\n\t\t\tconst authenticated = [];\n\t\t\tif (this.settings.accessToken) authenticated.push('anilist');\n\t\t\tif (this.settings.malAccessToken) authenticated.push('mal');\n\t\t\tif (this.settings.simklAccessToken) authenticated.push('simkl');\n\n\t\t\tlet newDefault = this.settings.defaultApiSource;\n\t\t\tif (authenticated.length === 1) {\n\t\t\t\tnewDefault = authenticated[0];\n\t\t\t} else {\n\t\t\t\tnewDefault = 'anilist';\n\t\t\t}\n\n\t\t\tif (newDefault !== this.settings.defaultApiSource) {\n\t\t\t\tthis.settings.defaultApiSource = newDefault;\n\t\t\t\tawait this.saveSettings();\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.warn('[Zoro] Failed to update default API source automatically:', e);\n\t\t}\n\t}\n\n\tasync onload() {\n\t\tthis.render = new Render(this);\n\t\tthis.emojiMapper = new EmojiIconMapper();\n\t\tthis.emojiMapper.init({ patchSettings: true, patchCreateEl: true, patchNotice: true });\n\t\tthis.connectedNotes = new ConnectedNotes(this);\n\t\ttry {\n\t\t\tawait this.loadSettings();\n\t\t} catch (err) {\n\t\t\tconsole.error('[Zoro] Failed to load settings:', err);\n\t\t}\n\n\t\tawait this.cache.loadFromDisk();\n\t\tthis.cache.startAutoPrune(5 * 60 * 1000);\n\n\t\ttry {\n\t\t\tthis.injectCSS();\n\t\t} catch (err) {\n\t\t\tconsole.error('[Zoro] Failed to inject CSS:', err);\n\t\t}\n\n\t\tif (this.settings.theme) {\n\t\t\tawait this.theme.applyTheme(this.settings.theme);\n\t\t}\n\n\t\tthis.registerMarkdownCodeBlockProcessor('zoro', this.processor.processZoroCodeBlock.bind(this.processor));\n\t\tthis.addSettingTab(new ZoroSettingTab(this.app, this));\n\n\t\t// Register Zoro side panel view\n\t\tthis.registerView(ZORO_VIEW_TYPE, (leaf) => new SidePanel(leaf, this));\n\t\tthis.addCommand({\n\t\t\tid: 'zoro-open-panel',\n\t\t\tname: 'Open Zoro panel',\n\t\t\tcallback: () => {\n\t\t\t\tconst leaf = this.app.workspace.getRightLeaf(true);\n\t\t\t\tleaf.setViewState({ type: ZORO_VIEW_TYPE, active: true });\n\t\t\t\tthis.app.workspace.revealLeaf(leaf);\n\t\t\t}\n\t\t});\n\t}\n\n\tvalidateSettings(settings) {\n\t\treturn {\n\t\t\tdefaultApiSource: ['anilist', 'mal', 'simkl'].includes(settings?.defaultApiSource) ? settings.defaultApiSource : 'anilist',\n\t\t\tdefaultApiUserOverride: typeof settings?.defaultApiUserOverride === 'boolean' ? settings.defaultApiUserOverride : false,\n\t\t\tdefaultUsername: typeof settings?.defaultUsername === 'string' ? settings.defaultUsername : '',\n\t\t\tdefaultLayout: ['card', 'table'].includes(settings?.defaultLayout) ? settings.defaultLayout : 'card',\n\t\t\tnotePath: typeof settings?.notePath === 'string' ? settings.notePath : 'Zoro/Note',\n\t\t\tinsertCodeBlockOnNote: typeof settings?.insertCodeBlockOnNote === 'boolean' ? settings.insertCodeBlockOnNote : true,\n\t\t\tshowCoverImages: typeof settings?.showCoverImages === 'boolean' ? settings.showCoverImages : true,\n\t\t\tshowRatings: typeof settings?.showRatings === 'boolean' ? settings.showRatings : true,\n\t\t\tshowProgress: typeof settings?.showProgress === 'boolean' ? settings.showProgress : true,\n\t\t\tshowGenres: typeof settings?.showGenres === 'boolean' ? settings.showGenres : false,\n\t\t\tshowLoadingIcon: typeof settings?.showLoadingIcon === 'boolean' ? settings.showLoadingIcon : true,\n\t\t\tgridColumns: this.migrateGridColumnsSetting(settings?.gridColumns),\n\t\t\ttheme: typeof settings?.theme === 'string' ? settings.theme : '',\n\t\t\thideUrlsInTitles: typeof settings?.hideUrlsInTitles === 'boolean' ? settings.hideUrlsInTitles : true,\n\t\t\tforceScoreFormat: typeof settings?.forceScoreFormat === 'boolean' ? settings.forceScoreFormat : true,\n\t\t\tshowAvatar: typeof settings?.showAvatar === 'boolean' ? settings.showAvatar : true,\n\t\t\tshowFavorites: typeof settings?.showFavorites === 'boolean' ? settings.showFavorites : true,\n\t\t\tshowBreakdowns: typeof settings?.showBreakdowns === 'boolean' ? settings.showBreakdowns : true,\n\t\t\tshowTimeStats: typeof settings?.showTimeStats === 'boolean' ? settings.showTimeStats : true,\n\t\t\tstatsLayout: ['enhanced', 'compact', 'minimal'].includes(settings?.statsLayout) ? settings.statsLayout : 'enhanced',\n\t\t\tstatsTheme: ['auto', 'light', 'dark'].includes(settings?.statsTheme) ? settings.statsTheme : 'auto',\n\t\t\tclientId: typeof settings?.clientId === 'string' ? settings.clientId : '',\n\t\t\tclientSecret: typeof settings?.clientSecret === 'string' ? settings.clientSecret : '',\n\t\t\tredirectUri: typeof settings?.redirectUri === 'string' ? settings.redirectUri : 'https://anilist.co/api/v2/oauth/pin',\n\t\t\taccessToken: typeof settings?.accessToken === 'string' ? settings.accessToken : '',\n\t\t\tmalClientId: typeof settings?.malClientId === 'string' ? settings.malClientId : '',\n\t\t\tmalClientSecret: typeof settings?.malClientSecret === 'string' ? settings.malClientSecret : '',\n\t\t\tmalAccessToken: typeof settings?.malAccessToken === 'string' ? settings.malAccessToken : '',\n\t\t\tmalRefreshToken: typeof settings?.malRefreshToken === 'string' ? settings.malRefreshToken : '',\n\t\t\tmalTokenExpiry: settings?.malTokenExpiry === null || typeof settings?.malTokenExpiry === 'number' ? settings.malTokenExpiry : null,\n\t\t\tmalUserInfo: settings?.malUserInfo === null || typeof settings?.malUserInfo === 'object' ? settings.malUserInfo : null,\n\t\t\tsimklClientId: typeof settings?.simklClientId === 'string' ? settings.simklClientId : '',\n\t\t\tsimklClientSecret: typeof settings?.simklClientSecret === 'string' ? settings.simklClientSecret : '',\n\t\t\tsimklAccessToken: typeof settings?.simklAccessToken === 'string' ? settings.simklAccessToken : '',\n\t\t\tsimklUserInfo: typeof settings?.simklUserInfo === 'object' || settings?.simklUserInfo === null ? settings.simklUserInfo : null,\n\t\t\tautoFormatSearchUrls: typeof settings?.autoFormatSearchUrls === 'boolean' ? settings.autoFormatSearchUrls : true,\n\t\t\tcustomSearchUrls: {\n\t\t\t\tANIME: Array.isArray(settings?.customSearchUrls?.ANIME) ? settings.customSearchUrls.ANIME.filter(url => typeof url === 'string' && url.trim() !== '') : [],\n\t\t\t\tMANGA: Array.isArray(settings?.customSearchUrls?.MANGA) ? settings.customSearchUrls.MANGA.filter(url => typeof url === 'string' && url.trim() !== '') : [],\n\t\t\t\tMOVIE_TV: Array.isArray(settings?.customSearchUrls?.MOVIE_TV) ? settings.customSearchUrls.MOVIE_TV.filter(url => typeof url === 'string' && url.trim() !== '') : []\n\t\t\t},\n\t\t\ttmdbApiKey: typeof settings?.tmdbApiKey === 'string' ? settings.tmdbApiKey : ''\n\t\t};\n\t}\n\n\tmigrateGridColumnsSetting(value) {\n\t\t// Handle migration from old numeric system to new string system\n\t\tif (typeof value === 'number' && Number.isInteger(value)) {\n\t\t\t// Convert old numeric values to new string values\n\t\t\tif (value >= 1 && value <= 6) {\n\t\t\t\treturn String(value);\n\t\t\t} else {\n\t\t\t\t// Invalid numeric value, use default\n\t\t\t\treturn GRID_COLUMN_OPTIONS.DEFAULT;\n\t\t\t}\n\t\t} else if (typeof value === 'string') {\n\t\t\t// Validate string values\n\t\t\tconst validOptions = Object.values(GRID_COLUMN_OPTIONS);\n\t\t\tif (validOptions.includes(value)) {\n\t\t\t\treturn value;\n\t\t\t} else {\n\t\t\t\t// Invalid string value, use default\n\t\t\t\treturn GRID_COLUMN_OPTIONS.DEFAULT;\n\t\t\t}\n\t\t} else {\n\t\t\t// No value or invalid type, use default\n\t\t\treturn GRID_COLUMN_OPTIONS.DEFAULT;\n\t\t}\n\t}\n\n\tasync saveSettings() {\n\t\ttry {\n\t\t\tconst validSettings = this.validateSettings(this.settings);\n\t\t\tawait this.saveData(validSettings);\n\t\t} catch (err) {\n\t\t\tconsole.error('[Zoro] Failed to save settings:', err);\n\t\t\tnew Notice('\u26A0\uFE0F Failed to save settings. See console for details.');\n\t\t}\n\t}\n\n\tasync loadSettings() {\n\t\tconst saved = (await this.loadData()) || {};\n\t\tconst merged = Object.assign({}, DEFAULT_SETTINGS, saved);\n\t\tthis.settings = this.validateSettings(merged);\n\t\tif (typeof this.updateDefaultApiSourceBasedOnAuth === 'function') {\n\t\t\tawait this.updateDefaultApiSourceBasedOnAuth();\n\t\t}\n\t}\n\n\taddGlobalListener(el, type, fn) {\n\t\tel.addEventListener(type, fn);\n\t\tthis.globalListeners.push({ el, type, fn });\n\t}\n\n\tremoveAllGlobalListeners() {\n\t\tthis.globalListeners.forEach(({ el, type, fn }) => {\n\t\t\tel.removeEventListener(type, fn);\n\t\t});\n\t\tthis.globalListeners.length = 0;\n\t}\n\t\n\thandleEditClick(e, entry, statusEl, config = {}) {\n    e.preventDefault();\n    e.stopPropagation();\n    const source = config.source || entry?._zoroMeta?.source || this.settings?.defaultApiSource || 'anilist';\n    const mediaType = config.mediaType || entry?._zoroMeta?.mediaType || 'ANIME';\n    const media = entry?.media;\n    (async () => {\n      const view = await this.connectedNotes.openSidePanelWithContext({ media, entry, source, mediaType });\n      await view.showEditForEntry(entry, { source });\n    })();\n  }\n\n\tinjectCSS() {\n\t\tconst styleId = 'zoro-plugin-styles';\n\t\tconst existingStyle = document.getElementById(styleId);\n\t\tif (existingStyle) existingStyle.remove();\n\t\tconst style = document.createElement('style');\n\t\tstyle.id = styleId;\n\t\tstyle.textContent = `.zoro-container{}`;\n\t\tdocument.head.appendChild(style);\n\t\tthis.globalLoader = document.createElement('div');\n\t\tthis.globalLoader.id = 'zoro-global-loader';\n\t\tthis.globalLoader.innerHTML = `\n      <div class=\"global-loading-glow\">\n        <div class=\"tomoe-container\">\n          <span class=\"tomoe\"></span>\n          <span class=\"tomoe\"></span>\n          <span class=\"tomoe\"></span>\n        </div>\n      </div>\n    `;\n\t\tthis.globalLoader.className = 'zoro-global-loader';\n\t\tdocument.body.appendChild(this.globalLoader);\n\t}\n\n\tonunload() {\n\t\tthis.cache.stopAutoPrune().stopBackgroundRefresh().destroy();\n\t\tthis.theme.removeTheme();\n\t\t// Convert any zoro-panel leaves to empty to avoid orphaned tabs\n\t\ttry {\n\t\t\tconst leaves = this.app?.workspace?.getLeavesOfType?.(ZORO_VIEW_TYPE) || [];\n\t\t\tfor (const leaf of leaves) {\n\t\t\t\tleaf.setViewState({ type: 'empty' });\n\t\t\t}\n\t\t} catch {}\n\t\tconst styleId = 'zoro-plugin-styles';\n\t\tconst existingStyle = document.getElementById(styleId);\n\t\tif (existingStyle) {\n\t\t\texistingStyle.remove();\n\t\t}\n\t\tconst loader = document.getElementById('zoro-global-loader');\n\t\tif (loader) loader.remove();\n\t}\n}\n\nexport default ZoroPlugin;", "import { Notice } from 'obsidian';\n\nclass Cache {\n  constructor(config = {}) {\n    const {\n      ttlMap = {},\n      obsidianPlugin = null,\n      maxSize = 10000,\n      compressionThreshold = 1024,\n      batchSize = 100\n    } = config;\n\n    this.ttlMap = {\n  userData: 30 * 60 * 1000,     // 30 minutes for ALL APIs\n  mediaData: 10 * 60 * 1000,    // 10 minutes for ALL APIs  \n  searchResults: 2 * 60 * 1000, // 2 minutes for ALL APIs\n  mediaDetails: 60 * 60 * 1000  // 1 hour for ALL APIs\n};\n    \n    this.stores = {};\n    this.indexes = { byUser: new Map(), byMedia: new Map(), byTag: new Map() };\n    this.apiSources = ['anilist', 'mal', 'simkl'];\n    \n    this.version = '3.2.0';\n    this.maxSize = maxSize;\n    this.compressionThreshold = compressionThreshold;\n    this.batchSize = batchSize;\n    this.obsidianPlugin = obsidianPlugin;\n    \n    this.intervals = { prune: null, refresh: null, save: null };\n    this.flags = { autoPrune: false, backgroundRefresh: false };\n    this.stats = { hits: 0, misses: 0, sets: 0, deletes: 0, evictions: 0, compressions: 0 };\n    this.state = { loading: false, saving: false, lastSaved: null, lastLoaded: null };\n    \n    this.accessLog = new Map();\n    this.refreshCallbacks = new Map();\n    this.loadQueue = new Set();\n    this.saveQueue = new Set();\n    \n    this.persistenceQueue = new Set();\n    this.lastPersistTime = 0;\n    this.saveDebounceTimer = null;\n    this.criticalSaveMode = false;\n    \n    this.initializeStores();\n    \n    if (this.obsidianPlugin) {\n      this.initializeCache();\n    }\n  }\n\n  initializeStores() {\n    this.apiSources.forEach(api => {\n      this.stores[`${api}:userData`] = new Map();\n      this.stores[`${api}:mediaData`] = new Map();\n      this.stores[`${api}:searchResults`] = new Map();\n    });\n    \n    this.stores.userData = new Map();\n    this.stores.mediaData = new Map();\n    this.stores.searchResults = new Map();\n  }\n\n\n\n  async initializeCache() {\n    try {\n      await this.loadFromDisk();\n      this.startIncrementalSave(30000);\n      this.startAutoPrune(300000);\n    } catch (error) {\n      this.log('INIT_ERROR', 'system', '', error.message);\n    }\n  }\n\n  key(input) {\n    if (typeof input === 'string') return input;\n    if (!input || typeof input !== 'object') return String(input);\n    \n    const normalized = {};\n    Object.keys(input).sort().forEach(k => {\n      const val = input[k];\n      normalized[k] = val !== null && val !== undefined ? val : '';\n    });\n    return JSON.stringify(normalized);\n  }\n\n  structuredKey(scope, type, id, meta = {}) {\n    return this.key({ __scope: scope, __type: type, __id: String(id), ...meta });\n  }\n\n  compositeScope(scope, source) {\n    if (!source) return scope;\n    return `${source}:${scope}`;\n  }\n\n  parseCompositeScope(compositeScope) {\n    const parts = compositeScope.split(':');\n    if (parts.length >= 2 && this.apiSources.includes(parts[0])) {\n      return { source: parts[0], scope: parts.slice(1).join(':') };\n    }\n    return { source: null, scope: compositeScope };\n  }\n\n  getStore(scope, source = null) {\n    const compositeScope = this.compositeScope(scope, source);\n    return this.stores[compositeScope] || this.stores[scope];\n  }\n\n  getTTL(scope, source = null, customTtl = null) {\n    if (customTtl !== null) return customTtl;\n    \n    const compositeScope = this.compositeScope(scope, source);\n    return this.ttlMap[compositeScope] || this.ttlMap[scope] || 5 * 60 * 1000;\n  }\n\n  isExpired(entry, scope, source = null, customTtl = null) {\n    const ttl = customTtl ?? entry.customTtl ?? this.getTTL(scope, source);\n    return (Date.now() - entry.timestamp) > ttl;\n  }\n\n  compress(data) {\n    const str = JSON.stringify(data);\n    if (str.length < this.compressionThreshold) return { data, compressed: false };\n    \n    try {\n      const compressed = this.simpleCompress(str);\n      this.stats.compressions++;\n      return { data: compressed, compressed: true, originalSize: str.length };\n    } catch {\n      return { data, compressed: false };\n    }\n  }\n\n  decompress(entry) {\n    if (!entry.compressed) return entry.data;\n    try {\n      return JSON.parse(this.simpleDecompress(entry.data));\n    } catch {\n      return entry.data;\n    }\n  }\n\n  simpleCompress(str) {\n    return btoa(encodeURIComponent(str)).replace(/[+/=]/g, m => ({ '+': '-', '/': '_', '=': '' }[m] || m));\n  }\n\n  simpleDecompress(compressed) {\n    const restored = compressed.replace(/[-_]/g, m => ({ '-': '+', '_': '/' }[m]));\n    const padded = restored + '='.repeat((4 - restored.length % 4) % 4);\n    return decodeURIComponent(atob(padded));\n  }\n\n  updateIndexes(key, entry, operation = 'set') {\n    try {\n      const parsed = JSON.parse(key);\n      const { __scope: scope, userId, username, mediaId, tags } = parsed;\n      \n      if (operation === 'delete') {\n        this.removeFromIndexes(key, { userId, username, mediaId, tags });\n        return;\n      }\n\n      if (userId || username) {\n        const userKey = userId || username;\n        if (!this.indexes.byUser.has(userKey)) this.indexes.byUser.set(userKey, new Set());\n        this.indexes.byUser.get(userKey).add(key);\n      }\n\n      if (mediaId) {\n        if (!this.indexes.byMedia.has(mediaId)) this.indexes.byMedia.set(mediaId, new Set());\n        this.indexes.byMedia.get(mediaId).add(key);\n      }\n\n      if (tags && Array.isArray(tags)) {\n        tags.forEach(tag => {\n          if (!this.indexes.byTag.has(tag)) this.indexes.byTag.set(tag, new Set());\n          this.indexes.byTag.get(tag).add(key);\n        });\n      }\n    } catch {}\n  }\n\n  removeFromIndexes(key, { userId, username, mediaId, tags }) {\n    const userKey = userId || username;\n    if (userKey && this.indexes.byUser.has(userKey)) {\n      this.indexes.byUser.get(userKey).delete(key);\n      if (this.indexes.byUser.get(userKey).size === 0) this.indexes.byUser.delete(userKey);\n    }\n\n    if (mediaId && this.indexes.byMedia.has(mediaId)) {\n      this.indexes.byMedia.get(mediaId).delete(key);\n      if (this.indexes.byMedia.get(mediaId).size === 0) this.indexes.byMedia.delete(mediaId);\n    }\n\n    if (tags && Array.isArray(tags)) {\n      tags.forEach(tag => {\n        if (this.indexes.byTag.has(tag)) {\n          this.indexes.byTag.get(tag).delete(key);\n          if (this.indexes.byTag.get(tag).size === 0) this.indexes.byTag.delete(tag);\n        }\n      });\n    }\n  }\n\n  enforceSize(scope, source = null) {\n    const store = this.getStore(scope, source);\n    if (!store || store.size <= this.maxSize) return 0;\n\n    const entries = Array.from(store.entries())\n      .map(([key, entry]) => ({ key, entry, lastAccess: this.accessLog.get(key) || 0 }))\n      .sort((a, b) => a.lastAccess - b.lastAccess);\n\n    const toEvict = entries.slice(0, store.size - this.maxSize + this.batchSize);\n    toEvict.forEach(({ key }) => {\n      store.delete(key);\n      this.updateIndexes(key, null, 'delete');\n      this.accessLog.delete(key);\n      this.stats.evictions++;\n    });\n\n    this.schedulePersistence();\n    return toEvict.length;\n  }\n\n  get(key, options = {}) {\n    const { scope = 'userData', source = null, ttl = null, refreshCallback = null } = options;\n    const store = this.getStore(scope, source);\n    \n    if (!store) { \n      this.stats.misses++; \n      return null; \n    }\n\n    const cacheKey = typeof key === 'object' ? this.key(key) : key;\n    const entry = store.get(cacheKey);\n    \n    this.accessLog.set(cacheKey, Date.now());\n    \n    if (!entry) {\n      this.stats.misses++;\n      this.log('MISS', this.compositeScope(scope, source), cacheKey);\n      this.maybeRefresh(cacheKey, scope, source, refreshCallback);\n      return null;\n    }\n\n    if (this.isExpired(entry, scope, source, ttl)) {\n      store.delete(cacheKey);\n      this.updateIndexes(cacheKey, entry, 'delete');\n      this.stats.misses++;\n      this.log('EXPIRED', this.compositeScope(scope, source), cacheKey);\n      this.maybeRefresh(cacheKey, scope, source, refreshCallback);\n      this.schedulePersistence();\n      return null;\n    }\n\n    this.stats.hits++;\n    const age = Math.round((Date.now() - entry.timestamp) / 1000);\n    this.log('HIT', this.compositeScope(scope, source), cacheKey, `${age}s old`);\n    \n    if (this.shouldRefresh(entry, scope, source, ttl)) {\n      const callbackKey = `${this.compositeScope(scope, source)}:${cacheKey}`;\n      const callback = this.refreshCallbacks.get(callbackKey);\n      if (callback) this.scheduleRefresh(cacheKey, scope, source, callback);\n    }\n\n    return this.decompress(entry);\n  }\n\n  set(key, value, options = {}) {\n    const { scope = 'userData', source = null, ttl = null, tags = [], refreshCallback = null } = options;\n    const store = this.getStore(scope, source);\n    \n    if (!store) return false;\n\n    const cacheKey = typeof key === 'object' ? this.key(key) : key;\n    const compressed = this.compress(value);\n    \n    const entry = {\n      ...compressed,\n      timestamp: Date.now(),\n      customTtl: ttl,\n      tags,\n      accessCount: 1,\n      source: source\n    };\n\n    store.set(cacheKey, entry);\n    this.updateIndexes(cacheKey, entry);\n    this.enforceSize(scope, source);\n    \n    this.stats.sets++;\n    this.log('SET', this.compositeScope(scope, source), cacheKey, store.size);\n\n    if (refreshCallback) {\n      const callbackKey = `${this.compositeScope(scope, source)}:${cacheKey}`;\n      this.refreshCallbacks.set(callbackKey, refreshCallback);\n    }\n\n    this.schedulePersistence(true);\n    return true;\n  }\n\n  delete(key, options = {}) {\n    const { scope = 'userData', source = null } = options;\n    const store = this.getStore(scope, source);\n    \n    if (!store) return false;\n\n    const cacheKey = typeof key === 'object' ? this.key(key) : key;\n    const entry = store.get(cacheKey);\n    const deleted = store.delete(cacheKey);\n    \n    if (deleted) {\n      this.updateIndexes(cacheKey, entry, 'delete');\n      this.accessLog.delete(cacheKey);\n      this.stats.deletes++;\n      this.log('DELETE', this.compositeScope(scope, source), cacheKey);\n      this.schedulePersistence();\n    }\n    \n    return deleted;\n  }\n\n  invalidateByUser(userKey, options = {}) {\n    const { source = null } = options;\n    const keys = this.indexes.byUser.get(userKey);\n    if (!keys) return 0;\n\n    let deleted = 0;\n    const storesToSearch = source ? \n      Object.entries(this.stores).filter(([scopeName]) => scopeName.startsWith(`${source}:`)) :\n      Object.entries(this.stores);\n\n    keys.forEach(key => {\n      storesToSearch.forEach(([, store]) => {\n        if (store.delete(key)) deleted++;\n      });\n      this.accessLog.delete(key);\n    });\n\n    if (!source) {\n      this.indexes.byUser.delete(userKey);\n    }\n    \n    this.log('INVALIDATE_USER', source || 'all', userKey, `${deleted} entries`);\n    this.schedulePersistence();\n    return deleted;\n  }\n\n  invalidateByMedia(mediaId, options = {}) {\n    const { source = null } = options;\n    const keys = this.indexes.byMedia.get(String(mediaId));\n    if (!keys) return 0;\n\n    let deleted = 0;\n    const storesToSearch = source ? \n      Object.entries(this.stores).filter(([scopeName]) => scopeName.startsWith(`${source}:`)) :\n      Object.entries(this.stores);\n\n    keys.forEach(key => {\n      storesToSearch.forEach(([, store]) => {\n        if (store.delete(key)) deleted++;\n      });\n      this.accessLog.delete(key);\n    });\n\n    if (!source) {\n      this.indexes.byMedia.delete(String(mediaId));\n    }\n    \n    this.log('INVALIDATE_MEDIA', source || 'all', String(mediaId), `${deleted} entries`);\n    this.schedulePersistence();\n    return deleted;\n  }\n\n  invalidateByTag(tag, options = {}) {\n    const { source = null } = options;\n    const keys = this.indexes.byTag.get(tag);\n    if (!keys) return 0;\n\n    let deleted = 0;\n    const storesToSearch = source ? \n      Object.entries(this.stores).filter(([scopeName]) => scopeName.startsWith(`${source}:`)) :\n      Object.entries(this.stores);\n\n    keys.forEach(key => {\n      storesToSearch.forEach(([, store]) => {\n        if (store.delete(key)) deleted++;\n      });\n      this.accessLog.delete(key);\n    });\n\n    if (!source) {\n      this.indexes.byTag.delete(tag);\n    }\n    \n    this.log('INVALIDATE_TAG', source || 'all', tag, `${deleted} entries`);\n    this.schedulePersistence();\n    return deleted;\n  }\n\n  clearBySource(source) {\n    let total = 0;\n    Object.entries(this.stores).forEach(([scopeName, store]) => {\n      if (scopeName.startsWith(`${source}:`)) {\n        total += store.size;\n        store.clear();\n      }\n    });\n    \n    Object.values(this.indexes).forEach(index => {\n      for (const [key, keySet] of index.entries()) {\n        const filteredKeys = Array.from(keySet).filter(cacheKey => {\n          try {\n            const parsed = JSON.parse(cacheKey);\n            return parsed.__source !== source;\n          } catch {\n            return true;\n          }\n        });\n        \n        if (filteredKeys.length === 0) {\n          index.delete(key);\n        } else if (filteredKeys.length !== keySet.size) {\n          index.set(key, new Set(filteredKeys));\n        }\n      }\n    });\n    \n    this.log('CLEAR_SOURCE', source, '', `${total} entries`);\n    this.schedulePersistence();\n    return total;\n  }\n\n  clear(scope = null) {\n    if (scope) {\n      const store = this.stores[scope];\n      if (!store) return 0;\n      const count = store.size;\n      store.clear();\n      this.schedulePersistence();\n      return count;\n    }\n\n    let total = 0;\n    Object.values(this.stores).forEach(store => {\n      total += store.size;\n      store.clear();\n    });\n    \n    Object.values(this.indexes).forEach(index => index.clear());\n    this.accessLog.clear();\n    this.refreshCallbacks.clear();\n    \n    this.log('CLEAR_ALL', 'all', '', total);\n    this.schedulePersistence();\n    return total;\n  }\n\n  pruneExpired(scope = null, source = null) {\n    const scopesToPrune = scope ? [scope] : ['userData', 'mediaData', 'searchResults'];\n    const sourcesToPrune = source ? [source] : [null, ...this.apiSources];\n    \n    let total = 0;\n    const now = Date.now();\n\n    scopesToPrune.forEach(currentScope => {\n      sourcesToPrune.forEach(currentSource => {\n        const store = this.getStore(currentScope, currentSource);\n        if (!store) return;\n\n        const toDelete = [];\n        for (const [key, entry] of store.entries()) {\n          if (this.isExpired(entry, currentScope, currentSource)) {\n            toDelete.push(key);\n          }\n        }\n\n        toDelete.forEach(key => {\n          const entry = store.get(key);\n          store.delete(key);\n          this.updateIndexes(key, entry, 'delete');\n          this.accessLog.delete(key);\n          total++;\n        });\n      });\n    });\n\n    if (total > 0) {\n      this.schedulePersistence();\n    }\n    return total;\n  }\n\n  shouldRefresh(entry, scope, source = null, customTtl = null) {\n    if (!this.flags.backgroundRefresh) return false;\n    const ttl = this.getTTL(scope, source, customTtl);\n    return (Date.now() - entry.timestamp) > (ttl * 0.8);\n  }\n\n  maybeRefresh(key, scope, source, callback) {\n    if (callback && typeof callback === 'function') {\n      this.scheduleRefresh(key, scope, source, callback);\n    }\n  }\n\n  scheduleRefresh(key, scope, source, callback) {\n    const refreshKey = `${this.compositeScope(scope, source)}:${key}`;\n    if (this.loadQueue.has(refreshKey)) return;\n    \n    this.loadQueue.add(refreshKey);\n    \n    setTimeout(async () => {\n      try {\n        const newValue = await callback(key, scope, source);\n        if (newValue !== undefined) {\n          this.set(key, newValue, { scope, source, refreshCallback: callback });\n        }\n      } catch (error) {\n        this.log('REFRESH_ERROR', this.compositeScope(scope, source), key, error.message);\n      } finally {\n        this.loadQueue.delete(refreshKey);\n      }\n    }, 0);\n  }\n  schedulePersistence(immediate = false) {\n    if (immediate) {\n      this.criticalSaveMode = true;\n    }\n\n    if (this.saveDebounceTimer) {\n      clearTimeout(this.saveDebounceTimer);\n    }\n\n    const delay = immediate ? 100 : 2000;\n    this.saveDebounceTimer = setTimeout(() => {\n      this.saveToDisk();\n    }, delay);\n  }\n\n  startAutoPrune(interval = 5 * 60 * 1000) {\n    this.stopAutoPrune();\n    this.intervals.prune = setInterval(() => {\n      const pruned = this.pruneExpired();\n      if (pruned > 0) {\n        this.log('AUTO_PRUNE', 'system', '', `${pruned} entries pruned`);\n      }\n    }, interval);\n    this.flags.autoPrune = true;\n    return this;\n  }\n\n  stopAutoPrune() {\n    if (this.intervals.prune) {\n      clearInterval(this.intervals.prune);\n      this.intervals.prune = null;\n    }\n    this.flags.autoPrune = false;\n    return this;\n  }\n\n  startBackgroundRefresh(interval = 10 * 60 * 1000) {\n    this.flags.backgroundRefresh = true;\n    return this;\n  }\n\n  stopBackgroundRefresh() {\n    this.flags.backgroundRefresh = false;\n    return this;\n  }\n\n  startIncrementalSave(interval = 30 * 1000) {\n    this.stopIncrementalSave();\n    this.intervals.save = setInterval(() => {\n      if (Date.now() - this.lastPersistTime > interval / 2) {\n        this.saveToDisk();\n      }\n    }, interval);\n    return this;\n  }\n\n  stopIncrementalSave() {\n    if (this.intervals.save) {\n      clearInterval(this.intervals.save);\n      this.intervals.save = null;\n    }\n    return this;\n  }\n\n  async saveToDisk() {\n    if (this.state.saving) return false;\n    this.state.saving = true;\n\n    try {\n      const payload = {\n        version: this.version,\n        timestamp: Date.now(),\n        stats: { ...this.stats },\n        data: {},\n        indexes: {\n          byUser: Array.from(this.indexes.byUser.entries()).map(([k, v]) => [k, Array.from(v)]),\n          byMedia: Array.from(this.indexes.byMedia.entries()).map(([k, v]) => [k, Array.from(v)]),\n          byTag: Array.from(this.indexes.byTag.entries()).map(([k, v]) => [k, Array.from(v)])\n        },\n        accessLog: Array.from(this.accessLog.entries())\n      };\n\n      for (const [scope, store] of Object.entries(this.stores)) {\n        payload.data[scope] = Array.from(store.entries());\n      }\n\n      let saved = false;\n\n      if (this.obsidianPlugin?.app?.vault?.adapter) {\n        try {\n          const adapter = this.obsidianPlugin.app.vault.adapter;\n          const pluginDir = `${this.obsidianPlugin.manifest.dir}`;\n          const cachePath = `${pluginDir}/cache.json`;\n          \n          await adapter.write(cachePath, JSON.stringify(payload, null, 2));\n          this.log('SAVE_SUCCESS', 'system', cachePath, 'Direct file write');\n          saved = true;\n        } catch (error) {\n          this.log('SAVE_WARNING', 'system', 'cache.json', `Direct write failed: ${error.message}`);\n        }\n      }\n\n      if (!saved && this.obsidianPlugin?.app?.vault?.adapter) {\n        try {\n          const adapter = this.obsidianPlugin.app.vault.adapter;\n          const pluginDir = `${this.obsidianPlugin.manifest.dir}`;\n          const tempPath = `${pluginDir}/cache.tmp`;\n          const cachePath = `${pluginDir}/cache.json`;\n          \n          await adapter.write(tempPath, JSON.stringify(payload));\n          \n          try {\n            await adapter.remove(cachePath);\n          } catch {}\n          await adapter.rename(tempPath, cachePath);\n          \n          this.log('SAVE_SUCCESS', 'system', cachePath, 'Atomic write');\n          saved = true;\n        } catch (error) {\n          this.log('SAVE_WARNING', 'system', 'cache.tmp', `Atomic write failed: ${error.message}`);\n        }\n      }\n\n      if (saved) {\n        this.state.lastSaved = Date.now();\n        this.lastPersistTime = Date.now();\n        this.criticalSaveMode = false;\n        return true;\n      } else {\n        this.log('SAVE_ERROR', 'system', '', 'All save methods failed');\n        return false;\n      }\n    } catch (error) {\n      this.log('SAVE_ERROR', 'system', '', error.message);\n      return false;\n    } finally {\n      this.state.saving = false;\n      if (this.saveDebounceTimer) {\n        clearTimeout(this.saveDebounceTimer);\n        this.saveDebounceTimer = null;\n      }\n    }\n  }\n\n  async loadFromDisk() {\n    if (this.state.loading) return 0;\n    this.state.loading = true;\n\n    try {\n      let data = null;\n      \n      if (this.obsidianPlugin?.app?.vault?.adapter) {\n        const adapter = this.obsidianPlugin.app.vault.adapter;\n        const pluginDir = `${this.obsidianPlugin.manifest.dir}`;\n        const cachePath = `${pluginDir}/cache.json`;\n        \n        try {\n          const raw = await adapter.read(cachePath);\n          data = JSON.parse(raw);\n          this.log('LOAD_SUCCESS', 'system', cachePath, 'Direct file read');\n        } catch (error) {\n          if (!error.message.includes('ENOENT') && !error.message.includes('not exist')) {\n            this.log('LOAD_WARNING', 'system', cachePath, error.message);\n          }\n        }\n      }\n\n      if (!data) {\n        this.log('LOAD_EMPTY', 'system', '', 'No cache data found');\n        this.state.lastLoaded = Date.now();\n        return 0;\n      }\n\n      if (data.version && this.compareVersions(data.version, '3.0.0') < 0) {\n        this.log('LOAD_WARNING', 'system', '', `Old cache version ${data.version}, clearing`);\n        return 0;\n      }\n\n      let loaded = 0;\n      const now = Date.now();\n\n      for (const [scope, entries] of Object.entries(data.data || {})) {\n        if (!this.stores[scope]) {\n          this.stores[scope] = new Map();\n        }\n        \n        const store = this.stores[scope];\n        if (!Array.isArray(entries)) continue;\n\n        for (const [key, entry] of entries) {\n          if (!entry?.timestamp) continue;\n          \n          const { source: entrySource, scope: baseScope } = this.parseCompositeScope(scope);\n          const ttl = this.getTTL(baseScope || scope, entrySource, entry.customTtl);\n          \n          if ((now - entry.timestamp) < ttl) {\n            store.set(key, entry);\n            this.updateIndexes(key, entry);\n            loaded++;\n          }\n        }\n      }\n\n      if (data.indexes) {\n        Object.entries(data.indexes).forEach(([indexType, entries]) => {\n          if (this.indexes[indexType] && Array.isArray(entries)) {\n            entries.forEach(([key, values]) => {\n              this.indexes[indexType].set(key, new Set(values));\n            });\n          }\n        });\n      }\n\n      if (data.accessLog && Array.isArray(data.accessLog)) {\n        data.accessLog.forEach(([key, timestamp]) => {\n          this.accessLog.set(key, timestamp);\n        });\n      }\n\n      if (data.stats) {\n        this.stats.compressions = data.stats.compressions || 0;\n      }\n\n      this.state.lastLoaded = Date.now();\n      this.lastPersistTime = Date.now();\n      this.log('LOAD_COMPLETE', 'system', '', `${loaded} entries loaded`);\n      return loaded;\n    } catch (error) {\n      this.log('LOAD_ERROR', 'system', '', error.message);\n      return 0;\n    } finally {\n      this.state.loading = false;\n    }\n  }\n  \n  async clearAll() {\n  \n  \n  // Stop all timers to prevent interference\n  this.stopAutoPrune();\n  this.stopIncrementalSave(); \n  this.stopBackgroundRefresh();\n  \n  if (this.saveDebounceTimer) {\n    clearTimeout(this.saveDebounceTimer);\n    this.saveDebounceTimer = null;\n  }\n  \n  // Clear all in-memory data\n  let totalEntries = 0;\n  Object.values(this.stores).forEach(store => {\n    totalEntries += store.size;\n    store.clear();\n  });\n  \n  // Clear all indexes\n  Object.values(this.indexes).forEach(index => index.clear());\n  \n  // Clear all tracking data\n  this.accessLog.clear();\n  this.refreshCallbacks.clear();\n  this.loadQueue.clear();\n  this.saveQueue.clear();\n  this.persistenceQueue.clear();\n  \n  // Reset stats completely\n  this.stats = { \n    hits: 0, \n    misses: 0, \n    sets: 0, \n    deletes: 0, \n    evictions: 0, \n    compressions: 0 \n  };\n  \n  // Reset state\n  this.state = { \n    loading: false, \n    saving: false, \n    lastSaved: null, \n    lastLoaded: null \n  };\n  \n  // Reset timestamps\n  this.lastPersistTime = 0;\n  this.criticalSaveMode = false;\n  \n  // Force delete cache file from disk\n  if (this.obsidianPlugin?.app?.vault?.adapter) {\n    try {\n      const adapter = this.obsidianPlugin.app.vault.adapter;\n      const pluginDir = `${this.obsidianPlugin.manifest.dir}`;\n      const cachePath = `${pluginDir}/cache.json`;\n      const tempPath = `${pluginDir}/cache.tmp`;\n      \n      // Try to delete both cache files\n      try {\n        await adapter.remove(cachePath);\n\n      } catch (error) {\n        if (!error.message.includes('ENOENT') && !error.message.includes('not exist')) {\n          console.warn('[Cache] Could not delete cache.json:', error.message);\n        }\n      }\n      \n      try {\n        await adapter.remove(tempPath);\n\n      } catch (error) {\n        if (!error.message.includes('ENOENT') && !error.message.includes('not exist')) {\n          console.warn('[Cache] Could not delete cache.tmp:', error.message);\n        }\n      }\n      \n    } catch (error) {\n      console.error('[Cache] Error during disk cleanup:', error);\n    }\n  }\n  \n  // Write empty cache file to ensure clean state\n  try {\n    const emptyPayload = {\n      version: this.version,\n      timestamp: Date.now(),\n      stats: { ...this.stats },\n      data: {},\n      indexes: { byUser: [], byMedia: [], byTag: [] },\n      accessLog: []\n    };\n    \n    if (this.obsidianPlugin?.app?.vault?.adapter) {\n      const adapter = this.obsidianPlugin.app.vault.adapter;\n      const pluginDir = `${this.obsidianPlugin.manifest.dir}`;\n      const cachePath = `${pluginDir}/cache.json`;\n      \n      await adapter.write(cachePath, JSON.stringify(emptyPayload, null, 2));\n      \n    }\n  } catch (error) {\n    console.warn('[Cache] Could not write empty cache file:', error.message);\n  }\n  \n  // Restart essential services\n  this.startIncrementalSave(30000);\n  this.startAutoPrune(300000);\n  \n  \n  this.log('CLEAR_ALL_COMPLETE', 'system', '', `${totalEntries} entries + disk cleanup`);\n  \n  return totalEntries;\n}\n\n  compareVersions(a, b) {\n    const partsA = a.split('.').map(Number);\n    const partsB = b.split('.').map(Number);\n    \n    for (let i = 0; i < Math.max(partsA.length, partsB.length); i++) {\n      const partA = partsA[i] || 0;\n      const partB = partsB[i] || 0;\n      \n      if (partA > partB) return 1;\n      if (partA < partB) return -1;\n    }\n    return 0;\n  }\n\n  getStats() {\n    const total = this.stats.hits + this.stats.misses;\n    const hitRate = total > 0 ? (this.stats.hits / total * 100).toFixed(1) : '0.0';\n    \n    const storeStats = {};\n    Object.entries(this.stores).forEach(([scope, store]) => {\n      if (store.size > 0) {\n        storeStats[scope] = store.size;\n      }\n    });\n    \n    return {\n      ...this.stats,\n      hitRate: `${hitRate}%`,\n      totalRequests: total,\n      cacheSize: Object.values(this.stores).reduce((sum, store) => sum + store.size, 0),\n      indexSize: Object.values(this.indexes).reduce((sum, index) => sum + index.size, 0),\n      storeBreakdown: storeStats,\n      lastSaved: this.state.lastSaved ? new Date(this.state.lastSaved).toLocaleString() : 'Never',\n      lastLoaded: this.state.lastLoaded ? new Date(this.state.lastLoaded).toLocaleString() : 'Never'\n    };\n  }\n\n  log(operation, scope, key, extra = '') {\n\n    const truncated = key.length > 50 ? key.slice(0, 47) + '...' : key;\n\n  }\n\n\n\n  async destroy() {\n    Object.values(this.intervals).forEach(interval => {\n      if (interval) clearInterval(interval);\n    });\n    \n    if (this.saveDebounceTimer) {\n      clearTimeout(this.saveDebounceTimer);\n      this.saveDebounceTimer = null;\n    }\n    \n    this.criticalSaveMode = true;\n    await this.saveToDisk();\n    \n    this.loadQueue.clear();\n    this.saveQueue.clear();\n    this.persistenceQueue.clear();\n    \n    Object.keys(this.stats).forEach(key => this.stats[key] = 0);\n    this.state = { loading: false, saving: false, lastSaved: null, lastLoaded: null };\n    \n    this.log('DESTROY', 'system', '', 'Cache destroyed and saved');\n  }\n\n  // Clears a cache scope either globally or for a specific API source\n  invalidateScope(scope, options = {}) {\n    const { source = null } = options;\n    let cleared = 0;\n\n    if (source) {\n      const composite = `${source}:${scope}`;\n      const store = this.stores[composite];\n      if (store) {\n        cleared = store.size;\n        store.clear();\n      }\n      // Also clear generic scope if present\n      if (this.stores[scope]) {\n        cleared += this.stores[scope].size;\n        this.stores[scope].clear();\n      }\n      this.schedulePersistence();\n      return cleared;\n    }\n\n    // No source specified: clear generic scope and all per-source scopes\n    if (this.stores[scope]) {\n      cleared += this.stores[scope].size;\n      this.stores[scope].clear();\n    }\n\n    this.apiSources.forEach(api => {\n      const composite = `${api}:${scope}`;\n      const store = this.stores[composite];\n      if (store) {\n        cleared += store.size;\n        store.clear();\n      }\n    });\n\n    this.schedulePersistence();\n    return cleared;\n  }\n}\n\nexport { Cache };", "// No obsidian import needed\n\nclass AniListRequest {\n  constructor(config) {\n    this.config = config;\n    this.rateLimiter = {\n      requests: [],\n      windowMs: 60000,\n      maxRequests: 90,\n      remaining: 90\n    };\n    this.metrics = {\n      requests: 0,\n      errors: 0,\n      avgTime: 0\n    };\n  }\n\n  checkRateLimit() {\n    const now = Date.now();\n    this.rateLimiter.requests = this.rateLimiter.requests.filter(\n      time => now - time < this.rateLimiter.windowMs\n    );\n\n    const maxAllowed = Math.floor(this.rateLimiter.maxRequests * this.config.rateLimitBuffer);\n    \n    if (this.rateLimiter.requests.length >= maxAllowed) {\n      const oldestRequest = Math.min(...this.rateLimiter.requests);\n      const waitTime = this.rateLimiter.windowMs - (now - oldestRequest);\n      return { allowed: false, waitTime: Math.max(waitTime, 1000) };\n    }\n\n    this.rateLimiter.requests.push(now);\n    return { allowed: true, waitTime: 0 };\n  }\n\n  shouldRetry(error, attempt, maxAttempts) {\n    if (attempt >= maxAttempts) return false;\n    if (error.message.includes('timeout')) return true;\n    if (error.status >= 400 && error.status < 500) return false;\n    return true;\n  }\n\n  getRetryDelay(attempt) {\n    const baseDelay = 1000;\n    const maxDelay = 10000;\n    const exponentialDelay = baseDelay * Math.pow(2, attempt - 1);\n    const jitter = Math.random() * 1000;\n    return Math.min(exponentialDelay + jitter, maxDelay);\n  }\n\n  updateMetrics(processingTime, isError = false) {\n    this.metrics.requests++;\n    if (isError) {\n      this.metrics.errors++;\n    } else {\n      this.metrics.avgTime = (this.metrics.avgTime + processingTime) / 2;\n    }\n  }\n\n  getUtilization() {\n    return `${((this.rateLimiter.requests.length / this.rateLimiter.maxRequests) * 100).toFixed(1)}%`;\n  }\n}\n\nexport { AniListRequest };", "// No obsidian import needed\n\nclass MALRequest {\n  constructor(config, plugin) {\n    this.config = config;\n    this.plugin = plugin;\n    this.rateLimiter = {\n      requests: [],\n      windowMs: 60000,\n      maxRequests: 60,\n      remaining: 60\n    };\n    this.authState = {\n      lastAuthCheck: 0,\n      authCheckInterval: 300000,\n      consecutiveAuthFailures: 0,\n      lastRequest: 0\n    };\n    this.metrics = {\n      requests: 0,\n      errors: 0,\n      avgTime: 0,\n      authErrors: 0\n    };\n  }\n\n  checkRateLimit() {\n    const now = Date.now();\n    this.rateLimiter.requests = this.rateLimiter.requests.filter(\n      time => now - time < this.rateLimiter.windowMs\n    );\n\n    const maxAllowed = Math.floor(this.rateLimiter.maxRequests * this.config.malConfig.rateLimitBuffer);\n    \n    if (this.rateLimiter.requests.length >= maxAllowed) {\n      const oldestRequest = Math.min(...this.rateLimiter.requests);\n      const waitTime = this.rateLimiter.windowMs - (now - oldestRequest);\n      return { allowed: false, waitTime: Math.max(waitTime, 2000) };\n    }\n\n    this.rateLimiter.requests.push(now);\n    this.authState.lastRequest = now;\n    return { allowed: true, waitTime: 0 };\n  }\n\n  async validateAuth() {\n    const now = Date.now();\n    \n    if (now - this.authState.lastAuthCheck < this.authState.authCheckInterval) {\n      return { valid: true };\n    }\n\n    try {\n      if (this.plugin.malAuth && typeof this.plugin.malAuth.ensureValidToken === 'function') {\n        await this.plugin.malAuth.ensureValidToken();\n        this.authState.lastAuthCheck = now;\n        this.authState.consecutiveAuthFailures = 0;\n        return { valid: true };\n      }\n\n      if (!this.plugin.settings?.malAccessToken) {\n        return { \n          valid: false, \n          error: 'No MAL access token available' \n        };\n      }\n\n      return { valid: true };\n    } catch (error) {\n      this.authState.consecutiveAuthFailures++;\n      this.metrics.authErrors++;\n      return { \n        valid: false, \n        error: error.message || 'MAL authentication failed' \n      };\n    }\n  }\n\n  shouldRetry(error, attempt, maxAttempts) {\n    if (attempt >= maxAttempts) return false;\n    \n    if (error.message.includes('auth') || error.message.includes('401')) {\n      return attempt < this.config.malConfig.maxAuthRetries;\n    }\n    \n    if (error.status >= 400 && error.status < 500) return false;\n    if (error.message.includes('timeout')) return true;\n    return true;\n  }\n\n  getRetryDelay(attempt) {\n    const baseDelay = 2000;\n    const maxDelay = 15000;\n    \n    const timeSinceLastRequest = Date.now() - this.authState.lastRequest;\n    if (timeSinceLastRequest < 1000) {\n      return Math.max(baseDelay, 1500);\n    }\n    \n    if (this.authState.consecutiveAuthFailures > 0) {\n      return baseDelay * (1 + this.authState.consecutiveAuthFailures * 0.5);\n    }\n    \n    const exponentialDelay = baseDelay * Math.pow(2, attempt - 1);\n    const jitter = Math.random() * 1000;\n    return Math.min(exponentialDelay + jitter, maxDelay);\n  }\n\n  updateMetrics(processingTime, isError = false) {\n    this.metrics.requests++;\n    if (isError) {\n      this.metrics.errors++;\n    } else {\n      this.metrics.avgTime = (this.metrics.avgTime + processingTime) / 2;\n    }\n  }\n\n  getUtilization() {\n    return `${((this.rateLimiter.requests.length / this.rateLimiter.maxRequests) * 100).toFixed(1)}%`;\n  }\n\n  getAuthStatus() {\n    return this.authState.consecutiveAuthFailures === 0 ? 'healthy' : 'degraded';\n  }\n}\n\nexport { MALRequest };", "// No obsidian import needed\n\nclass SimklRequest {\n  constructor(config, plugin) {\n    this.config = config;\n    this.plugin = plugin;\n    this.rateLimiter = {\n      requests: [],\n      windowMs: 60000, // 1 minute window\n      maxRequests: 100, // Simkl allows more requests than MAL but less than AniList\n      remaining: 100\n    };\n    this.authState = {\n      lastAuthCheck: 0,\n      authCheckInterval: 600000, // 10 minutes - longer than MAL since Simkl tokens are more stable\n      consecutiveAuthFailures: 0,\n      lastRequest: 0,\n      tokenExpiry: null\n    };\n    this.metrics = {\n      requests: 0,\n      errors: 0,\n      avgTime: 0,\n      authErrors: 0,\n      searchRequests: 0, // Track search vs auth requests separately\n      userRequests: 0\n    };\n  }\n\n  checkRateLimit() {\n    const now = Date.now();\n    this.rateLimiter.requests = this.rateLimiter.requests.filter(\n      time => now - time < this.rateLimiter.windowMs\n    );\n\n    const maxAllowed = Math.floor(this.rateLimiter.maxRequests * this.config.simklConfig.rateLimitBuffer);\n    \n    if (this.rateLimiter.requests.length >= maxAllowed) {\n      const oldestRequest = Math.min(...this.rateLimiter.requests);\n      const waitTime = this.rateLimiter.windowMs - (now - oldestRequest);\n      return { allowed: false, waitTime: Math.max(waitTime, 1500) }; // Slightly longer wait than AniList\n    }\n\n    this.rateLimiter.requests.push(now);\n    this.authState.lastRequest = now;\n    return { allowed: true, waitTime: 0 };\n  }\n\n  async validateAuth() {\n    const now = Date.now();\n    \n    // Skip auth validation for search requests (they don't require auth)\n    if (this.lastRequestWasSearch) {\n      return { valid: true };\n    }\n    \n    if (now - this.authState.lastAuthCheck < this.authState.authCheckInterval) {\n      return { valid: true };\n    }\n\n    try {\n      if (this.plugin.simklAuth && typeof this.plugin.simklAuth.ensureValidToken === 'function') {\n        await this.plugin.simklAuth.ensureValidToken();\n        this.authState.lastAuthCheck = now;\n        this.authState.consecutiveAuthFailures = 0;\n        return { valid: true };\n      }\n\n      if (!this.plugin.settings?.simklAccessToken) {\n        return { \n          valid: false, \n          error: 'No Simkl access token available' \n        };\n      }\n\n      // Check if token is expired (if we have expiry info)\n      if (this.authState.tokenExpiry && now > this.authState.tokenExpiry) {\n        return {\n          valid: false,\n          error: 'Simkl token has expired'\n        };\n      }\n\n      this.authState.lastAuthCheck = now;\n      return { valid: true };\n    } catch (error) {\n      this.authState.consecutiveAuthFailures++;\n      this.metrics.authErrors++;\n      return { \n        valid: false, \n        error: error.message || 'Simkl authentication failed' \n      };\n    }\n  }\n\n  shouldRetry(error, attempt, maxAttempts) {\n    if (attempt >= maxAttempts) return false;\n    \n    // Simkl-specific error handling\n    if (error.message.includes('rate limit') || error.message.includes('429')) {\n      return attempt < 2; // Only retry rate limits once\n    }\n    \n    if (error.message.includes('auth') || error.message.includes('401') || error.message.includes('403')) {\n      return attempt < this.config.simklConfig.maxAuthRetries;\n    }\n    \n    // Server errors (5xx) - retry\n    if (error.status >= 500 && error.status < 600) return true;\n    \n    // Client errors (4xx except auth) - don't retry\n    if (error.status >= 400 && error.status < 500) return false;\n    \n    // Network/timeout errors - retry\n    if (error.message.includes('timeout') || error.message.includes('network')) return true;\n    \n    return true;\n  }\n\n  getRetryDelay(attempt) {\n    const baseDelay = 600; // faster base for Simkl\n    const maxDelay = 6000;\n    \n    const timeSinceLastRequest = Date.now() - this.authState.lastRequest;\n    if (timeSinceLastRequest < 500) {\n      return Math.max(baseDelay, 800);\n    }\n    \n    if (this.authState.consecutiveAuthFailures > 0) {\n      return baseDelay * (1 + this.authState.consecutiveAuthFailures * 0.5);\n    }\n    \n    if (this.lastErrorWasRateLimit) {\n      return Math.max(baseDelay * 2, 3000);\n    }\n    \n    const exponentialDelay = baseDelay * Math.pow(2, attempt - 1);\n    const jitter = Math.random() * 800;\n    return Math.min(exponentialDelay + jitter, maxDelay);\n  }\n\n  updateMetrics(processingTime, isError = false) {\n    this.metrics.requests++;\n    if (isError) {\n      this.metrics.errors++;\n    } else {\n      this.metrics.avgTime = (this.metrics.avgTime + processingTime) / 2;\n    }\n    \n    // Track request types for better insights\n    if (this.lastRequestWasSearch) {\n      this.metrics.searchRequests++;\n    } else {\n      this.metrics.userRequests++;\n    }\n  }\n\n  getUtilization() {\n    return `${((this.rateLimiter.requests.length / this.rateLimiter.maxRequests) * 100).toFixed(1)}%`;\n  }\n\n  getAuthStatus() {\n    if (this.authState.consecutiveAuthFailures === 0) return 'healthy';\n    if (this.authState.consecutiveAuthFailures < 3) return 'degraded';\n    return 'unhealthy';\n  }\n\n  // Simkl-specific method to set request context\n  setRequestContext(isSearch = false) {\n    this.lastRequestWasSearch = isSearch;\n  }\n\n  // Simkl-specific method to handle rate limit errors\n  handleRateLimitError() {\n    this.lastErrorWasRateLimit = true;\n    setTimeout(() => {\n      this.lastErrorWasRateLimit = false;\n    }, 30000); // Reset flag after 30 seconds\n  }\n\n  // Method to update token expiry information\n  updateTokenExpiry(expiresIn) {\n    if (expiresIn) {\n      this.authState.tokenExpiry = Date.now() + (expiresIn * 1000);\n    }\n  }\n\n  // Get detailed metrics including Simkl-specific data\n  getDetailedMetrics() {\n    return {\n      ...this.metrics,\n      rateLimiter: {\n        current: this.rateLimiter.requests.length,\n        max: this.rateLimiter.maxRequests,\n        utilization: this.getUtilization()\n      },\n      auth: {\n        status: this.getAuthStatus(),\n        failures: this.authState.consecutiveAuthFailures,\n        lastCheck: new Date(this.authState.lastAuthCheck).toISOString(),\n        tokenExpiry: this.authState.tokenExpiry ? \n          new Date(this.authState.tokenExpiry).toISOString() : null\n      },\n      requestTypes: {\n        search: this.metrics.searchRequests,\n        user: this.metrics.userRequests,\n        searchRatio: this.metrics.requests > 0 ? \n          `${((this.metrics.searchRequests / this.metrics.requests) * 100).toFixed(1)}%` : '0%'\n      }\n    };\n  }\n}\n\nexport { SimklRequest };", "// No obsidian import needed\n\nclass TMDbRequest {\n\tconstructor(config) {\n\t\tthis.config = config;\n\t\tthis.rateLimiter = {\n\t\t\trequests: [],\n\t\t\twindowMs: 60000,\n\t\t\tmaxRequests: 100,\n\t\t\tremaining: 100\n\t\t};\n\t\tthis.metrics = {\n\t\t\trequests: 0,\n\t\t\terrors: 0,\n\t\t\tavgTime: 0\n\t\t};\n\t}\n\n\tcheckRateLimit() {\n\t\tconst now = Date.now();\n\t\tthis.rateLimiter.requests = this.rateLimiter.requests.filter(\n\t\t\ttime => now - time < this.rateLimiter.windowMs\n\t\t);\n\n\t\tconst buffer = (this.config?.tmdbConfig?.rateLimitBuffer ?? this.config.rateLimitBuffer) || 0.9;\n\t\tconst maxAllowed = Math.floor(this.rateLimiter.maxRequests * buffer);\n\t\t\n\t\tif (this.rateLimiter.requests.length >= maxAllowed) {\n\t\t\tconst oldestRequest = Math.min(...this.rateLimiter.requests);\n\t\t\tconst waitTime = this.rateLimiter.windowMs - (now - oldestRequest);\n\t\t\treturn { allowed: false, waitTime: Math.max(waitTime, 500) };\n\t\t}\n\n\t\tthis.rateLimiter.requests.push(now);\n\t\treturn { allowed: true, waitTime: 0 };\n\t}\n\n\tshouldRetry(error, attempt, maxAttempts) {\n\t\tif (attempt >= maxAttempts) return false;\n\t\tconst msg = String(error?.message || '').toLowerCase();\n\t\tif (msg.includes('timeout') || msg.includes('network')) return true;\n\t\tif (msg.includes('429') || msg.includes('rate limit')) return attempt < 2;\n\t\tif (error.status >= 500 && error.status < 600) return true;\n\t\tif (error.status >= 400 && error.status < 500) return false;\n\t\treturn true;\n\t}\n\n\tgetRetryDelay(attempt) {\n\t\tconst baseDelay = 500;\n\t\tconst maxDelay = 8000;\n\t\tconst exponentialDelay = baseDelay * Math.pow(2, attempt - 1);\n\t\tconst jitter = Math.random() * 800;\n\t\treturn Math.min(exponentialDelay + jitter, maxDelay);\n\t}\n\n\tupdateMetrics(processingTime, isError = false) {\n\t\tthis.metrics.requests++;\n\t\tif (isError) {\n\t\t\tthis.metrics.errors++;\n\t\t} else {\n\t\t\tthis.metrics.avgTime = (this.metrics.avgTime + processingTime) / 2;\n\t\t}\n\t}\n\n\tgetUtilization() {\n\t\treturn `${((this.rateLimiter.requests.length / this.rateLimiter.maxRequests) * 100).toFixed(1)}%`;\n\t}\n}\n\nexport { TMDbRequest };", "// No obsidian import needed here\nimport { AniListRequest } from './AniListRequest.js';\nimport { MALRequest } from './MALRequest.js';\nimport { SimklRequest } from './SimklRequest.js';\nimport { TMDbRequest } from './TMDbRequest.js';\n\nclass RequestQueue {\n  constructor(plugin) {\n    this.plugin = plugin;\n    \n    this.queues = {\n      high: [],\n      normal: [],\n      low: []\n    };\n    \n    this.config = {\n      baseDelay: 700,\n      maxDelay: 5000,\n      minDelay: 100,\n      maxConcurrent: 3,\n      maxRetries: 3,\n      timeoutMs: 30000,\n      rateLimitBuffer: 0.8,\n      malConfig: {\n        baseDelay: 1000,\n        maxConcurrent: 2,\n        rateLimitBuffer: 0.7,\n        authRetryDelay: 2000,\n        maxAuthRetries: 2\n      },\n      simklConfig: {\n        baseDelay: 500,\n        maxConcurrent: 3,\n        rateLimitBuffer: 0.9,\n        authRetryDelay: 2000,\n        maxAuthRetries: 3\n      }\n    };\n    \n    this.state = {\n      isProcessing: false,\n      activeRequests: new Map(),\n      completedRequests: 0,\n      failedRequests: 0,\n      concurrentCount: 0\n    };\n    \n    this.services = {\n      anilist: new AniListRequest(this.config),\n      mal: new MALRequest(this.config, plugin),\n      simkl: new SimklRequest(this.config, plugin),\n      tmdb: new TMDbRequest(this.config)\n    };\n    \n    this.metrics = {\n      requestsQueued: 0,\n      requestsProcessed: 0,\n      requestsFailed: 0,\n      queuePeakSize: 0,\n      rateLimitHits: 0,\n      retries: 0,\n      startTime: Date.now()\n    };\n    \n    this.requestTracker = new Map();\n    \n    this.loaderState = {\n      visible: false,\n      requestCount: 0,\n      lastUpdate: 0,\n      debounceTimeout: null\n    };\n    \n    this.startBackgroundTasks();\n  }\n\n  add(requestFn, options = {}) {\n    const {\n      priority = 'normal',\n      timeout = this.config.timeoutMs,\n      retries = this.config.maxRetries,\n      metadata = {},\n      service = 'anilist'\n    } = options;\n    \n    const requestId = this.generateRequestId();\n    const queueTime = Date.now();\n    \n    const adjustedOptions = this.adjustOptionsForService(service, {\n      timeout, retries, priority, metadata\n    });\n    \n    return new Promise((resolve, reject) => {\n      const requestItem = {\n        requestFn,\n        resolve,\n        reject,\n        id: requestId,\n        priority,\n        timeout: adjustedOptions.timeout,\n        retries: adjustedOptions.retries,\n        metadata: { ...metadata, service },\n        queueTime,\n        startTime: null,\n        attempt: 0,\n        maxAttempts: adjustedOptions.retries + 1,\n        service\n      };\n      \n      this.queues[priority].push(requestItem);\n      this.metrics.requestsQueued++;\n      this.updateQueueMetrics();\n      \n      // Update loader state immediately when request is queued\n      this.updateLoaderState(true);\n      \n      // Start processing\n      this.process();\n      \n      this.requestTracker.set(requestId, {\n        queueTime,\n        priority,\n        service\n      });\n    });\n  }\n  \n  adjustOptionsForService(service, options) {\n    if (service === 'mal') {\n      return {\n        timeout: Math.max(options.timeout, 30000),\n        retries: Math.min(options.retries, this.config.malConfig.maxAuthRetries),\n        priority: options.priority,\n        metadata: options.metadata\n      };\n    }\n    \n    if (service === 'simkl') {\n      return {\n        timeout: Math.max(options.timeout, 25000), // Simkl can be slower than AniList\n        retries: Math.min(options.retries, this.config.simklConfig.maxAuthRetries),\n        priority: options.priority,\n        metadata: options.metadata\n      };\n    }\n    \n    return options;\n  }\n  \n  async process() {\n    if (this.state.isProcessing || this.getTotalQueueSize() === 0) {\n      if (this.getTotalQueueSize() === 0) {\n        this.updateLoaderState(false);\n      }\n      return;\n    }\n    \n    this.state.isProcessing = true;\n    this.updateLoaderState(true);\n    \n    try {\n      const requestItem = this.getNextRequest();\n      if (!requestItem) {\n        this.state.isProcessing = false;\n        this.updateLoaderState(false);\n        return;\n      }\n      \n      if (!this.canProcessRequest(requestItem)) {\n        this.queues[requestItem.priority].unshift(requestItem);\n        this.state.isProcessing = false;\n        setTimeout(() => this.process(), this.config.minDelay);\n        return;\n      }\n      \n      const serviceHandler = this.services[requestItem.service];\n      const rateLimitCheck = serviceHandler.checkRateLimit();\n      \n      if (!rateLimitCheck.allowed) {\n        this.queues[requestItem.priority].unshift(requestItem);\n        this.state.isProcessing = false;\n        this.metrics.rateLimitHits++;\n        \n        setTimeout(() => this.process(), rateLimitCheck.waitTime);\n        return;\n      }\n      \n      // Service-specific auth validation\n      if (requestItem.service === 'mal') {\n        const authCheck = await serviceHandler.validateAuth();\n        if (!authCheck.valid) {\n          this.handleMalAuthFailure(requestItem, authCheck.error);\n          return;\n        }\n      } else if (requestItem.service === 'simkl') {\n        // Set request context for Simkl (helps with auth decisions)\n        const isSearchRequest = requestItem.metadata?.type === 'search';\n        serviceHandler.setRequestContext(isSearchRequest);\n        \n        // Only validate auth for non-search requests\n        if (!isSearchRequest) {\n          const authCheck = await serviceHandler.validateAuth();\n          if (!authCheck.valid) {\n            this.handleSimklAuthFailure(requestItem, authCheck.error);\n            return;\n          }\n        }\n      }\n      \n      await this.executeRequest(requestItem, serviceHandler);\n      \n    } finally {\n      this.state.isProcessing = false;\n      \n      if (this.getTotalQueueSize() > 0) {\n        setTimeout(() => this.process(), this.config.minDelay);\n      } else {\n        this.updateLoaderState(false);\n      }\n    }\n  }\n  \n  canProcessRequest(requestItem) {\n    const service = requestItem.service || 'anilist';\n    const currentServiceRequests = Array.from(this.state.activeRequests.values())\n      .filter(req => req.service === service).length;\n    \n    const maxConcurrent = this.getMaxConcurrentForService(service);\n    \n    return this.state.concurrentCount < this.config.maxConcurrent && \n           currentServiceRequests < maxConcurrent;\n  }\n  \n  getMaxConcurrentForService(service) {\n    switch (service) {\n      case 'mal':\n        return this.config.malConfig.maxConcurrent;\n      case 'simkl':\n        return this.config.simklConfig.maxConcurrent;\n      default:\n        return this.config.maxConcurrent;\n    }\n  }\n  \n  async executeRequest(requestItem, serviceHandler) {\n    const { requestFn, resolve, reject, id, timeout, service } = requestItem;\n    \n    this.state.concurrentCount++;\n    this.state.activeRequests.set(id, requestItem);\n    requestItem.startTime = Date.now();\n    requestItem.attempt++;\n    \n    const waitTime = requestItem.startTime - requestItem.queueTime;\n    \n    try {\n      const timeoutPromise = new Promise((_, timeoutReject) => {\n        setTimeout(() => timeoutReject(new Error('Request timeout')), timeout);\n      });\n      \n      const result = await Promise.race([requestFn(), timeoutPromise]);\n      \n      const processingTime = Date.now() - requestItem.startTime;\n      this.handleRequestSuccess(requestItem, result, processingTime, waitTime, serviceHandler);\n      resolve(result);\n      \n    } catch (error) {\n      const processingTime = Date.now() - requestItem.startTime;\n      const shouldRetry = await this.handleRequestError(requestItem, error, processingTime, waitTime, serviceHandler);\n      \n      if (shouldRetry) {\n        const retryDelay = serviceHandler.getRetryDelay(requestItem.attempt);\n        setTimeout(() => {\n          this.queues[requestItem.priority].unshift(requestItem);\n          this.process();\n        }, retryDelay);\n        this.metrics.retries++;\n      } else {\n        reject(error);\n      }\n    } finally {\n      this.state.concurrentCount--;\n      this.state.activeRequests.delete(id);\n      this.requestTracker.delete(id);\n      \n      this.updateLoaderState();\n    }\n  }\n\n  handleMalAuthFailure(requestItem, errorMessage) {\n    const malService = this.services.mal;\n    \n    if (malService.authState.consecutiveAuthFailures >= this.config.malConfig.maxAuthRetries) {\n      requestItem.reject(new Error(`MAL authentication persistently failing: ${errorMessage}`));\n      this.state.isProcessing = false;\n      this.updateLoaderState(false);\n      return;\n    }\n    \n    setTimeout(() => {\n      this.queues[requestItem.priority].unshift(requestItem);\n      this.state.isProcessing = false;\n      this.process();\n    }, this.config.malConfig.authRetryDelay);\n  }\n\n  handleSimklAuthFailure(requestItem, errorMessage) {\n    const simklService = this.services.simkl;\n    \n    if (simklService.authState.consecutiveAuthFailures >= this.config.simklConfig.maxAuthRetries) {\n      requestItem.reject(new Error(`Simkl authentication persistently failing: ${errorMessage}`));\n      this.state.isProcessing = false;\n      this.updateLoaderState(false);\n      return;\n    }\n    \n    setTimeout(() => {\n      this.queues[requestItem.priority].unshift(requestItem);\n      this.state.isProcessing = false;\n      this.process();\n    }, this.config.simklConfig.authRetryDelay);\n  }\n\n  handleRequestSuccess(requestItem, result, processingTime, waitTime, serviceHandler) {\n    this.state.completedRequests++;\n    serviceHandler.updateMetrics(processingTime);\n    this.metrics.requestsProcessed++;\n  }\n  \n  async handleRequestError(requestItem, error, processingTime, waitTime, serviceHandler) {\n    this.state.failedRequests++;\n    serviceHandler.updateMetrics(processingTime, true);\n    \n    // Simkl-specific error handling\n    if (requestItem.service === 'simkl' && error.message.includes('rate limit')) {\n      serviceHandler.handleRateLimitError();\n    }\n    \n    const shouldRetry = serviceHandler.shouldRetry(error, requestItem.attempt, requestItem.maxAttempts);\n    \n    if (!shouldRetry) {\n      this.metrics.requestsFailed++;\n    }\n    \n    return shouldRetry;\n  }\n\n  // Updated loader state management remains the same\n  updateLoaderState(forceShow = null) {\n    if (this.loaderState.debounceTimeout) {\n      clearTimeout(this.loaderState.debounceTimeout);\n      this.loaderState.debounceTimeout = null;\n    }\n    \n    const totalRequests = this.getTotalQueueSize() + this.state.concurrentCount;\n    let shouldShow;\n    \n    if (forceShow !== null) {\n      shouldShow = forceShow;\n    } else {\n      shouldShow = totalRequests > 0;\n    }\n    \n    if (shouldShow && !this.loaderState.visible) {\n      this.showGlobalLoader();\n    } else if (!shouldShow && this.loaderState.visible) {\n      this.loaderState.debounceTimeout = setTimeout(() => {\n        if (this.getTotalQueueSize() + this.state.concurrentCount === 0) {\n          this.hideGlobalLoader();\n        }\n      }, 300);\n    }\n    \n    this.loaderState.requestCount = totalRequests;\n    this.loaderState.lastUpdate = Date.now();\n    \n    if (this.loaderState.visible) {\n      this.updateLoaderCounter();\n    }\n  }\n  \n  showGlobalLoader() {\n    if (!this.plugin?.settings?.showLoadingIcon) return;\n    \n    const loader = document.getElementById('zoro-global-loader');\n    if (loader) {\n      loader.classList.add('zoro-show');\n      this.loaderState.visible = true;\n      this.updateLoaderCounter();\n    }\n  }\n  \n  hideGlobalLoader() {\n    const loader = document.getElementById('zoro-global-loader');\n    if (loader) {\n      loader.classList.remove('zoro-show');\n      loader.removeAttribute('data-count');\n      this.loaderState.visible = false;\n    }\n  }\n  \n  updateLoaderCounter() {\n    const loader = document.getElementById('zoro-global-loader');\n    if (loader && this.loaderState.visible) {\n      const queueSize = this.getTotalQueueSize() + this.state.concurrentCount;\n      if (queueSize > 1) {\n        loader.setAttribute('data-count', queueSize);\n      } else {\n        loader.removeAttribute('data-count');\n      }\n    }\n  }\n  \n  updateQueueMetrics() {\n    const totalQueued = this.getTotalQueueSize();\n    this.metrics.queuePeakSize = Math.max(this.metrics.queuePeakSize, totalQueued);\n  }\n\n  getMetrics() {\n    const now = Date.now();\n    const uptime = now - this.metrics.startTime;\n    const totalRequests = this.metrics.requestsProcessed + this.metrics.requestsFailed;\n    const successRate = totalRequests > 0 ? (this.metrics.requestsProcessed / totalRequests) : 1;\n    \n    return {\n      uptime: this.formatDuration(uptime),\n      queue: {\n        current: this.getQueueSizes(),\n        total: this.getTotalQueueSize(),\n        peak: this.metrics.queuePeakSize,\n        processed: this.metrics.requestsProcessed,\n        failed: this.metrics.requestsFailed,\n        retries: this.metrics.retries\n      },\n      performance: {\n        successRate: `${(successRate * 100).toFixed(2)}%`\n      },\n      rateLimit: {\n        anilist: {\n          requests: this.services.anilist.rateLimiter.requests.length,\n          maxRequests: this.services.anilist.rateLimiter.maxRequests,\n          remaining: this.services.anilist.rateLimiter.remaining,\n          utilization: this.services.anilist.getUtilization()\n        },\n        mal: {\n          requests: this.services.mal.rateLimiter.requests.length,\n          maxRequests: this.services.mal.rateLimiter.maxRequests,\n          remaining: this.services.mal.rateLimiter.remaining,\n          utilization: this.services.mal.getUtilization()\n        },\n        simkl: {\n          requests: this.services.simkl.rateLimiter.requests.length,\n          maxRequests: this.services.simkl.rateLimiter.maxRequests,\n          remaining: this.services.simkl.rateLimiter.remaining,\n          utilization: this.services.simkl.getUtilization()\n        },\n        hits: this.metrics.rateLimitHits\n      },\n      concurrency: {\n        active: this.state.concurrentCount,\n        max: this.config.maxConcurrent\n      },\n      services: {\n        anilist: this.services.anilist.metrics,\n        mal: this.services.mal.metrics,\n        simkl: this.services.simkl.getDetailedMetrics()\n      },\n      mal: {\n        lastAuthCheck: new Date(this.services.mal.authState.lastAuthCheck).toISOString(),\n        authFailures: this.services.mal.authState.consecutiveAuthFailures,\n        lastRequest: this.services.mal.authState.lastRequest ? \n          new Date(this.services.mal.authState.lastRequest).toISOString() : 'never'\n      },\n      simkl: {\n        lastAuthCheck: new Date(this.services.simkl.authState.lastAuthCheck).toISOString(),\n        authFailures: this.services.simkl.authState.consecutiveAuthFailures,\n        lastRequest: this.services.simkl.authState.lastRequest ? \n          new Date(this.services.simkl.authState.lastRequest).toISOString() : 'never',\n        authStatus: this.services.simkl.getAuthStatus(),\n        tokenExpiry: this.services.simkl.authState.tokenExpiry ?\n          new Date(this.services.simkl.authState.tokenExpiry).toISOString() : null\n      },\n      loader: {\n        visible: this.loaderState.visible,\n        requestCount: this.loaderState.requestCount\n      }\n    };\n  }\n\n  getNextRequest() {\n    const priorities = ['high', 'normal', 'low'];\n    for (const priority of priorities) {\n      if (this.queues[priority].length > 0) {\n        return this.queues[priority].shift();\n      }\n    }\n    return null;\n  }\n  \n  getTotalQueueSize() {\n    return Object.values(this.queues).reduce((total, queue) => total + queue.length, 0);\n  }\n  \n  getQueueSizes() {\n    const sizes = {};\n    Object.keys(this.queues).forEach(priority => {\n      sizes[priority] = this.queues[priority].length;\n    });\n    return sizes;\n  }\n  \n  getHealthStatus() {\n    const queueSize = this.getTotalQueueSize();\n    const errorRate = this.metrics.requestsFailed / (this.metrics.requestsProcessed + this.metrics.requestsFailed);\n    \n    let status = 'healthy';\n    const malAuthFailures = this.services.mal.authState.consecutiveAuthFailures;\n    const simklAuthFailures = this.services.simkl.authState.consecutiveAuthFailures;\n    \n    if (queueSize > 50 || errorRate > 0.1 || malAuthFailures > 1 || simklAuthFailures > 1) {\n      status = 'degraded';\n    }\n    if (queueSize > 100 || errorRate > 0.25 || \n        malAuthFailures >= this.config.malConfig.maxAuthRetries ||\n        simklAuthFailures >= this.config.simklConfig.maxAuthRetries) {\n      status = 'unhealthy';\n    }\n    \n    return {\n      status,\n      queueSize,\n      errorRate: `${(errorRate * 100).toFixed(2)}%`,\n      activeRequests: this.state.concurrentCount,\n      rateLimitUtilization: {\n        anilist: this.services.anilist.getUtilization(),\n        mal: this.services.mal.getUtilization(),\n        simkl: this.services.simkl.getUtilization()\n      },\n      authStatus: {\n        mal: this.services.mal.getAuthStatus(),\n        simkl: this.services.simkl.getAuthStatus()\n      }\n    };\n  }\n  \n  startBackgroundTasks() {\n    setInterval(() => {\n      this.cleanup();\n    }, 5 * 60 * 1000);\n  }\n  \n  cleanup() {\n    const now = Date.now();\n    \n    Object.values(this.services).forEach(service => {\n      service.rateLimiter.requests = service.rateLimiter.requests.filter(\n        time => now - time < service.rateLimiter.windowMs * 2\n      );\n    });\n    \n    // Cleanup MAL auth state\n    if (now - this.services.mal.authState.lastAuthCheck > this.services.mal.authState.authCheckInterval * 2) {\n      this.services.mal.authState.consecutiveAuthFailures = 0;\n    }\n    \n    // Cleanup Simkl auth state\n    if (now - this.services.simkl.authState.lastAuthCheck > this.services.simkl.authState.authCheckInterval * 2) {\n      this.services.simkl.authState.consecutiveAuthFailures = 0;\n    }\n  }\n  \n  generateRequestId() {\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n  \n  formatDuration(ms) {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    \n    if (hours > 0) return `${hours}h ${minutes % 60}m`;\n    if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\n    return `${seconds}s`;\n  }\n  \n  pause() {\n    this.state.isProcessing = true;\n  }\n  \n  resume() {\n    this.state.isProcessing = false;\n    this.process();\n  }\n  clear(priority = null) {\n    if (priority) {\n      const cleared = this.queues[priority].length;\n      this.queues[priority] = [];\n      this.updateLoaderState();\n      return cleared;\n    } else {\n      let total = 0;\n      Object.keys(this.queues).forEach(p => {\n        total += this.queues[p].length;\n        this.queues[p] = [];\n      });\n      this.updateLoaderState();\n      return total;\n    }\n  }\n  \n  clearMalRequests() {\n    let cleared = 0;\n    Object.keys(this.queues).forEach(priority => {\n      const malRequests = this.queues[priority].filter(req => req.service === 'mal');\n      this.queues[priority] = this.queues[priority].filter(req => req.service !== 'mal');\n      cleared += malRequests.length;\n      \n      malRequests.forEach(req => {\n        req.reject(new Error('MAL requests cleared due to authentication issues'));\n      });\n    });\n    \n    this.updateLoaderState();\n    return cleared;\n  }\n  \n  clearSimklRequests() {\n    let cleared = 0;\n    Object.keys(this.queues).forEach(priority => {\n      const simklRequests = this.queues[priority].filter(req => req.service === 'simkl');\n      this.queues[priority] = this.queues[priority].filter(req => req.service !== 'simkl');\n      cleared += simklRequests.length;\n      \n      simklRequests.forEach(req => {\n        req.reject(new Error('Simkl requests cleared due to authentication issues'));\n      });\n    });\n    \n    this.updateLoaderState();\n    return cleared;\n  }\n  \n  clearRequestsByService(serviceName) {\n    if (!['anilist', 'mal', 'simkl'].includes(serviceName)) {\n      throw new Error(`Unknown service: ${serviceName}`);\n    }\n    \n    let cleared = 0;\n    Object.keys(this.queues).forEach(priority => {\n      const serviceRequests = this.queues[priority].filter(req => req.service === serviceName);\n      this.queues[priority] = this.queues[priority].filter(req => req.service !== serviceName);\n      cleared += serviceRequests.length;\n      \n      serviceRequests.forEach(req => {\n        req.reject(new Error(`${serviceName} requests cleared`));\n      });\n    });\n    \n    this.updateLoaderState();\n    return cleared;\n  }\n  \n  // Get service-specific queue statistics\n  getServiceQueueStats() {\n    const stats = {\n      anilist: { high: 0, normal: 0, low: 0, total: 0 },\n      mal: { high: 0, normal: 0, low: 0, total: 0 },\n      simkl: { high: 0, normal: 0, low: 0, total: 0 }\n    };\n    \n    Object.keys(this.queues).forEach(priority => {\n      this.queues[priority].forEach(req => {\n        const service = req.service || 'anilist';\n        stats[service][priority]++;\n        stats[service].total++;\n      });\n    });\n    \n    return stats;\n  }\n  \n  // Update token expiry for Simkl\n  updateSimklTokenExpiry(expiresIn) {\n    this.services.simkl.updateTokenExpiry(expiresIn);\n  }\n  \n  async destroy() {\n    // Clear debounce timeout\n    if (this.loaderState.debounceTimeout) {\n      clearTimeout(this.loaderState.debounceTimeout);\n    }\n    \n    const activeRequests = Array.from(this.state.activeRequests.values());\n    if (activeRequests.length > 0) {\n      await Promise.allSettled(\n        activeRequests.map(req => \n          new Promise(resolve => {\n            const originalResolve = req.resolve;\n            const originalReject = req.reject;\n            req.resolve = (...args) => { originalResolve(...args); resolve(); };\n            req.reject = (...args) => { originalReject(...args); resolve(); };\n          })\n        )\n      );\n    }\n    \n    this.clear();\n    this.hideGlobalLoader();\n  }\n}\n\nexport { RequestQueue };", "import { Notice, requestUrl } from 'obsidian';\nimport { ZoroError } from '../../core/ZoroError.js';\n\n\nclass AnilistApi {\n  constructor(plugin) {\n    this.plugin = plugin;\n    this.requestQueue = plugin.requestQueue;\n    this.cache = plugin.cache;\n    \n    // Basic configuration - removed enterprise features\n    this.config = {\n      maxRetries: 3,\n      baseRetryDelay: 1000,\n      maxRetryDelay: 10000,\n      requestTimeout: 30000\n    };\n  }\n\n  // =================== CORE REQUEST METHODS ===================\n\n  createCacheKey(config) {\n    const sortedConfig = {};\n    Object.keys(config).sort().forEach(key => {\n      if (key === 'accessToken' || key === 'clientSecret') return;\n      sortedConfig[key] = config[key];\n    });\n    return JSON.stringify(sortedConfig);\n  }\n\n  async fetchAniListData(config) {\n    const requestId = this.generateRequestId();\n    const startTime = performance.now();\n    \n    try {\n      this.validateConfig(config);\n      \n      // Check cache first\n      const cacheKey = this.createCacheKey(config);\n      const cacheType = this.determineCacheType(config);\n      \n      if (!config.nocache) {\n        const cached = this.cache.get(cacheKey, { \n          scope: cacheType, \n          ttl: this.getCacheTTL(config)\n        });\n        \n        if (cached) {\n          this.log('CACHE_HIT', cacheType, requestId, `${(performance.now() - startTime).toFixed(1)}ms`);\n          return cached;\n        }\n      }\n      \n      // Build query and variables\n      const { query, variables } = this.buildQuery(config);\n      \n      // Execute request\n      const result = await this.executeRequestWithRetry({\n        query,\n        variables,\n        config,\n        requestId,\n        maxRetries: this.config.maxRetries\n      });\n      \n      // Cache successful results\n      if (result && !config.nocache) {\n        this.cache.set(cacheKey, result, { scope: cacheType });\n      }\n      \n      const duration = performance.now() - startTime;\n      this.log('REQUEST_SUCCESS', config.type, requestId, `${duration.toFixed(1)}ms`);\n      \n      return result;\n      \n    } catch (error) {\n      const duration = performance.now() - startTime;\n      const classifiedError = this.classifyError(error, config);\n      \n      this.log('REQUEST_FAILED', config.type, requestId, {\n        error: classifiedError.type,\n        message: classifiedError.message,\n        duration: `${duration.toFixed(1)}ms`\n      });\n      \n      throw this.createZoroError(classifiedError);\n    }\n  }\n\n  async executeRequestWithRetry({ query, variables, config, requestId, maxRetries }) {\n    let lastError;\n    \n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        const result = await this.makeRawRequest({\n          query,\n          variables,\n          config,\n          requestId,\n          attempt\n        });\n        \n        if (attempt > 1) {\n          this.log('RETRY_SUCCESS', config.type, requestId, `Attempt ${attempt}/${maxRetries}`);\n        }\n        \n        return result;\n        \n      } catch (error) {\n        lastError = error;\n        \n        if (attempt === maxRetries || !this.isRetryableError(error)) {\n          throw error;\n        }\n        \n        const delay = this.calculateRetryDelay(attempt);\n        this.log('RETRY_ATTEMPT', config.type, requestId, \n          `Attempt ${attempt}/${maxRetries}, retrying in ${delay}ms: ${error.message}`);\n        \n        await this.sleep(delay);\n      }\n    }\n    \n    throw lastError;\n  }\n\n  async makeRawRequest({ query, variables, config, requestId, attempt = 1, skipAuth = false }) {\n    const headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'User-Agent': `Zoro-Plugin/${this.plugin.manifest.version}`,\n      'X-Request-ID': requestId\n    };\n    \n    if (!skipAuth && this.plugin.settings.accessToken) {\n      await this.plugin.auth.ensureValidToken();\n      headers['Authorization'] = `Bearer ${this.plugin.settings.accessToken}`;\n    }\n    \n    const requestBody = JSON.stringify({ query, variables });\n    \n    try {\n      const response = await Promise.race([\n        this.requestQueue.add(() => requestUrl({\n          url: 'https://graphql.anilist.co',\n          method: 'POST',\n          headers,\n          body: requestBody\n        })),\n        this.createTimeoutPromise(this.config.requestTimeout)\n      ]);\n      \n      const result = response.json;\n      this.validateResponse(result);\n      \n      if (result.errors && result.errors.length > 0) {\n        throw this.createGraphQLError(result.errors[0]);\n      }\n      \n      if (!result.data) {\n        throw new Error('AniList returned no data');\n      }\n      \n      return result.data;\n      \n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // =================== UPDATE METHOD ===================\n\n  async updateMediaListEntry(mediaId, updates) {\n    const requestId = this.generateRequestId();\n    const startTime = performance.now();\n    \n    try {\n      this.validateMediaId(mediaId);\n      this.validateUpdates(updates);\n      \n      if (!this.plugin.settings.accessToken || !(await this.plugin.auth.ensureValidToken())) {\n        throw new Error('Authentication required to update entries');\n      }\n\n      const mutation = `\n        mutation ($mediaId: Int, $status: MediaListStatus, $score: Float, $progress: Int) {\n          SaveMediaListEntry(mediaId: $mediaId, status: $status, score: $score, progress: $progress) {\n            id\n            status\n            score\n            progress\n            updatedAt\n            media {\n              id\n              idMal\n              title { romaji english }\n            }\n          }\n        }\n      `;\n      \n      const variables = {\n        mediaId: parseInt(mediaId),\n        ...(updates.status !== undefined && { status: updates.status }),\n        ...(updates.score !== undefined && updates.score !== null && { score: parseFloat(updates.score) }),\n        ...(updates.progress !== undefined && { progress: parseInt(updates.progress) }),\n      };\n      \n      const result = await this.executeRequestWithRetry({\n        query: mutation,\n        variables,\n        config: { type: 'update', mediaId },\n        requestId,\n        maxRetries: 2\n      });\n\n      await this.invalidateRelatedCache(mediaId, updates);\n      \n      const duration = performance.now() - startTime;\n      this.log('UPDATE_SUCCESS', 'mutation', requestId, {\n        mediaId,\n        updates: Object.keys(updates),\n        duration: `${duration.toFixed(1)}ms`\n      });\n      \n      return result.SaveMediaListEntry;\n\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      const classifiedError = this.classifyError(error, { type: 'update', mediaId });\n      \n      this.log('UPDATE_FAILED', 'mutation', requestId, {\n        mediaId,\n        updates: Object.keys(updates),\n        error: classifiedError.type,\n        duration: `${duration.toFixed(1)}ms`\n      });\n      \n      throw this.createZoroError(classifiedError);\n    }\n  }\n\n  // =================== ERROR HANDLING ===================\n\n  classifyError(error, context = {}) {\n    if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n      return { type: 'NETWORK_ERROR', message: error.message, severity: 'error', retryable: true };\n    }\n    \n    if (error.name === 'TimeoutError' || error.message.includes('timeout')) {\n      return { type: 'TIMEOUT', message: error.message, severity: 'warn', retryable: true };\n    }\n    \n    if (error.status === 429 || error.message.includes('rate limit')) {\n      return { type: 'RATE_LIMITED', message: error.message, severity: 'warn', retryable: true };\n    }\n    \n    if (error.status === 401 || error.message.includes('Unauthorized')) {\n      return { type: 'AUTH_ERROR', message: error.message, severity: 'error', retryable: false };\n    }\n    \n    if (error.status >= 500) {\n      return { type: 'SERVER_ERROR', message: error.message, severity: 'error', retryable: true };\n    }\n    \n    if (error.message?.includes('Private') || error.message?.includes('permission')) {\n      return { type: 'PRIVATE_LIST', message: error.message, severity: 'warn', retryable: false };\n    }\n    \n    if (error.status >= 400 && error.status < 500) {\n      return { type: 'CLIENT_ERROR', message: error.message, severity: 'warn', retryable: false };\n    }\n    \n    return { type: 'UNKNOWN_ERROR', message: error.message, severity: 'error', retryable: false };\n  }\n\n  createZoroError(classifiedError) {\n    const errorMessages = {\n      'NETWORK_ERROR': 'Connection issue. Please check your internet connection and try again.',\n      'TIMEOUT': 'Request timed out. Please try again.',\n      'RATE_LIMITED': 'Too many requests. Please wait a moment and try again.',\n      'AUTH_ERROR': 'Authentication expired. Please re-authenticate with AniList.',\n      'SERVER_ERROR': 'AniList servers are experiencing issues. Please try again later.',\n      'PRIVATE_LIST': 'This user\\'s list is private.',\n      'CLIENT_ERROR': 'Invalid request. Please check your input.',\n      'UNKNOWN_ERROR': 'An unexpected error occurred. Please try again.'\n    };\n    \n    const userMessage = errorMessages[classifiedError.type] || errorMessages['UNKNOWN_ERROR'];\n    \n    // Use ZoroError.notify for user feedback and create a proper Error object\n    ZoroError.notify(userMessage, classifiedError.severity);\n    \n    const error = new Error(classifiedError.message);\n    error.type = classifiedError.type;\n    error.severity = classifiedError.severity;\n    error.retryable = classifiedError.retryable;\n    error.userMessage = userMessage;\n    \n    return error;\n  }\n\n  createGraphQLError(graphqlError) {\n    const error = new Error(graphqlError.message);\n    error.type = 'GRAPHQL_ERROR';\n    error.extensions = graphqlError.extensions;\n    error.locations = graphqlError.locations;\n    error.path = graphqlError.path;\n    return error;\n  }\n\n  // =================== VALIDATION & UTILITY METHODS ===================\n\n  validateConfig(config) {\n    if (!config || typeof config !== 'object') {\n      throw new Error('Configuration must be an object');\n    }\n    \n    if (config.type && !['stats', 'single', 'search', 'list'].includes(config.type)) {\n      throw new Error(`Invalid config type: ${config.type}`);\n    }\n    \n    if (config.mediaType && !['ANIME', 'MANGA'].includes(config.mediaType)) {\n      throw new Error(`Invalid media type: ${config.mediaType}`);\n    }\n  }\n\n  validateMediaId(mediaId) {\n    const id = parseInt(mediaId);\n    if (!id || id <= 0) {\n      throw new Error(`Invalid media ID: ${mediaId}`);\n    }\n  }\n\n  validateUpdates(updates) {\n    if (!updates || typeof updates !== 'object') {\n      throw new Error('Updates must be an object');\n    }\n    \n    if (Object.keys(updates).length === 0) {\n      throw new Error('At least one field must be updated');\n    }\n  }\n\n  validateResponse(response) {\n    if (!response || typeof response !== 'object') {\n      throw new Error('Invalid response from AniList');\n    }\n  }\n\n  isRetryableError(error) {\n    return error.retryable !== false && (\n      error.status >= 500 ||\n      error.code === 'ENOTFOUND' ||\n      error.code === 'ECONNREFUSED' ||\n      error.name === 'TimeoutError' ||\n      error.status === 429\n    );\n  }\n\n  calculateRetryDelay(attempt) {\n    const baseDelay = this.config.baseRetryDelay;\n    const maxDelay = this.config.maxRetryDelay;\n    const exponentialDelay = baseDelay * Math.pow(2, attempt - 1);\n    const jitter = Math.random() * 1000;\n    \n    return Math.min(exponentialDelay + jitter, maxDelay);\n  }\n\n  createTimeoutPromise(timeout) {\n    return new Promise((_, reject) => {\n      setTimeout(() => {\n        reject(new Error('Request timeout'));\n      }, timeout);\n    });\n  }\n\n  generateRequestId() {\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // =================== CACHE MANAGEMENT ===================\n\n  determineCacheType(config) {\n    const typeMap = {\n      'stats': 'userData',\n      'single': 'mediaData',\n      'search': 'searchResults',\n      'list': 'userData'\n    };\n    return typeMap[config.type] || 'userData';\n  }\n\n  getCacheTTL(config) {\n    return null; // Use cache's built-in TTL system\n  }\n\n  async invalidateRelatedCache(mediaId, updates) {\n    this.cache.invalidateByMedia(mediaId);\n    \n    if (updates.status) {\n      try {\n        const username = await this.plugin.auth.getAuthenticatedUsername();\n        if (username) {\n          this.cache.invalidateByUser(username);\n        }\n      } catch (error) {\n        // Ignore errors getting username for cache invalidation\n      }\n    }\n  }\n\n  // =================== OAUTH METHOD ===================\n\n  async makeObsidianRequest(code, redirectUri) {\n    const requestId = this.generateRequestId();\n    const startTime = performance.now();\n    \n    try {\n      if (!code || typeof code !== 'string') {\n        throw new Error('Authorization code is required');\n      }\n      \n      if (!redirectUri || typeof redirectUri !== 'string') {\n        throw new Error('Redirect URI is required');\n      }\n\n      const body = new URLSearchParams({\n        grant_type: 'authorization_code',\n        client_id: this.plugin.settings.clientId,\n        client_secret: this.plugin.settings.clientSecret || '',\n        redirect_uri: redirectUri,\n        code: code\n      });\n\n      const headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Accept': 'application/json',\n        'User-Agent': `Zoro-Plugin/${this.plugin.manifest.version}`,\n        'X-Request-ID': requestId\n      };\n\n      const result = await requestUrl({\n        url: 'https://anilist.co/api/v2/oauth/token',\n        method: 'POST',\n        headers,\n        body: body.toString()\n      });\n\n      if (!result || typeof result.json !== 'object') {\n        throw new Error('Invalid response structure from AniList');\n      }\n\n      const duration = performance.now() - startTime;\n      this.log('AUTH_SUCCESS', 'oauth', requestId, `${duration.toFixed(1)}ms`);\n\n      return result.json;\n\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      const classifiedError = this.classifyError(error, { type: 'auth' });\n      \n      this.log('AUTH_FAILED', 'oauth', requestId, {\n        error: classifiedError.type,\n        duration: `${duration.toFixed(1)}ms`\n      });\n\n      throw this.createZoroError(classifiedError);\n    }\n  }\n\n\n  getAniListUrl(mediaId, mediaType = 'ANIME') {\n    try {\n      this.validateMediaId(mediaId);\n      \n      const type = String(mediaType).toUpperCase();\n      const validTypes = ['ANIME', 'MANGA'];\n      const urlType = validTypes.includes(type) ? type.toLowerCase() : 'anime';\n\n      return `https://anilist.co/${urlType}/${mediaId}`;\n    } catch (error) {\n      this.log('URL_GENERATION_FAILED', 'utility', this.generateRequestId(), {\n        mediaId,\n        mediaType,\n        error: error.message\n      });\n      throw error;\n    }\n  }\n\n  // =================== QUERY BUILDERS ===================\n\n  buildQuery(config) {\n    let query, variables;\n    \n    if (config.type === 'stats') {\n      query = this.getUserStatsQuery({\n        mediaType: config.mediaType || 'ANIME',\n        layout: config.layout || 'standard'\n      });\n      variables = { username: config.username };\n    } else if (config.type === 'single') {\n      query = this.getSingleMediaQuery(config.layout);\n      variables = {\n        mediaId: parseInt(config.mediaId),\n        type: config.mediaType\n      };\n    } else if (config.type === 'search') {\n      query = this.getSearchMediaQuery(config.layout);\n      variables = {\n        search: config.search,\n        type: config.mediaType,\n        page: config.page || 1,\n        perPage: Math.min(config.perPage || 10, 50),\n      };\n    } else {\n      query = this.getMediaListQuery(config.layout);\n      variables = {\n        username: config.username,\n        status: config.listType,\n        type: config.mediaType || 'ANIME',\n      };\n    }\n    \n    return { query, variables };\n  }\n  getMediaListQuery(layout = 'card') {\n    const baseFields = `\n      id\n      status\n      score\n      progress\n    `;\n\n    const mediaFields = {\n      compact: `\n        id\n        idMal\n        title {\n          romaji\n        }\n        coverImage {\n          medium\n        }\n      `,\n      card: `\n        id\n        idMal\n        title {\n          romaji\n          english\n          native\n        }\n        coverImage {\n          large\n          medium\n        }\n        format\n        averageScore\n        status\n        genres\n        episodes\n        chapters\n        isFavourite\n      `,\n      full: `\n        id\n        idMal\n        title {\n          romaji\n          english\n          native\n        }\n        coverImage {\n          large\n          medium\n        }\n        episodes\n        chapters\n        genres\n        format\n        averageScore\n        status\n        startDate {\n          year\n          month\n          day\n        }\n        endDate {\n          year\n          month\n          day\n        }\n        isFavourite\n        description(asHtml: false)\n        meanScore\n        popularity\n        favourites\n        studios {\n          nodes {\n            name\n          }\n        }\n      `\n    };\n\n    const fields = mediaFields[layout] || mediaFields.card;\n\n    return `\n      query ($username: String, $status: MediaListStatus, $type: MediaType) {\n        MediaListCollection(userName: $username, status: $status, type: $type) {\n          lists {\n            entries {\n              ${baseFields}\n              media {\n                ${fields}\n              }\n            }\n          }\n        }\n      }\n    `;\n  }\n\n  getSingleMediaQuery(layout = 'card') {\n    const mediaFields = {\n      compact: `\n        id\n        idMal\n        title {\n          romaji\n        }\n        coverImage {\n          medium\n        }\n      `,\n      card: `\n        id\n        idMal\n        title {\n          romaji\n          english\n          native\n        }\n        coverImage {\n          large\n          medium\n        }\n        format\n        averageScore\n        status\n        genres\n        episodes\n        chapters\n        isFavourite\n      `,\n      full: `\n        id\n        idMal\n        title {\n          romaji\n          english\n          native\n        }\n        coverImage {\n          large\n          medium\n        }\n        episodes\n        chapters\n        genres\n        format\n        averageScore\n        status\n        startDate {\n          year\n          month\n          day\n        }\n        endDate {\n          year\n          month\n          day\n        }\n        isFavourite\n        description(asHtml: false)\n        meanScore\n        popularity\n        favourites\n        studios {\n          nodes {\n            name\n          }\n        }\n      `\n    };\n\n    const selectedMediaFields = mediaFields[layout] || mediaFields.card;\n\n    return `\n      query ($mediaId: Int, $type: MediaType) {\n        Media(id: $mediaId, type: $type) {\n          ${selectedMediaFields}\n        }\n      }\n    `;\n  }\n\n  getUserStatsQuery({ \n    mediaType = 'ANIME', \n    layout = 'standard',\n    useViewer = false\n  } = {}) {\n    const typeKey = mediaType.toLowerCase();\n\n    const statFields = {\n      minimal: `\n        count\n        meanScore\n        minutesWatched\n        episodesWatched\n        chaptersRead\n      `,\n      standard: `\n        count\n        meanScore\n        standardDeviation\n        episodesWatched\n        minutesWatched\n        chaptersRead\n        volumesRead\n        scores {\n          score\n          count\n        }\n        statuses {\n          status\n          count\n        }\n        formats {\n          format\n          count\n        }\n        releaseYears {\n          releaseYear\n          count\n        }\n      `,\n      detailed: `\n        count\n        meanScore\n        standardDeviation\n        episodesWatched\n        minutesWatched\n        chaptersRead\n        volumesRead\n        scores {\n          score\n          count\n        }\n        statuses {\n          status\n          count\n        }\n        formats {\n          format\n          count\n        }\n        releaseYears {\n          releaseYear\n          count\n        }\n        startYears {\n          startYear\n          count\n        }\n        genres {\n          genre\n          count\n          meanScore\n          minutesWatched\n        }\n      `\n    };\n\n    const selectedFields = statFields[layout] || statFields.standard;\n    const viewerPrefix = useViewer ? 'Viewer' : `User(name: $username)`;\n\n    return `\n      query ($username: String) {\n        ${viewerPrefix} {\n          id\n          name\n          avatar {\n            large\n            medium\n          }\n          statistics {\n            ${typeKey} {\n              ${selectedFields}\n            }\n          }\n          favourites {\n            ${typeKey} {\n              nodes {\n                id\n                idMal\n                title {\n                  romaji\n                  english\n                }\n                coverImage {\n                  medium\n                  large\n                }\n                meanScore\n                ${mediaType === 'ANIME' ? 'episodes' : 'chapters'}\n                format\n              }\n            }\n          }\n          mediaListOptions {\n            scoreFormat\n          }\n        }\n      }\n    `;\n  }\n\n  getSearchMediaQuery(layout = 'card') {\n    const mediaFields = {\n      compact: `\n        id\n        idMal\n        title {\n          romaji\n        }\n        coverImage {\n          medium\n        }\n      `,\n      card: `\n        id\n        idMal\n        title {\n          romaji\n          english\n          native\n        }\n        coverImage {\n          large\n          medium\n        }\n        format\n        averageScore\n        status\n        genres\n        episodes\n        chapters\n        isFavourite\n      `,\n      full: `\n        id\n        idMal\n        title {\n          romaji\n          english\n          native\n        }\n        coverImage {\n          large\n          medium\n        }\n        episodes\n        chapters\n        genres\n        format\n        averageScore\n        status\n        startDate {\n          year\n          month\n          day\n        }\n        endDate {\n          year\n          month\n          day\n        }\n        isFavourite\n        description(asHtml: false)\n        meanScore\n        popularity\n        favourites\n      `\n    };\n\n    const fields = mediaFields[layout] || mediaFields.card;\n\n    return `\n      query ($search: String, $type: MediaType, $page: Int, $perPage: Int) {\n        Page(page: $page, perPage: $perPage) {\n          pageInfo {\n            total\n            currentPage\n            lastPage\n            hasNextPage\n            perPage\n          }\n          media(search: $search, type: $type) {\n            ${fields}\n          }\n        }\n      }\n    `;\n  }\n\n  // =================== LOGGING ===================\n\n  log(level, category, requestId, data = '') {\n    if (level === 'ERROR') {\n      const timestamp = new Date().toISOString();\n      const logData = typeof data === 'object' ? JSON.stringify(data, null, 2) : data;\n      console.log(`[${timestamp}] [Zoro-API] [${level}] [${category}] [${requestId}] ${logData}`);\n    }\n  }\n}\nexport { AnilistApi };", "import { Notice } from 'obsidian';\n\n\nclass ZoroError {\n  static instance(plugin) {\n    if (!ZoroError._singleton) ZoroError._singleton = new ZoroError(plugin);\n    return ZoroError._singleton;\n  }\n\n  constructor(plugin) {\n    this.plugin = plugin;\n    this.noticeRateLimit = new Map(); // Prevent notification spam\n    this.recoveryStrategies = new Map();\n    this.initRecoveryStrategies();\n  }\n\n  // Main entry point for creating errors with user notifications\n  static notify(message, severity = 'error', duration = null) {\n    const instance = ZoroError.instance();\n    \n    if (!instance.isRateLimited(message)) {\n      const userMessage = instance.getUserMessage(message, severity);\n      const noticeDuration = duration || instance.getNoticeDuration(severity);\n      new Notice(userMessage, noticeDuration);\n    }\n    \n    // Log to console for debugging (developers can check if needed)\n    if (severity === 'error' || severity === 'fatal') {\n      console.error(`[Zoro] ${message}`);\n    }\n    \n    return new Error(message);\n  }\n\n  // Guard function with automatic recovery\n  static async guard(fn, recoveryStrategy = null) {\n    const instance = ZoroError.instance();\n    \n    try {\n      return await fn();\n    } catch (error) {\n      // Try recovery first (silent)\n      if (recoveryStrategy && instance.recoveryStrategies.has(recoveryStrategy)) {\n        try {\n          const result = await instance.recoveryStrategies.get(recoveryStrategy)(error, fn);\n          if (result !== null) return result;\n        } catch (recoveryError) {\n          // Recovery failed, fall through to show user error\n        }\n      }\n      \n      // Show user-friendly error if recovery failed\n      const userMessage = instance.getUserMessage(error.message || String(error), 'error');\n      if (!instance.isRateLimited(error.message)) {\n        new Notice(userMessage, 6000);\n      }\n      \n      throw error;\n    }\n  }\n\n  // Retry mechanism for network/temporary failures\n  static async withRetry(fn, maxRetries = 2) {\n    const instance = ZoroError.instance();\n    \n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await fn();\n      } catch (error) {\n        if (attempt === maxRetries) {\n          // Final attempt failed\n          const message = `Operation failed after ${maxRetries} attempts`;\n          ZoroError.notify(message, 'error');\n          throw error;\n        }\n        \n        // Silent retry with small delay\n        await instance.sleep(1000 * attempt);\n      }\n    }\n  }\n\n  // Initialize simple recovery strategies\n  initRecoveryStrategies() {\n    // Cache fallback for network issues\n    this.recoveryStrategies.set('cache', async (error, originalFn) => {\n      if (this.isNetworkError(error)) {\n        const cachedResult = this.plugin.cache?.getLastKnown?.();\n        if (cachedResult) {\n          ZoroError.notify('Using offline data', 'info', 3000);\n          return cachedResult;\n        }\n      }\n      return null;\n    });\n\n    // Simple retry for temporary failures\n    this.recoveryStrategies.set('retry', async (error, originalFn) => {\n      if (this.isTemporaryError(error)) {\n        await this.sleep(1500);\n        return await originalFn();\n      }\n      return null;\n    });\n\n    // Graceful degradation\n    this.recoveryStrategies.set('degrade', async (error) => {\n      return { error: true, message: 'Limited functionality available' };\n    });\n  }\n\n  // Convert technical errors to user-friendly messages\n  getUserMessage(message, severity) {\n    const lowerMessage = message.toLowerCase();\n    \n    // Network issues\n    if (lowerMessage.includes('network') || lowerMessage.includes('fetch') || \n        lowerMessage.includes('connection') || lowerMessage.includes('timeout')) {\n      return '\uD83C\uDF10 Connection issue. Check your internet and try again.';\n    }\n    \n    // Authentication issues\n    if (lowerMessage.includes('auth') || lowerMessage.includes('unauthorized') || \n        lowerMessage.includes('forbidden')) {\n      return '\uD83D\uDD11 Login required. Please check your credentials.';\n    }\n    \n    // Rate limiting\n    if (lowerMessage.includes('rate') || lowerMessage.includes('too many')) {\n      return '\uD83D\uDEA6 Please wait a moment before trying again.';\n    }\n    \n    // Cache issues\n    if (lowerMessage.includes('cache')) {\n      return '\uD83D\uDCBE Data refresh needed. Please try again.';\n    }\n    \n    // Server issues\n    if (lowerMessage.includes('server') || lowerMessage.includes('503') || \n        lowerMessage.includes('502') || lowerMessage.includes('500')) {\n      return '\uD83D\uDD27 Service temporarily unavailable. Please try again later.';\n    }\n    \n    // Default messages based on severity\n    const prefixes = {\n      fatal: '\uD83E\uDDE8 Critical error occurred',\n      error: '\u274C Something went wrong',\n      warn: '\u26A0\uFE0F Minor issue detected',\n      info: '\u2139\uFE0F Information'\n    };\n    \n    return `${prefixes[severity] || prefixes.error}. Please try again.`;\n  }\n\n  // Prevent notification spam\n  isRateLimited(message) {\n    const now = Date.now();\n    const key = this.getMessageKey(message);\n    const lastShown = this.noticeRateLimit.get(key) || 0;\n    \n    if (now - lastShown < 5000) { // 5 second cooldown\n      return true;\n    }\n    \n    this.noticeRateLimit.set(key, now);\n    \n    // Cleanup old entries periodically\n    if (this.noticeRateLimit.size > 50) {\n      this.cleanupRateLimit();\n    }\n    \n    return false;\n  }\n\n  // Get notice duration based on severity\n  getNoticeDuration(severity) {\n    const durations = {\n      fatal: 10000,\n      error: 6000,\n      warn: 4000,\n      info: 3000\n    };\n    return durations[severity] || 5000;\n  }\n\n  // Helper methods\n  isNetworkError(error) {\n    const message = error.message?.toLowerCase() || '';\n    return message.includes('network') || message.includes('fetch') || \n           message.includes('timeout') || message.includes('connection');\n  }\n\n  isTemporaryError(error) {\n    const message = error.message?.toLowerCase() || '';\n    return message.includes('temporary') || message.includes('retry') ||\n           message.includes('503') || message.includes('502');\n  }\n\n  getMessageKey(message) {\n    // Create a simple key for rate limiting (remove numbers and special chars)\n    return message.replace(/\\d+/g, '').replace(/[^\\w\\s]/g, '').trim().toLowerCase();\n  }\n\n  cleanupRateLimit() {\n    const now = Date.now();\n    const cutoff = now - 60000; // 1 minute ago\n    \n    for (const [key, timestamp] of this.noticeRateLimit.entries()) {\n      if (timestamp < cutoff) {\n        this.noticeRateLimit.delete(key);\n      }\n    }\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // Cleanup when plugin unloads\n  destroy() {\n    this.noticeRateLimit.clear();\n    this.recoveryStrategies.clear();\n  }\n}\n\nexport { ZoroError };", "import { requestUrl } from 'obsidian';\nimport { ZoroError } from '../../core/ZoroError.js';\n\nclass MalApi {\n  constructor(plugin) {\n    this.plugin = plugin;\n    this.requestQueue = plugin.requestQueue; // Use the RequestQueue instance\n    this.cache = plugin.cache;\n    \n    this.baseUrl = 'https://api.myanimelist.net/v2';\n    this.tokenUrl = 'https://myanimelist.net/v1/oauth2/token';\n    \n    // Basic configuration - request handling delegated to RequestQueue\n    this.config = {\n      requestTimeout: 30000\n    };\n    \n    // Comprehensive field sets for different layouts\n    this.fieldSets = {\n      compact: 'id,title,main_picture,list_status{status,score,num_episodes_watched,num_chapters_read}',\n      card: 'id,title,main_picture,media_type,status,genres,num_episodes,num_chapters,mean,start_date,end_date,list_status{status,score,num_episodes_watched,num_chapters_read,num_volumes_read,is_rewatching,is_rereading,updated_at}',\n      full: 'id,title,main_picture,alternative_titles,start_date,end_date,synopsis,mean,rank,popularity,num_list_users,num_scoring_users,nsfw,created_at,updated_at,media_type,status,genres,list_status{status,score,num_episodes_watched,num_chapters_read,num_volumes_read,is_rewatching,is_rereading,updated_at},num_episodes,num_chapters,start_season,broadcast,source,average_episode_duration,rating,pictures,background,related_anime,related_manga,recommendations,studios,statistics'\n    };\n\n    this.searchFieldSets = {\n      compact: 'id,title,main_picture',\n      card: 'id,title,main_picture,media_type,status,genres,num_episodes,num_chapters,mean,start_date,end_date',\n      full: 'id,title,main_picture,alternative_titles,start_date,end_date,synopsis,mean,rank,popularity,num_list_users,num_scoring_users,nsfw,created_at,updated_at,media_type,status,genres,num_episodes,num_chapters,start_season,broadcast,source,average_episode_duration,rating,pictures,background,related_anime,related_manga,recommendations,studios,statistics'\n    };\n\n    // Status mappings\n    this.malToAniListStatus = {\n      'watching': 'CURRENT', 'reading': 'CURRENT', 'completed': 'COMPLETED',\n      'on_hold': 'PAUSED', 'dropped': 'DROPPED', \n      'plan_to_watch': 'PLANNING', 'plan_to_read': 'PLANNING'\n    };\n\n    this.aniListToMalStatus = {\n      'CURRENT': 'watching', 'COMPLETED': 'completed', 'PAUSED': 'on_hold',\n      'DROPPED': 'dropped', 'PLANNING': 'plan_to_watch'\n    };\n  }\n\n  // =================== CORE REQUEST METHODS ===================\n\n  createCacheKey(config) {\n    const sortedConfig = {};\n    Object.keys(config).sort().forEach(key => {\n      if (key === 'malAccessToken' || key === 'malClientSecret') return;\n      sortedConfig[key] = config[key];\n    });\n    return JSON.stringify(sortedConfig);\n  }\n\n  async fetchMALData(config) {\n    const requestId = this.generateRequestId();\n    const startTime = performance.now();\n    \n    try {\n      this.validateConfig(config);\n      \n      // Check cache first\n      const cacheKey = this.createCacheKey(config);\n      const cacheType = this.determineCacheType(config);\n      \n      if (!config.nocache) {\n        const cached = this.cache.get(cacheKey, { \n          scope: cacheType, \n          ttl: this.getCacheTTL(config)\n        });\n        \n        if (cached) {\n          this.log('CACHE_HIT', cacheType, requestId, `${(performance.now() - startTime).toFixed(1)}ms`);\n          return cached;\n        }\n      }\n      \n      // Build request parameters\n      const requestParams = this.buildRequestParams(config, requestId);\n      \n      // Execute request using RequestQueue with MAL service\n      const result = await this.requestQueue.add(() => this.makeRawRequest(requestParams), {\n        priority: config.priority || 'normal',\n        timeout: this.config.requestTimeout,\n        retries: 3,\n        metadata: { \n          type: config.type, \n          mediaType: config.mediaType,\n          requestId \n        },\n        service: 'mal'\n      });\n      \n      // Transform response to AniList-compatible format\n      const transformedData = this.transformResponse(result, config);\n      \n      // Handle stats enrichment if needed\n      if (config.type === 'stats' && transformedData?.User) {\n        await this.attachMALDistributions(transformedData.User);\n      }\n      \n      // Cache successful results\n      if (transformedData && !config.nocache) {\n        this.cache.set(cacheKey, transformedData, { scope: cacheType });\n      }\n      \n      const duration = performance.now() - startTime;\n      this.log('REQUEST_SUCCESS', config.type, requestId, `${duration.toFixed(1)}ms`);\n      \n      return transformedData;\n      \n    } catch (error) {\n      const duration = performance.now() - startTime;\n      const classifiedError = this.classifyError(error, config);\n      \n      this.log('REQUEST_FAILED', config.type, requestId, {\n        error: classifiedError.type,\n        message: classifiedError.message,\n        duration: `${duration.toFixed(1)}ms`\n      });\n      \n      throw this.createZoroError(classifiedError);\n    }\n  }\n\n  async makeRawRequest(requestParams) {\n    const headers = {\n      'Accept': 'application/json',\n      'User-Agent': `Zoro-Plugin/${this.plugin.manifest.version}`,\n      'X-Request-ID': requestParams.requestId,\n      ...requestParams.headers\n    };\n\n    // Always include MAL client id for public endpoints\n    if (this.plugin.settings.malClientId) {\n      headers['X-MAL-CLIENT-ID'] = this.plugin.settings.malClientId;\n    }\n\n    // Add authentication header only for non-search requests\n    if (this.requiresAuth(requestParams.metadata?.type)) {\n      if (this.plugin.settings.malAccessToken) {\n        headers['Authorization'] = `Bearer ${this.plugin.settings.malAccessToken}`;\n      }\n    }\n\n    const response = await requestUrl({\n      url: requestParams.url,\n      method: requestParams.method || 'GET',\n      headers,\n      body: requestParams.body\n    });\n\n    this.validateResponse(response);\n    \n    // Handle rate limiting\n    if (response.status === 429) {\n      const error = new Error('Rate limit exceeded');\n      error.status = 429;\n      error.type = 'RATE_LIMITED';\n      error.retryable = true;\n      throw error;\n    }\n    \n    if (response.status >= 400) {\n      const error = new Error(`HTTP ${response.status}: ${response.text || 'Unknown error'}`);\n      error.status = response.status;\n      error.type = 'HTTP_ERROR';\n      error.retryable = response.status >= 500;\n      throw error;\n    }\n    \n    const result = response.json;\n    \n    if (result?.error) {\n      const error = new Error(result.message || 'MAL API error');\n      error.type = 'API_ERROR';\n      error.originalError = result.error;\n      error.retryable = false;\n      throw error;\n    }\n    \n    return result;\n  }\n\n  // =================== UPDATE METHOD ===================\n\n  async updateMediaListEntry(mediaId, updates) {\n    const requestId = this.generateRequestId();\n    const startTime = performance.now();\n    \n    try {\n      this.validateMediaId(mediaId);\n      this.validateUpdates(updates);\n      \n      if (!this.plugin.settings.malAccessToken) {\n        throw new Error('Authentication required to update entries');\n      }\n\n      const mediaType = await this.getMediaType(mediaId);\n      const endpoint = mediaType === 'anime' ? 'anime' : 'manga';\n      const body = this.buildUpdateBody(updates, mediaType);\n      \n      const requestParams = {\n        url: `${this.baseUrl}/${endpoint}/${mediaId}/my_list_status`,\n        method: 'PUT',\n        body: body.toString(),\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        requestId,\n        metadata: { type: 'update', mediaId }\n      };\n\n      const result = await this.requestQueue.add(() => this.makeRawRequest(requestParams), {\n        priority: 'high',\n        timeout: this.config.requestTimeout,\n        retries: 2,\n        metadata: { \n          type: 'update', \n          mediaId,\n          requestId \n        },\n        service: 'mal'\n      });\n\n      // Invalidate related cache\n      await this.invalidateRelatedCache(mediaId, updates);\n      \n      const duration = performance.now() - startTime;\n      this.log('UPDATE_SUCCESS', 'mutation', requestId, {\n        mediaId,\n        updates: Object.keys(updates),\n        duration: `${duration.toFixed(1)}ms`\n      });\n      \n      return this.transformUpdateResponse(result, updates, mediaType);\n\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      const classifiedError = this.classifyError(error, { type: 'update', mediaId });\n      \n      this.log('UPDATE_FAILED', 'mutation', requestId, {\n        mediaId,\n        updates: Object.keys(updates),\n        error: classifiedError.type,\n        duration: `${duration.toFixed(1)}ms`\n      });\n      \n      throw this.createZoroError(classifiedError);\n    }\n  }\n\n  buildUpdateBody(updates, mediaType) {\n    const body = new URLSearchParams();\n    \n    // Set rewatching/rereading to false by default\n    if (mediaType === 'anime') {\n      body.append('is_rewatching', 'false');\n    } else {\n      body.append('is_rereading', 'false');\n    }\n    \n    if (updates.status !== undefined && updates.status !== null) {\n      const malStatus = this.mapAniListStatusToMAL(updates.status, mediaType);\n      if (malStatus) {\n        body.append('status', malStatus);\n      }\n    }\n    \n    if (updates.score !== undefined && updates.score !== null) {\n      const score = Math.max(0, Math.min(10, Math.round(updates.score)));\n      body.append('score', score.toString());\n    }\n    \n    if (updates.progress !== undefined && updates.progress !== null) {\n      const progress = Math.max(0, parseInt(updates.progress) || 0);\n      const progressField = mediaType === 'anime' ? 'num_watched_episodes' : 'num_chapters_read';\n      body.append(progressField, progress.toString());\n    }\n\n    if (body.toString().length === 0) {\n      throw new Error('No valid updates provided');\n    }\n\n    return body;\n  }\n\n  transformUpdateResponse(malResponse, originalUpdates, mediaType) {\n    return {\n      id: malResponse.id || null,\n      status: malResponse.status ? \n        this.mapMALStatusToAniList(malResponse.status, mediaType) : \n        originalUpdates.status,\n      score: malResponse.score !== undefined ? \n        malResponse.score : \n        (originalUpdates.score || 0),\n      progress: mediaType === 'anime' \n        ? (malResponse.num_episodes_watched !== undefined ? \n           malResponse.num_episodes_watched : \n           (originalUpdates.progress || 0))\n        : (malResponse.num_chapters_read !== undefined ? \n           malResponse.num_chapters_read : \n           (originalUpdates.progress || 0)),\n      media: {\n        id: malResponse.id || null,\n        idMal: malResponse.id || null,\n        title: { romaji: malResponse.title || 'Unknown Title' }\n      }\n    };\n  }\n\n  // =================== ERROR HANDLING ===================\n\n  classifyError(error, context = {}) {\n    if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n      return { type: 'NETWORK_ERROR', message: error.message, severity: 'error', retryable: true };\n    }\n    \n    if (error.name === 'TimeoutError' || error.message.includes('timeout')) {\n      return { type: 'TIMEOUT', message: error.message, severity: 'warn', retryable: true };\n    }\n    \n    if (error.status === 429 || error.message.includes('rate limit')) {\n      return { type: 'RATE_LIMITED', message: error.message, severity: 'warn', retryable: true };\n    }\n    \n    if (error.status === 401 || error.message.includes('Unauthorized') || error.message.includes('auth')) {\n      return { type: 'AUTH_ERROR', message: error.message, severity: 'error', retryable: false };\n    }\n    \n    if (error.status >= 500) {\n      return { type: 'SERVER_ERROR', message: error.message, severity: 'error', retryable: true };\n    }\n    \n    if (error.message?.includes('Private') || error.message?.includes('permission')) {\n      return { type: 'PRIVATE_LIST', message: error.message, severity: 'warn', retryable: false };\n    }\n    \n    if (error.status >= 400 && error.status < 500) {\n      return { type: 'CLIENT_ERROR', message: error.message, severity: 'warn', retryable: false };\n    }\n    \n    return { type: 'UNKNOWN_ERROR', message: error.message, severity: 'error', retryable: false };\n  }\n\n  createZoroError(classifiedError) {\n    const errorMessages = {\n      'NETWORK_ERROR': 'Connection issue. Please check your internet connection and try again.',\n      'TIMEOUT': 'Request timed out. Please try again.',\n      'RATE_LIMITED': 'Too many requests. Please wait a moment and try again.',\n      'AUTH_ERROR': 'Authentication expired. Please re-authenticate with MAL.',\n      'SERVER_ERROR': 'MAL servers are experiencing issues. Please try again later.',\n      'PRIVATE_LIST': 'This user\\'s list is private.',\n      'CLIENT_ERROR': 'Invalid request. Please check your input.',\n      'UNKNOWN_ERROR': 'An unexpected error occurred. Please try again.'\n    };\n    \n    const userMessage = errorMessages[classifiedError.type] || errorMessages['UNKNOWN_ERROR'];\n    \n    // Use ZoroError.notify for user feedback and create a proper Error object\n    ZoroError.notify(userMessage, classifiedError.severity);\n    \n    const error = new Error(classifiedError.message);\n    error.type = classifiedError.type;\n    error.severity = classifiedError.severity;\n    error.retryable = classifiedError.retryable;\n    error.userMessage = userMessage;\n    \n    return error;\n  }\n\n  // =================== VALIDATION & UTILITY METHODS ===================\n\n  validateConfig(config) {\n    if (!config || typeof config !== 'object') {\n      throw new Error('Configuration must be an object');\n    }\n    \n    if (config.type && !['stats', 'single', 'search', 'list', 'item'].includes(config.type)) {\n      throw new Error(`Invalid config type: ${config.type}`);\n    }\n    \n    if (config.mediaType && !['ANIME', 'MANGA'].includes(config.mediaType)) {\n      throw new Error(`Invalid media type: ${config.mediaType}`);\n    }\n    \n    if (config.page && (config.page < 1 || config.page > 1000)) {\n      throw new Error(`Invalid page: ${config.page}`);\n    }\n  }\n\n  validateMediaId(mediaId) {\n    const id = parseInt(mediaId);\n    if (!id || id <= 0) {\n      throw new Error(`Invalid media ID: ${mediaId}`);\n    }\n  }\n\n  validateUpdates(updates) {\n    if (!updates || typeof updates !== 'object') {\n      throw new Error('Updates must be an object');\n    }\n    \n    if (Object.keys(updates).length === 0) {\n      throw new Error('At least one field must be updated');\n    }\n  }\n\n  validateResponse(response) {\n    if (!response || typeof response !== 'object') {\n      throw new Error('Invalid response from MAL');\n    }\n  }\n\n  generateRequestId() {\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // =================== CACHE MANAGEMENT ===================\n\n  determineCacheType(config) {\n    const typeMap = {\n      'stats': 'userData',\n      'single': 'mediaData',\n      'item': 'mediaData',\n      'search': 'searchResults',\n      'list': 'userData'\n    };\n    return typeMap[config.type] || 'userData';\n  }\n\n  getCacheTTL(config) {\n    return null; // Use cache's built-in TTL system\n  }\n\n  async invalidateRelatedCache(mediaId, updates) {\n    this.cache.invalidateByMedia(mediaId);\n    \n    if (updates.status) {\n      try {\n        const username = await this.getAuthenticatedUsername();\n        if (username) {\n          this.cache.invalidateByUser(username);\n        }\n      } catch (error) {\n        // Ignore errors getting username for cache invalidation\n      }\n    }\n  }\n\n  // =================== OAUTH METHOD ===================\n\n  async makeObsidianRequest(code, redirectUri) {\n    const requestId = this.generateRequestId();\n    const startTime = performance.now();\n    \n    try {\n      if (!code || typeof code !== 'string') {\n        throw new Error('Authorization code is required');\n      }\n      \n      if (!redirectUri || typeof redirectUri !== 'string') {\n        throw new Error('Redirect URI is required');\n      }\n\n      const body = new URLSearchParams({\n        grant_type: 'authorization_code',\n        client_id: this.plugin.settings.malClientId,\n        client_secret: this.plugin.settings.malClientSecret || '',\n        redirect_uri: redirectUri,\n        code: code,\n        code_verifier: this.plugin.settings.malCodeVerifier || ''\n      });\n\n      const requestParams = {\n        url: this.tokenUrl,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Accept': 'application/json'\n        },\n        body: body.toString(),\n        requestId,\n        metadata: { type: 'auth' }\n      };\n\n      const result = await this.requestQueue.add(() => this.makeRawRequest(requestParams), {\n        priority: 'high',\n        timeout: this.config.requestTimeout,\n        retries: 2,\n        metadata: { \n          type: 'auth',\n          requestId \n        },\n        service: 'mal'\n      });\n\n      if (!result || typeof result !== 'object') {\n        throw new Error('Invalid response structure from MAL');\n      }\n\n      const duration = performance.now() - startTime;\n      this.log('AUTH_SUCCESS', 'oauth', requestId, `${duration.toFixed(1)}ms`);\n\n      return result;\n\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      const classifiedError = this.classifyError(error, { type: 'auth' });\n      \n      this.log('AUTH_FAILED', 'oauth', requestId, {\n        error: classifiedError.type,\n        duration: `${duration.toFixed(1)}ms`\n      });\n\n      throw this.createZoroError(classifiedError);\n    }\n  }\n\n  getMALUrl(mediaId, mediaType = 'ANIME') {\n    try {\n      this.validateMediaId(mediaId);\n      \n      const type = String(mediaType).toUpperCase();\n      const urlType = type === 'MANGA' ? 'manga' : 'anime';\n\n      return `https://myanimelist.net/${urlType}/${mediaId}`;\n    } catch (error) {\n      this.log('URL_GENERATION_FAILED', 'utility', this.generateRequestId(), {\n        mediaId,\n        mediaType,\n        error: error.message\n      });\n      throw error;\n    }\n  }\n\n  // =================== REQUEST BUILDERS ===================\n\n  buildRequestParams(config, requestId) {\n    const url = this.buildEndpointUrl(config);\n    const params = this.buildQueryParams(config);\n    \n    return {\n      url: this.buildFullUrl(url, params),\n      method: 'GET',\n      headers: this.getBaseHeaders(requestId),\n      requestId,\n      metadata: { type: config.type, mediaType: config.mediaType }\n    };\n  }\n\n  buildEndpointUrl(config) {\n    switch (config.type) {\n      case 'stats':\n        return `${this.baseUrl}/users/@me`;\n      case 'single':\n      case 'list':\n        const mediaType = config.mediaType === 'ANIME' ? 'anime' : 'manga';\n        return `${this.baseUrl}/users/@me/${mediaType}list`;\n      case 'search':\n        // Use proper MAL search endpoints\n        if (config.mediaType === 'ANIME') {\n          return `${this.baseUrl}/anime`; // GET /anime?q=...&limit=...\n        } else {\n          return `${this.baseUrl}/manga`; // GET /manga?q=...&limit=...\n        }\n      case 'item':\n        const itemType = config.mediaType === 'ANIME' ? 'anime' : 'manga';\n        return `${this.baseUrl}/${itemType}/${parseInt(config.mediaId)}`;\n      default:\n        throw new Error(`Unknown type: ${config.type}`);\n    }\n  }\n\n  buildQueryParams(config) {\n    const params = {};\n    \n    switch (config.type) {\n      case 'single':\n      case 'list':\n        params.fields = this.getFieldsForLayout(config.layout || 'card', false);\n        params.limit = config.limit || 1000;\n        \n        if (config.listType && config.listType !== 'ALL') {\n          const malStatus = this.mapAniListStatusToMAL(config.listType, config.mediaType?.toLowerCase());\n          if (malStatus) {\n            params.status = malStatus;\n          }\n        }\n        params.sort = 'list_score';\n        break;\n        \n      case 'search':\n        params.q = (config.search || config.query || '').trim();\n        params.limit = config.perPage || 25;\n        // MAL search does not support offset param on v2 search; keep limit only\n        // fields are not accepted on search endpoints\n        break;\n      \n      case 'item':\n        params.fields = this.getFieldsForLayout(config.layout || 'card', true);\n        break;\n        \n      case 'stats':\n        params.fields = ['id', 'name', 'picture', 'anime_statistics', 'manga_statistics'].join(',');\n        break;\n    }\n    \n    return params;\n  }\n\n  buildFullUrl(baseUrl, params) {\n    if (!params || Object.keys(params).length === 0) return baseUrl;\n    const queryString = new URLSearchParams(params).toString();\n    return `${baseUrl}?${queryString}`;\n  }\n\n  getBaseHeaders(requestId) {\n    return {\n      'Accept': 'application/json',\n      'User-Agent': `Zoro-Plugin/${this.plugin.manifest.version}`,\n      'X-Request-ID': requestId\n    };\n  }\n\n  getFieldsForLayout(layout = 'card', isSearch = false) {\n    const fieldSet = isSearch ? this.searchFieldSets : this.fieldSets;\n    return fieldSet[layout] || fieldSet.card;\n  }\n\n  // =================== RESPONSE TRANSFORMERS ===================\n\n  transformResponse(data, config) {\n    switch (config.type) {\n      case 'search':\n        return { Page: { media: data.data?.map(item => this.transformMedia(item)) || [] } };\n      case 'single':\n        return { MediaList: null };\n      case 'item':\n        return { Media: this.transformMedia(data) };\n      case 'stats':\n        return { User: this.transformUser(data) };\n      default:\n        return {\n          MediaListCollection: {\n            lists: [{ \n              entries: data.data?.map(item => this.transformListEntry(item, config)) || [] \n            }]\n          }\n        };\n    }\n  }\n\n  transformListEntry(malEntry, config = {}) {\n    const media = malEntry.node || malEntry;\n    const listStatus = malEntry.list_status;\n    const mediaType = media?.media_type || 'tv';\n    \n    let status = null;\n    let score = 0;\n    let progress = 0;\n    let entryId = null;\n\n    if (listStatus) {\n      status = this.mapMALStatusToAniList(listStatus.status, mediaType);\n      score = listStatus.score || 0;\n      \n      if (mediaType === 'manga' || mediaType === 'novel' || mediaType === 'manhwa') {\n        progress = listStatus.num_chapters_read || 0;\n      } else {\n        progress = listStatus.num_episodes_watched || 0;\n      }\n      \n      entryId = listStatus.id || null;\n    } else if (config.listType) {\n      status = config.listType;\n      score = 0;\n      progress = 0;\n      entryId = null;\n    }\n\n    return {\n      id: entryId,\n      status: status,\n      score: score,\n      progress: progress,\n      chaptersRead: listStatus?.num_chapters_read ?? null,\n      volumesRead: listStatus?.num_volumes_read ?? null,\n      media: this.transformMedia(malEntry)\n    };\n  }\n\n  transformMedia(malMedia) {\n    const media = malMedia.node || malMedia;\n    \n    return {\n      id: media.id,\n      idMal: media.id,\n      title: {\n        romaji: media.title || 'Unknown Title',\n        english: media.alternative_titles?.en || media.title || 'Unknown Title',\n        native: media.alternative_titles?.ja || media.title || 'Unknown Title'\n      },\n      coverImage: {\n        large: media.main_picture?.large || media.main_picture?.medium || null,\n        medium: media.main_picture?.medium || media.main_picture?.large || null\n      },\n      format: media.media_type?.toUpperCase() || null,\n      averageScore: media.mean ? Math.round(media.mean * 10) : null,\n      status: media.status?.toUpperCase()?.replace('_', '_') || null,\n      genres: media.genres?.map(g => g.name) || [],\n      episodes: media.num_episodes || null,\n      chapters: media.num_chapters || null,\n      isFavourite: false,\n      startDate: this.parseDate(media.start_date),\n      endDate: this.parseDate(media.end_date),\n      description: media.synopsis || null,\n      meanScore: media.mean ? Math.round(media.mean * 10) : null,\n      popularity: media.popularity || null,\n      favourites: media.num_list_users || null,\n      studios: media.studios ? { nodes: media.studios.map(s => ({ name: s.name })) } : null\n    };\n  }\n  transformUser(malUser) {\n    const animeStats = malUser?.anime_statistics || {};\n    const mangaStats = malUser?.manga_statistics || {};\n\n    const countAnime = animeStats.num_items || 0;\n    const countManga = mangaStats.num_items || 0;\n\n    const minutesWatched = typeof animeStats.num_days_watched === 'number'\n      ? Math.round(animeStats.num_days_watched * 24 * 60)\n      : 0;\n      \n    return {\n      id: malUser?.id || null,\n      name: malUser?.name || 'Unknown User',\n      avatar: {\n        large: malUser?.picture || null,\n        medium: malUser?.picture || null\n      },\n      mediaListOptions: {\n        scoreFormat: 'POINT_10'\n      },\n      statistics: {\n        anime: {\n          count: countAnime,\n          meanScore: typeof animeStats.mean_score === 'number' ? Math.round(animeStats.mean_score * 10) : 0,\n          standardDeviation: 0,\n          episodesWatched: animeStats.num_episodes || 0,\n          minutesWatched: minutesWatched,\n          statuses: [],\n          scores: [],\n          formats: [],\n          releaseYears: [],\n          genres: []\n        },\n        manga: {\n          count: countManga,\n          meanScore: typeof mangaStats.mean_score === 'number' ? Math.round(mangaStats.mean_score * 10) : 0,\n          standardDeviation: 0,\n          chaptersRead: mangaStats.num_chapters || 0,\n          volumesRead: mangaStats.num_volumes || 0,\n          statuses: [],\n          scores: [],\n          formats: [],\n          releaseYears: [],\n          genres: []\n        }\n      },\n      favourites: {\n        anime: { nodes: [] },\n        manga: { nodes: [] }\n      }\n    };\n  }\n\n  parseDate(dateString) {\n    if (!dateString) return null;\n    \n    try {\n      const date = new Date(dateString);\n      if (isNaN(date.getTime())) return null;\n      \n      return {\n        year: date.getFullYear(),\n        month: date.getMonth() + 1,\n        day: date.getDate()\n      };\n    } catch (error) {\n      return null;\n    }\n  }\n\n  // =================== STATUS MAPPING ===================\n\n  mapAniListStatusToMAL(aniListStatus, mediaType = 'anime') {\n    if (!aniListStatus) return null;\n    \n    const isAnime = mediaType === 'anime' || mediaType === 'tv' || mediaType === 'movie' || \n                   mediaType === 'special' || mediaType === 'ova' || mediaType === 'ona';\n    \n    const statusMap = {\n      'CURRENT': isAnime ? 'watching' : 'reading',\n      'COMPLETED': 'completed',\n      'PAUSED': 'on_hold',\n      'DROPPED': 'dropped',\n      'PLANNING': isAnime ? 'plan_to_watch' : 'plan_to_read',\n      'REPEATING': isAnime ? 'watching' : 'reading'\n    };\n    \n    return statusMap[aniListStatus] || null;\n  }\n\n  mapMALStatusToAniList(malStatus, mediaType = 'anime') {\n    if (!malStatus) return null;\n    \n    const statusMap = {\n      'watching': 'CURRENT',\n      'reading': 'CURRENT', \n      'completed': 'COMPLETED',\n      'on_hold': 'PAUSED',\n      'dropped': 'DROPPED',\n      'plan_to_watch': 'PLANNING',\n      'plan_to_read': 'PLANNING'\n    };\n    \n    return statusMap[malStatus.toLowerCase()] || null;\n  }\n\n  // =================== AUTHENTICATION ===================\n\n  async getAuthenticatedUsername() {\n    try {\n      if (!this.plugin.settings.malAccessToken) return null;\n      \n      const requestParams = {\n        url: `${this.baseUrl}/users/@me?fields=id,name`,\n        method: 'GET',\n        requestId: this.generateRequestId(),\n        metadata: { type: 'user_info' }\n      };\n      \n      const result = await this.requestQueue.add(() => this.makeRawRequest(requestParams), {\n        priority: 'normal',\n        timeout: this.config.requestTimeout,\n        retries: 1,\n        metadata: { \n          type: 'user_info',\n          nocache: true \n        },\n        service: 'mal'\n      });\n      \n      return result?.name || null;\n      \n    } catch (error) {\n      console.warn('[MAL] getAuthenticatedUsername failed:', error.message);\n      return null;\n    }\n  }\n\n  requiresAuth(requestType) {\n    return requestType !== 'search';\n  }\n\n  // =================== UTILITY METHODS ===================\n\n  async getMediaType(mediaId) {\n    const types = ['anime', 'manga'];\n    \n    for (const type of types) {\n      try {\n        const requestParams = {\n          url: `${this.baseUrl}/${type}/${mediaId}?fields=id`,\n          method: 'GET',\n          requestId: this.generateRequestId(),\n          metadata: { type: 'media_type_check' }\n        };\n        \n        const response = await this.requestQueue.add(() => this.makeRawRequest(requestParams), {\n          priority: 'low',\n          timeout: this.config.requestTimeout,\n          retries: 1,\n          metadata: { \n            type: 'media_type_check',\n            nocache: true \n          },\n          service: 'mal'\n        });\n        \n        if (response && !response.error) return type;\n      } catch (error) {\n        continue;\n      }\n    }\n    return 'anime';\n  }\n\n  // =================== ENHANCED FEATURES ===================\n\n  async attachMALDistributions(user) {\n    try {\n      const [animeEntries, mangaEntries] = await Promise.all([\n        this.fetchUserListEntries('ANIME'),\n        this.fetchUserListEntries('MANGA')\n      ]);\n\n      const animeAgg = this.aggregateDistributionsFromEntries(animeEntries, 'anime');\n      const mangaAgg = this.aggregateDistributionsFromEntries(mangaEntries, 'manga');\n\n      if (user?.statistics?.anime) {\n        Object.assign(user.statistics.anime, animeAgg);\n      }\n      if (user?.statistics?.manga) {\n        Object.assign(user.statistics.manga, mangaAgg);\n      }\n      \n      this.applyStatsFallbacks(animeEntries, user?.statistics?.anime, 'anime');\n      this.applyStatsFallbacks(mangaEntries, user?.statistics?.manga, 'manga');\n      \n    } catch (error) {\n      console.warn('[MAL] Failed to attach distributions:', error);\n    }\n  }\n\n  async fetchUserListEntries(mediaType) {\n    const listConfig = { type: 'list', mediaType, layout: 'card', limit: 1000 };\n    const requestParams = this.buildRequestParams(listConfig, this.generateRequestId());\n    \n    const raw = await this.requestQueue.add(() => this.makeRawRequest(requestParams), {\n      priority: 'normal',\n      timeout: this.config.requestTimeout,\n      retries: 2,\n      metadata: { \n        type: 'list',\n        mediaType \n      },\n      service: 'mal'\n    });\n    \n    const transformed = this.transformResponse(raw, listConfig);\n    const entries = transformed?.MediaListCollection?.lists?.[0]?.entries || [];\n    return entries;\n  }\n\n  aggregateDistributionsFromEntries(entries, typeLower) {\n    const result = {\n      statuses: [],\n      scores: [],\n      formats: [],\n      releaseYears: [],\n      genres: []\n    };\n\n    if (!Array.isArray(entries) || entries.length === 0) return result;\n\n    const statusCounts = new Map();\n    const scoreCounts = new Map();\n    const formatCounts = new Map();\n    const yearCounts = new Map();\n    const genreSet = new Set();\n\n    for (const entry of entries) {\n      const status = entry?.status;\n      if (status) {\n        statusCounts.set(status, (statusCounts.get(status) || 0) + 1);\n      }\n\n      const rawScore = entry?.score;\n      if (typeof rawScore === 'number' && rawScore > 0) {\n        const scaled = Math.round(rawScore * 10);\n        scoreCounts.set(scaled, (scoreCounts.get(scaled) || 0) + 1);\n      }\n\n      const format = entry?.media?.format;\n      if (format) {\n        formatCounts.set(format, (formatCounts.get(format) || 0) + 1);\n      }\n\n      const year = entry?.media?.startDate?.year;\n      if (typeof year === 'number' && year > 0) {\n        yearCounts.set(year, (yearCounts.get(year) || 0) + 1);\n      }\n\n      const genres = entry?.media?.genres || [];\n      for (const g of genres) {\n        if (typeof g === 'string' && g.trim()) genreSet.add(g);\n      }\n    }\n\n    result.statuses = Array.from(statusCounts.entries())\n      .map(([status, count]) => ({ status, count }))\n      .sort((a, b) => b.count - a.count);\n\n    result.scores = Array.from(scoreCounts.entries())\n      .map(([score, count]) => ({ score, count }))\n      .sort((a, b) => a.score - b.score);\n\n    result.formats = Array.from(formatCounts.entries())\n      .map(([format, count]) => ({ format, count }))\n      .sort((a, b) => b.count - a.count);\n\n    result.releaseYears = Array.from(yearCounts.entries())\n      .map(([releaseYear, count]) => ({ releaseYear, count }))\n      .sort((a, b) => b.releaseYear - a.releaseYear);\n\n    result.genres = Array.from(genreSet);\n\n    return result;\n  }\n\n  applyStatsFallbacks(entries, statsObj, type) {\n    if (!statsObj) return;\n\n    if (!statsObj.count || statsObj.count === 0) {\n      statsObj.count = Array.isArray(entries) ? entries.length : 0;\n    }\n\n    if ((!statsObj.meanScore || statsObj.meanScore === 0) && Array.isArray(entries) && entries.length) {\n      const rated = entries.filter(e => typeof e.score === 'number' && e.score > 0);\n      if (rated.length) {\n        const avg10 = rated.reduce((sum, e) => sum + e.score, 0) / rated.length;\n        statsObj.meanScore = Math.round(avg10 * 10);\n      }\n    }\n\n    if (type === 'manga') {\n      if (!statsObj.chaptersRead || statsObj.chaptersRead === 0) {\n        statsObj.chaptersRead = entries.reduce((s, e) => s + (e.chaptersRead || 0), 0);\n      }\n      if (!statsObj.volumesRead || statsObj.volumesRead === 0) {\n        statsObj.volumesRead = entries.reduce((s, e) => s + (e.volumesRead || 0), 0);\n      }\n    } else if (type === 'anime') {\n      if (!statsObj.episodesWatched || statsObj.episodesWatched === 0) {\n        statsObj.episodesWatched = entries.reduce((s, e) => s + (e.progress || 0), 0);\n      }\n    }\n  }\n\n  // =================== ADDITIONAL API METHODS ===================\n\n  async getMALRecommendations(mediaId, mediaType = 'ANIME') {\n    return await ZoroError.guard(async () => {\n      const type = mediaType === 'ANIME' ? 'anime' : 'manga';\n      \n      const requestParams = {\n        url: `${this.baseUrl}/${type}/${mediaId}?fields=recommendations`,\n        method: 'GET',\n        requestId: this.generateRequestId(),\n        metadata: { type: 'recommendations' }\n      };\n\n      const response = await this.requestQueue.add(() => this.makeRawRequest(requestParams), {\n        priority: 'low',\n        timeout: this.config.requestTimeout,\n        retries: 1,\n        metadata: { \n          type: 'recommendations',\n          nocache: false \n        },\n        service: 'mal'\n      });\n      \n      return response.recommendations?.map(rec => ({\n        node: this.transformMedia(rec.node),\n        num_recommendations: rec.num_recommendations\n      })) || [];\n      \n    }, 'cache');\n  }\n\n  async getMALSeasonalAnime(year, season) {\n    return await ZoroError.guard(async () => {\n      const requestParams = {\n        url: `${this.baseUrl}/anime/season/${year}/${season}?fields=${this.getFieldsForLayout('card', true)}`,\n        method: 'GET',\n        requestId: this.generateRequestId(),\n        metadata: { type: 'seasonal' }\n      };\n\n      const response = await this.requestQueue.add(() => this.makeRawRequest(requestParams), {\n        priority: 'low',\n        timeout: this.config.requestTimeout,\n        retries: 1,\n        metadata: { \n          type: 'seasonal',\n          nocache: false \n        },\n        service: 'mal'\n      });\n      \n      return {\n        Page: {\n          media: response.data?.map(item => this.transformMedia(item)) || []\n        }\n      };\n      \n    }, 'cache');\n  }\n\n  // =================== LOGGING ===================\n\n  log(level, category, requestId, data = '') {\n    if (level === 'ERROR') {\n      const timestamp = new Date().toISOString();\n      const logData = typeof data === 'object' ? JSON.stringify(data, null, 2) : data;\n      console.log(`[${timestamp}] [Zoro-MAL] [${level}] [${category}] [${requestId}] ${logData}`);\n    }\n  }\n\n  // =================== METRICS ===================\n\n  getMetrics() {\n    // Get metrics from the MAL service in RequestQueue\n    const requestQueueMetrics = this.requestQueue.getMetrics();\n    const malServiceMetrics = requestQueueMetrics.services?.mal || {};\n    const malRateLimit = requestQueueMetrics.rateLimit?.mal || {};\n    \n    return {\n      ...malServiceMetrics,\n      utilization: malRateLimit.utilization || '0%',\n      authStatus: requestQueueMetrics.mal?.authFailures === 0 ? 'healthy' : 'degraded',\n      rateLimitInfo: malRateLimit\n    };\n  }\n\n  // =================== COMPATIBILITY METHODS ===================\n\n  async fetchMALStats(config) {\n    return this.fetchMALData({ ...config, type: 'stats' });\n  }\n\n  async fetchMALList(config) {\n    return this.fetchMALData(config);\n  }\n}\n\nexport { MalApi };", "import { requestUrl } from 'obsidian';\nimport { ZoroError } from '../../core/ZoroError.js';\n\n\nclass SimklApi {\n\n  constructor(plugin) {\n    this.plugin = plugin;\n    this.requestQueue = plugin.requestQueue;\n    this.cache = plugin.cache;\n    \n    this.baseUrl = 'https://api.simkl.com';\n    this.tokenUrl = 'https://api.simkl.com/oauth/token';\n    \n    // Field sets for different request types (similar to MAL structure)\n    this.fieldSets = {\n      compact: 'title,poster',\n      card: 'title,poster,year,ids,genres,rating,total_episodes,status',\n      full: 'title,poster,year,ids,genres,rating,total_episodes,total_seasons,status,overview,first_aired,last_aired,country,network,aired_episodes'\n    };\n\n    // Search-specific field sets (no user data)\n    this.searchFieldSets = {\n      compact: 'title,poster,year,ids',\n      card: 'title,poster,year,ids,genres,rating,total_episodes',\n      full: 'title,poster,year,ids,genres,rating,total_episodes,overview,first_aired,last_aired'\n    };\n\n    // Status mappings (Simkl uses different status names)\n    // Note: Movies only support plantowatch, completed, dropped\n    // TV/Anime support watching, hold, completed, dropped, plantowatch\n    this.simklToAniListStatus = {\n      'watching': 'CURRENT',\n      'completed': 'COMPLETED', \n      'hold': 'PAUSED',\n      'dropped': 'DROPPED',\n      'plantowatch': 'PLANNING',\n      'notinteresting': 'DROPPED'\n    };\n\n    this.aniListToSimklStatus = {\n      'CURRENT': 'watching',\n      'COMPLETED': 'completed',\n      'PAUSED': 'hold',\n      'DROPPED': 'dropped',\n      'PLANNING': 'plantowatch'\n    };\n\n    // Media type-specific status validation\n    this.validMovieStatuses = ['plantowatch', 'completed', 'dropped'];\n    this.validShowStatuses = ['watching', 'hold', 'completed', 'dropped', 'plantowatch'];\n\n    // Media type mapping for API endpoints and data parsing\n    this.mediaTypeMap = {\n      'ANIME': 'anime',\n      'MANGA': 'anime', // Simkl doesn't have manga, fallback to anime\n      'TV': 'tv',\n      'MOVIE': 'movies',\n      'MOVIES': 'movies'\n    };\n\n    this.metrics = { requests: 0, cached: 0, errors: 0 };\n  }\n\n  // =================== MAIN FETCH METHOD (Following MAL pattern) ===================\n\n  async fetchSimklData(config) {\n    try {\n      return await this.executeFetch(config);\n    } catch (error) {\n      this.metrics.errors++;\n      \n      throw this.createUserFriendlyError(error);\n    }\n  }\n\n  async executeFetch(config) {\n    const normalizedConfig = this.validateConfig(config);\n    const cacheKey = this.createCacheKey(normalizedConfig);\n    const cacheScope = this.getCacheScope(normalizedConfig.type);\n    \n    // Check cache first\n    if (!normalizedConfig.nocache) {\n      const cached = this.cache.get(cacheKey, { scope: cacheScope });\n      if (cached) {\n        this.metrics.cached++;\n        return cached;\n      }\n    }\n\n\n    // Ensure authentication for user-specific requests\n    if (this.requiresAuth(normalizedConfig.type)) {\n      await this.ensureValidToken();\n    }\n    \n    // Build and execute request\n    let transformedData = null;\n    try {\n      if (normalizedConfig.type === 'search') {\n        // Use robust search with endpoint fallbacks\n        transformedData = await this.performSearchWithFallbacks(normalizedConfig);\n      } else {\n        const requestParams = this.buildRequestParams(normalizedConfig);\n        const rawResponse = await this.makeRequest(requestParams);\n        transformedData = this.transformResponse(rawResponse, normalizedConfig);\n      }\n    } catch (err) {\n      if (normalizedConfig.type !== 'single') {\n        throw err;\n      }\n      console.warn('[Simkl] Primary single request failed, will try public fallback:', err?.message || err);\n    }\n    \n    // If stats requested, enrich with distributions computed from user lists\n    if (normalizedConfig.type === 'stats' && transformedData?.User) {\n      try {\n        await this.attachSimklDistributions(transformedData.User);\n      } catch (e) {\n        \n      }\n    }\n     // Public fallback for single media when not found or auth missing\n    if (normalizedConfig.type === 'single' && (!transformedData || transformedData.MediaList == null)) {\n      try {\n        const publicResult = await this.fetchSingleByIdPublic(normalizedConfig.mediaId, normalizedConfig.mediaType);\n        if (publicResult) {\n          transformedData = publicResult;\n        }\n      } catch (e) {\n        console.warn('[Simkl] Public single fetch fallback failed:', e?.message || e);\n      }\n    }\n    \n    // Cache successful results\n    if (transformedData && !normalizedConfig.nocache) {\n      this.cache.set(cacheKey, transformedData, { scope: cacheScope });\n    }\n    \n    return transformedData;\n  }\n\n  // =================== REQUEST BUILDING (Fixed based on MAL pattern) ===================\n\n  buildRequestParams(config) {\n    const endpoint = this.buildEndpointUrl(config);\n    const params = this.buildQueryParams(config);\n    const headers = this.getHeaders(config);\n    \n    return {\n      url: this.buildFullUrl(endpoint, params),\n      method: config.method || 'GET',\n      headers,\n      body: config.body,\n      priority: config.priority || 'normal'\n    };\n  }\n\nbuildEndpointUrl(config) {\n  const simklMediaType = this.getSimklMediaType(config.mediaType);\n  \n  switch (config.type) {\n    case 'stats':\n      return `${this.baseUrl}/users/settings`;\n    case 'list':\n      return `${this.baseUrl}/sync/all-items/${simklMediaType}`;\n    case 'single':\n      // For single items, we need to get the user's list and filter\n      return `${this.baseUrl}/sync/all-items/${simklMediaType}`;\n    case 'search':\n      // CRITICAL FIX: Map internal media types to correct Simkl search endpoints\n      if (simklMediaType === 'movies') {\n        return `${this.baseUrl}/search/movie`; // Simkl uses singular 'movie'\n      } else if (simklMediaType === 'anime') {\n        return `${this.baseUrl}/search/anime`; // Simkl uses 'anime'\n      } else if (simklMediaType === 'tv') {\n        return `${this.baseUrl}/search/tv`; // Simkl uses 'tv'\n      } else {\n        // Fallback to TV search for unknown types\n        return `${this.baseUrl}/search/tv`;\n      }\n    default:\n      throw new Error(`Unknown request type: ${config.type}`);\n  }\n}\n\n// ALSO NEED TO FIX: getSimklMediaType method for consistency\ngetSimklMediaType(mediaType) {\n  if (!mediaType) return 'anime'; // default\n  \n  const upperType = String(mediaType).toUpperCase();\n  \n  // FIXED: More precise mapping for search endpoints\n  if (upperType === 'MOVIE' || upperType === 'MOVIES') {\n    return 'movies'; // Keep as 'movies' for internal logic\n  } else if (upperType === 'ANIME') {\n    return 'anime';\n  } else if (upperType === 'TV') {\n    return 'tv';\n  }\n  \n  return this.mediaTypeMap[upperType] || 'anime';\n}\n  buildQueryParams(config) {\n    const params = {};\n    \n    // Always include client_id for public endpoints\n    if (this.plugin.settings.simklClientId) {\n      params.client_id = this.plugin.settings.simklClientId;\n    }\n    \n    switch (config.type) {\n      case 'search':\n        if (config.search || config.query) {\n          params.q = (config.search || config.query).trim();\n        }\n        // Simkl defaults: try conservative page/limit\n        params.limit = Math.max(1, Math.min(config.perPage || 10, 20));\n        params.page = Math.max(1, config.page || 1);\n        break;\n        \n      case 'list':\n      case 'single':\n        // Simkl returns all user data in one call, no additional params needed\n        break;\n        \n      case 'stats':\n        // User settings/stats\n        break;\n    }\n    \n    return params;\n  }\n\n  getHeaders(config) {\n    const headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'User-Agent': `Zoro-Plugin/${this.plugin.manifest?.version || '1.0.0'}`\n    };\n    \n          if (this.plugin.settings.simklClientId) {\n        headers['simkl-api-key'] = this.plugin.settings.simklClientId;\n      }\n      \n      // Add auth token for user-specific requests\n      if (this.requiresAuth(config.type) && this.plugin.settings.simklAccessToken) {\n        headers['Authorization'] = `Bearer ${this.plugin.settings.simklAccessToken}`;\n      }\n      \n      // Some endpoints are picky without a Referer\n      headers['Referer'] = 'https://simkl.com/';\n      \n      return headers;\n    }\n\n  // Append a focused error entry (only for edit-related requests)\n\n\n\n  \n   // =================== HTTP REQUEST EXECUTION (Following MAL pattern) ===================\n  \n   async makeRequest(requestParams) {\n    this.metrics.requests++;\n    \n    const requestFn = () => requestUrl({\n      url: requestParams.url,\n      method: requestParams.method || 'GET',\n      headers: requestParams.headers || {},\n      body: requestParams.body\n    });\n\n    try {\n      const response = await this.requestQueue.add(requestFn, {\n        priority: requestParams.priority || 'normal',\n        timeout: 25000,\n        service: 'simkl',\n        metadata: { type: requestParams.type || 'update' }\n      });\n\n\n\n      if (!response) {\n        console.log('[Simkl][HTTP] Empty response object');\n        throw new Error('Empty response from Simkl');\n      }\n      \n\n\n      // Handle Simkl error responses\n      if (response.status && (response.status < 200 || response.status >= 300)) {\n        const errMsg = response.json?.error_description || response.json?.error || `HTTP ${response.status}`;\n        console.log('[Simkl][HTTP] Non-200', errMsg);\n        throw new Error(errMsg);\n      }\n\n      if (!response.json) {\n        // Accept empty success body (Simkl may return 200 with no body)\n        if (response.text === null || response.text === undefined || String(response.text).trim() === '') {\n          return { ok: true };\n        }\n        try {\n          const parsed = JSON.parse(response.text);\n          return parsed;\n        } catch (e) {\n          // Fallback to success since status was 2xx\n          return { ok: true };\n        }\n      }\n\n      return response.json;\n\n    } catch (error) {\n      console.log('[Simkl][HTTP] request failed', error);\n      throw error;\n    }\n  }\n\n  // Robust search executor with endpoint fallbacks\n  async performSearchWithFallbacks(config) { \n    const term = (config.search || config.query || '').trim();\n    if (!term) {\n      return { Page: { media: [] } };\n    }\n\n    // Try primary endpoint based on requested mediaType\n    const primaryParams = this.buildRequestParams({ ...config, type: 'search' });\n    \n    try {\n      const primaryRaw = await this.makeRequest(primaryParams);\n      const primaryTransformed = this.transformSearchResponse(primaryRaw, config);\n      \n      // Check if we have any results at all\n      if (primaryTransformed?.Page?.media?.length) {\n        const itemsWithIds = primaryTransformed.Page.media.filter(item => item && item.id > 0);\n        \n        if (itemsWithIds.length > 0) {\n          return primaryTransformed;\n        }\n      }\n    } catch (e) { \n      console.log('[Simkl][Search] primary failed', e);\n    }\n\n    // Fallback matrix: try all three categories to be safe\n    const candidates = [\n      { type: 'ANIME', endpoint: `${this.baseUrl}/search/anime` },\n      { type: 'TV', endpoint: `${this.baseUrl}/search/tv` },\n      { type: 'MOVIE', endpoint: `${this.baseUrl}/search/movie` } // singular according to API\n    ];\n\n    const aggregated = [];\n    for (const c of candidates) {\n      try {\n        const qp = {\n          q: term,\n          limit: Math.max(1, Math.min(config.perPage || 10, 20)),\n          page: Math.max(1, config.page || 1)\n        };\n        if (this.plugin.settings.simklClientId) {\n          qp.client_id = this.plugin.settings.simklClientId;\n        }\n        const url = this.buildFullUrl(c.endpoint, qp);\n        const raw = await this.makeRequest({ url, method: 'GET', headers: this.getHeaders({ type: 'search' }), priority: 'normal' });\n        const key = this.getSimklMediaType(c.type);\n        let items;\n        if (Array.isArray(raw)) items = raw;\n        else if (Array.isArray(raw[key])) items = raw[key];\n        else if (Array.isArray(raw.results)) items = raw.results;\n        else if (raw.movie || raw.show) items = [raw];\n        else items = [];\n        \n        for (const item of items) {\n          const mapped = this.transformMedia(item, c.type);\n          \n          // Only include items with valid IDs for editing operations\n          if (mapped && mapped.id > 0) {\n            aggregated.push(mapped);\n          }\n        }\n      } catch {}\n    }\n\n    return { Page: { media: aggregated } };\n  }\n\n  // Enhanced method to resolve a Simkl ID by title for edit operations when search results lack ids\n  async resolveSimklIdByTitle(title, mediaType) {\n    if (!title || typeof title !== 'string') return null;\n    const term = title.trim();\n    if (!term) return null;\n\n    // Prefer specific endpoint by mediaType for more accurate results\n    const typeUpper = String(mediaType || '').toUpperCase();\n    const endpoints = [];\n    if (typeUpper === 'MOVIE' || typeUpper === 'MOVIES') endpoints.push(`${this.baseUrl}/search/movie`);\n    else if (typeUpper === 'ANIME') endpoints.push(`${this.baseUrl}/search/anime`);\n    else if (typeUpper === 'TV') endpoints.push(`${this.baseUrl}/search/tv`);\n    // Add generic fallbacks\n    endpoints.push(`${this.baseUrl}/search/anime`, `${this.baseUrl}/search/tv`, `${this.baseUrl}/search/movie`);\n\n    for (const ep of endpoints) {\n      try {\n        const qp = { q: term, limit: 10, page: 1 }; // Increased limit for better matching\n        if (this.plugin.settings.simklClientId) qp.client_id = this.plugin.settings.simklClientId;\n        const url = this.buildFullUrl(ep, qp);\n        const raw = await this.makeRequest({ url, method: 'GET', headers: this.getHeaders({ type: 'search' }), priority: 'normal' });\n        const items = Array.isArray(raw) ? raw : (raw.results || raw.anime || raw.tv || raw.movies || []);\n        \n        // Try to find the best match by title similarity\n        let bestMatch = null;\n        let bestScore = 0;\n        \n        for (const it of items) {\n          const node = it.movie || it.show || it;\n          const ids = node?.ids || node;\n          // Now that we normalize simkl_id to simkl, we can just use simkl\n          const id = Number(ids?.simkl || ids?.id);\n          \n          if (id > 0) {\n            // Calculate title similarity score\n            const itemTitle = (node.title || node.name || '').toLowerCase();\n            const searchTitle = term.toLowerCase();\n            \n            // Exact match gets highest score\n            if (itemTitle === searchTitle) {\n              return id;\n            }\n            \n            // Partial match scoring\n            const score = this.calculateTitleSimilarity(itemTitle, searchTitle);\n            if (score > bestScore) {\n              bestScore = score;\n              bestMatch = id;\n            }\n          }\n        }\n        \n        // Return best match if we found one with reasonable similarity\n        if (bestMatch && bestScore > 0.7) {\n          return bestMatch;\n        }\n      } catch {}\n    }\n    return null;\n  }\n\n  // Helper method to calculate title similarity for better ID resolution\n  calculateTitleSimilarity(title1, title2) {\n    if (!title1 || !title2) return 0;\n    \n    const t1 = title1.toLowerCase().trim();\n    const t2 = title2.toLowerCase().trim();\n    \n    if (t1 === t2) return 1.0;\n    \n    // Check if one title contains the other\n    if (t1.includes(t2) || t2.includes(t1)) return 0.9;\n    \n    // Check for common variations (e.g., \"Season 1\", \"S1\", etc.)\n    const clean1 = t1.replace(/season\\s*\\d+|s\\d+|\\(.*?\\)/gi, '').trim();\n    const clean2 = t2.replace(/season\\s*\\d+|s\\d+|\\(.*?\\)/gi, '').trim();\n    \n    if (clean1 === clean2) return 0.8;\n    \n    // Simple word overlap scoring\n    const words1 = new Set(clean1.split(/\\s+/));\n    const words2 = new Set(clean2.split(/\\s+/));\n    \n    const intersection = new Set([...words1].filter(x => words2.has(x)));\n    const union = new Set([...words1, ...words2]);\n    \n    return intersection.size / union.size;\n  }\n\n  // Method to ensure search results have proper IDs for editing operations\n  async ensureSearchResultIds(searchResults, mediaType) {\n    if (!searchResults?.Page?.media?.length) return searchResults;\n    \n    const enhancedResults = [];\n    let resolvedCount = 0;\n    \n    for (const item of searchResults.Page.media) {\n      if (item && item.id > 0) {\n        // Item already has a valid ID\n        enhancedResults.push(item);\n      } else if (item && item.title) {\n        // Try to resolve ID by title\n        try {\n          console.log(`[Simkl] Resolving ID for search result: \"${item.title}\"`);\n          const resolvedId = await this.resolveSimklIdByTitle(item.title, mediaType);\n          if (resolvedId) {\n            item.id = resolvedId;\n            enhancedResults.push(item);\n            resolvedCount++;\n            console.log(`[Simkl] Successfully resolved ID ${resolvedId} for \"${item.title}\"`);\n          } else {\n            console.warn(`[Simkl] Could not resolve ID for \"${item.title}\"`);\n          }\n        } catch (error) {\n          console.warn(`[Simkl] Failed to resolve ID for \"${item.title}\":`, error);\n        }\n      }\n    }\n    \n    if (resolvedCount > 0) {\n      console.log(`[Simkl] Enhanced ${resolvedCount} search results with resolved IDs`);\n    }\n    \n    return {\n      Page: {\n        media: enhancedResults\n      }\n    };\n  }\n\n  // Method to get a single media item by ID, useful for resolving search result IDs\n  async getMediaById(mediaId, mediaType) {\n    if (!mediaId || !Number.isFinite(Number(mediaId))) return null;\n    \n    try {\n      const response = await this.fetchSingleByIdPublic(mediaId, mediaType);\n      if (response?.MediaList) {\n        return response.MediaList;\n      }\n    } catch (error) {\n      console.warn(`[Simkl] Failed to get media by ID ${mediaId}:`, error);\n    }\n    \n    return null;\n  }\n\n  // Method to validate and fix search result IDs before editing operations\n  async validateSearchResultForEditing(searchResult, mediaType) {\n    if (!searchResult) return null;\n    \n    // If it already has a valid ID, return as is\n    if (searchResult.id && Number.isFinite(Number(searchResult.id)) && Number(searchResult.id) > 0) {\n      return searchResult;\n    }\n    \n    // Try to resolve ID by title\n    if (searchResult.title) {\n      try {\n        const resolvedId = await this.resolveSimklIdByTitle(searchResult.title, mediaType);\n        if (resolvedId) {\n          searchResult.id = resolvedId;\n          console.log(`[Simkl] Resolved ID ${resolvedId} for editing: \"${searchResult.title}\"`);\n          return searchResult;\n        }\n      } catch (error) {\n        console.warn(`[Simkl] Failed to resolve ID for editing \"${searchResult.title}\":`, error);\n      }\n    }\n    \n    console.warn(`[Simkl] Cannot edit search result without valid ID: \"${searchResult.title}\"`);\n    return null;\n  }\n\n\n\n  // =================== DATA TRANSFORMATION (Fixed to match expected structure) ===================\n\n  transformResponse(data, config) {\n    \n    \n    switch (config.type) {\n      case 'search':\n        return this.transformSearchResponse(data, config);\n      case 'single':\n        return this.transformSingleResponse(data, config);\n      case 'stats':\n        return this.transformStatsResponse(data);\n      case 'list':\n        return this.transformListResponse(data, config);\n      default:\n        return this.transformListResponse(data, config);\n    }\n  }\n\n  transformSearchResponse(data, config) {\n    const simklType = this.getSimklMediaType(config.mediaType);\n\n    let items = [];\n    \n    // CRITICAL FIX: Simkl search responses are typically direct arrays\n    if (Array.isArray(data)) {\n      items = data;\n    } else if (data && typeof data === 'object') {\n      // Try to find items under various possible keys\n      const possibleKeys = [simklType, 'results', 'items', 'anime', 'tv', 'movies', 'shows'];\n      \n      for (const key of possibleKeys) {\n        if (Array.isArray(data[key])) {\n          items = data[key];\n          break;\n        }\n      }\n      \n      // If still no items, check if it's a single item response\n      if (items.length === 0) {\n        if (data.movie || data.show || data.anime) {\n          items = [data];\n        }\n      }\n    }\n    \n    const transformedItems = items\n      .map(item => this.transformMedia(item, config.mediaType))\n      .filter(item => item && item.id > 0); // Only include items with valid IDs for editing operations\n    \n    return {\n      Page: {\n        media: transformedItems\n      }\n    };\n  }\n\n  transformSingleResponse(data, config) {\n    const targetMediaId = parseInt(config.mediaId);\n    let targetEntry = null;\n    \n    // FIXED: Use the actual media type being requested\n    const simklMediaType = this.getSimklMediaType(config.mediaType);\n    const mediaArray = data[simklMediaType] || [];\n    \n    if (Array.isArray(mediaArray)) {\n      targetEntry = mediaArray.find(entry => {\n        const show = entry.show || entry;\n        const ids = show.ids || show;\n        // Now that we normalize simkl_id to simkl, we can just use simkl\n        return (ids.simkl === targetMediaId || ids.id === targetMediaId);\n      });\n    }\n    \n    return {\n      MediaList: targetEntry ? this.transformListEntry(targetEntry, config.mediaType) : null\n    };\n  }\n  \n    // Fallback: fetch a single media by Simkl ID using public search-by-id API\n  async fetchSingleByIdPublic(mediaId, mediaType) {\n    const id = parseInt(mediaId);\n    if (!id || Number.isNaN(id)) return null;\n\n    const url = `${this.baseUrl}/search/id?simkl=${encodeURIComponent(id)}`;\n    const headers = this.getHeaders({ type: 'search' });\n\n    try {\n      const response = await this.makeRequest({ url, method: 'GET', headers, priority: 'normal' });\n      const wrapped = this.transformSinglePublicResponse(response, mediaType, id);\n      return wrapped;\n    } catch (e) {\n      console.warn('[Simkl] fetchSingleByIdPublic failed:', e?.message || e);\n      return { MediaList: null };\n    }\n  }\n\n  // Parse public search-by-id response into MediaList shape\n  transformSinglePublicResponse(raw, mediaType, targetId) {\n    if (!raw || (typeof raw !== 'object' && !Array.isArray(raw))) return { MediaList: null };\n\n    const candidates = [];\n    ['anime', 'movies', 'tv', 'shows', 'results', 'items'].forEach(key => {\n      if (Array.isArray(raw?.[key])) candidates.push(...raw[key]);\n    });\n\n    if (Array.isArray(raw)) candidates.push(...raw);\n    if (candidates.length === 0 && raw?.ids) candidates.push(raw);\n\n    const match = candidates.find(item => {\n      const node = item.movie || item.show || item;\n      const ids = node?.ids || node || {};\n      // Now that we normalize simkl_id to simkl, we can just use simkl\n      return Number(ids.simkl || ids.id) === Number(targetId);\n    }) || null;\n\n    if (!match) return { MediaList: null };\n\n    const node = match.movie || match.show || match;\n    const transformedMedia = this.transformMedia(node, mediaType);\n    const entry = {\n      id: null,\n      status: null,\n      score: null,\n      progress: this.isMovieType(mediaType, node) ? 0 : 0,\n      media: transformedMedia\n    };\n\n    return { MediaList: entry };\n  }\n\n  // FIXED: Complete rewrite of list response transformation with comprehensive debugging\n  transformListResponse(data, config) {\n    let entries = [];\n    \n    \n    \n    // FIXED: Use the correct media type key from the response\n    const simklMediaType = this.getSimklMediaType(config.mediaType);\n    const raw = data || {};\n\n    \n    \n    // CRITICAL FIX: Try multiple possible data structure patterns\n    \n    // Pattern 1: Direct array under media type key\n    if (Array.isArray(raw[simklMediaType])) {\n      entries = raw[simklMediaType];\n      \n    }\n    // Pattern 2: Root is an array (search results)\n    else if (Array.isArray(raw)) {\n      entries = raw;\n      \n    }\n    // Pattern 3: Grouped data by status (e.g., {watching: [], completed: []})\n    else if (raw[simklMediaType] && typeof raw[simklMediaType] === 'object') {\n      const grouped = raw[simklMediaType];\n      \n      Object.keys(grouped).forEach(statusKey => {\n        const arr = grouped[statusKey];\n        if (Array.isArray(arr)) {\n          \n          arr.forEach(item => entries.push({ ...item, _status: statusKey }));\n        }\n      });\n    }\n    // Pattern 4: Try alternative media type keys (fallback)\n    else {\n      \n      \n      // Try common alternative keys\n      const alternativeKeys = ['anime', 'movies', 'tv', 'shows', 'items', 'results'];\n      let found = false;\n      \n      for (const key of alternativeKeys) {\n        if (raw[key] && Array.isArray(raw[key]) && raw[key].length > 0) {\n          \n          entries = raw[key];\n          found = true;\n          break;\n        }\n      }\n      \n      // Last resort: try any array in the response\n      if (!found) {\n        \n        Object.keys(raw).forEach(key => {\n          if (Array.isArray(raw[key]) && raw[key].length > 0) {\n            \n            entries = entries.concat(raw[key]);\n          }\n        });\n      }\n    }\n    \n    \n    \n    // Sample the first entry to understand structure\n    if (entries.length > 0) {\n    }\n    \n    // Filter by status if specified\n    if (config.listType && config.listType !== 'ALL') {\n      const targetStatus = this.mapAniListStatusToSimkl(config.listType);\n      const beforeFilter = entries.length;\n      entries = entries.filter(entry => (entry.status || entry._status) === targetStatus);\n      \n    }\n    \n    \n    // Transform entries with enhanced error handling\n    const transformedEntries = [];\n    entries.forEach((entry, index) => {\n      try {\n        const transformed = this.transformListEntry(entry, config.mediaType);\n        if (transformed) {\n          transformedEntries.push(transformed);\n        } else {\n          console.warn(`[Simkl] Entry ${index} transformed to null`);\n        }\n      } catch (error) {\n        console.error(`[Simkl] Error transforming entry ${index}:`, error, entry);\n      }\n    });\n    \n    \n    return {\n      MediaListCollection: {\n        lists: [{\n          entries: transformedEntries\n        }]\n      }\n    };\n  }\n\n  transformStatsResponse(data) {\n    // Simkl user stats structure is different, adapt as needed\n    const user = data.user || data;\n     const simklStats = user.stats || {};\n\n    // Normalize categories for Simkl: anime, tv, movies\n    const animeStats = simklStats.anime || {};\n    const tvStats = simklStats.tv || simklStats.shows || {};\n    const movieStats = simklStats.movies || simklStats.films || {};\n    return {\n      User: {\n        id: user.id || null,\n        name: user.name || user.username || 'Unknown User',\n        avatar: {\n          large: user.avatar || null,\n          medium: user.avatar || null\n        },\n        statistics: {\n          anime: {\n            count: animeStats.total || 0,\n            meanScore: animeStats.rating || 0,\n            standardDeviation: 0,\n            episodesWatched: animeStats.episodes || 0,\n            minutesWatched: animeStats.minutes || 0\n          },\n          tv: {\n            count: tvStats.total || 0,\n            meanScore: tvStats.rating || 0,\n            standardDeviation: 0,\n            episodesWatched: tvStats.episodes || 0,\n            minutesWatched: tvStats.minutes || 0\n          },\n          movie: {\n            count: movieStats.total || 0,\n            meanScore: movieStats.rating || 0,\n            standardDeviation: 0,\n            minutesWatched: movieStats.minutes || 0\n          }\n        },\n        mediaListOptions: {\n          scoreFormat: 'POINT_10'\n        }\n      }\n    };\n  }\n\n  // =================== MEDIA TRANSFORMATION (Fixed structure) ===================\n  \n  // FIXED: Added enhanced debugging and comprehensive data structure handling\n  transformMedia(simklMedia, mediaType) {\n    if (!simklMedia) {\n      return null;\n    }\n\n    // CRITICAL FIX: Handle multiple possible data structures from Simkl\n    let media, originalData;\n    \n    // Case 1: Data is nested under 'show' (common in sync responses)\n    if (simklMedia.show) {\n      \n      media = simklMedia.show;\n      originalData = simklMedia; // Keep reference to full object\n    }\n    // Case 2: Data is nested under 'movie' (for movie responses)\n    else if (simklMedia.movie) {\n      \n      media = simklMedia.movie;\n      originalData = simklMedia;\n    }\n    // Case 3: Data is directly in the root object\n    else {\n      \n      media = simklMedia;\n      originalData = simklMedia;\n    }\n\n    \n\n    const ids = media.ids || originalData.ids || {};\n    \n    // FIXED: Enhanced poster extraction for movies\n    const posterUrl = this.extractPosterUrl(media, originalData, ids);\n    \n    // FIXED: Better movie detection using mediaType and API response\n    const isMovie = this.isMovieType(mediaType, media);\n    \n    // FIXED: Comprehensive title extraction logic with full debugging\n    const extractedTitle = this.extractTitle(media, originalData);\n    \n    // FIXED: Enhanced genres extraction\n    const genres = this.extractGenres(media, originalData);\n    \n    const episodes = (() => {\n      // For movies, always return 1\n      if (isMovie) {\n        return 1;\n      }\n      \n      const candidates = [\n        media.total_episodes_count,\n        media.total_episodes,\n        media.episodes,\n        originalData.total_episodes_count,\n        originalData.total_episodes,\n        originalData.episodes\n      ];\n      \n      for (const cand of candidates) {\n        if (cand !== undefined && cand !== null && cand !== '') {\n          const n = Number(cand);\n          if (!isNaN(n)) return n;\n        }\n      }\n      return null;\n    })();\n    \n    // Enhanced ID extraction for Simkl - normalize simkl_id to simkl for consistency\n    let finalId = null;\n    \n    // CRITICAL FIX: Normalize simkl_id to simkl for consistent ID handling\n    // First try to get the simkl ID from any available source\n    if (ids.simkl_id && Number.isFinite(Number(ids.simkl_id))) {\n      finalId = Number(ids.simkl_id);\n      // Normalize: also set the simkl field for consistency\n      ids.simkl = finalId;\n    }\n    // Fallback to other ID sources\n    else if (ids.simkl && Number.isFinite(Number(ids.simkl))) {\n      finalId = Number(ids.simkl);\n    }\n    else if (ids.id && Number.isFinite(Number(ids.id))) {\n      finalId = Number(ids.id);\n    }\n    else if (media.id && Number.isFinite(Number(media.id))) {\n      finalId = Number(media.id);\n    }\n    else if (originalData.id && Number.isFinite(Number(originalData.id))) {\n      finalId = Number(originalData.id);\n    }\n    \n    // If we still don't have an ID, try to extract from the media object itself\n    if (!finalId && media.ids) {\n      if (media.ids.simkl_id && Number.isFinite(Number(media.ids.simkl_id))) {\n        finalId = Number(media.ids.simkl_id);\n        // Normalize: also set the simkl field for consistency\n        media.ids.simkl = finalId;\n      } else if (media.ids.simkl && Number.isFinite(Number(media.ids.simkl))) {\n        finalId = Number(media.ids.simkl);\n      } else if (media.ids.id && Number.isFinite(Number(media.ids.id))) {\n        finalId = Number(media.ids.id);\n      }\n    }\n    \n    // Additional check: sometimes the ID is directly on the root object\n    if (!finalId && simklMedia.ids) {\n      if (simklMedia.ids.simkl_id && Number.isFinite(Number(simklMedia.ids.simkl_id))) {\n        finalId = Number(simklMedia.ids.simkl_id);\n        // Normalize: also set the simkl field for consistency\n        simklMedia.ids.simkl = finalId;\n      } else if (simklMedia.ids.simkl && Number.isFinite(Number(simklMedia.ids.simkl))) {\n        finalId = Number(simklMedia.ids.simkl);\n      } else if (simklMedia.ids.id && Number.isFinite(Number(simklMedia.ids.id))) {\n        finalId = Number(simklMedia.ids.id);\n      }\n    }\n    \n    // Final fallback - check if we have any numeric ID\n    if (!finalId) {\n      const allIds = [\n        ids.simkl_id, ids.simkl, ids.id, media.id, originalData.id,\n        media.ids?.simkl_id, media.ids?.simkl, media.ids?.id, \n        originalData?.ids?.simkl_id, originalData?.ids?.simkl, originalData?.ids?.id,\n        simklMedia.ids?.simkl_id, simklMedia.ids?.simkl, simklMedia.ids?.id, simklMedia.id\n      ];\n      \n      for (const id of allIds) {\n        if (id && Number.isFinite(Number(id)) && Number(id) > 0) {\n          finalId = Number(id);\n          break;\n        }\n      }\n    }\n\n    const transformedResult = {\n      id: finalId || 0,\n      idMal: ids.mal || null,\n      idImdb: ids.imdb || null,\n      idTmdb: ids.tmdb || null,\n      title: extractedTitle,\n      coverImage: {\n        large: posterUrl,\n        medium: posterUrl,\n        _raw: media.poster || media.image || media.cover,\n        _normalized: posterUrl\n      },\n      format: isMovie ? 'MOVIE' : this.mapSimklFormat(\n  media.type || media.kind || originalData.type || (mediaType || '').toString().toLowerCase(),\n  mediaType\n),\n      averageScore: null, // Simkl ratings not needed for detail panel\n      status: media.status ? media.status.toUpperCase() : null,\n      genres: genres,\n      episodes: episodes,\n      chapters: null,\n      isFavourite: false,\n      startDate: this.parseDate(media.first_aired || originalData.first_aired),\n      endDate: this.parseDate(media.last_aired || originalData.last_aired),\n      // Simkl does not provide airing data in their API\n      nextAiringEpisode: null,\n      // Map Simkl overview to description for detail panel\n      description: media.overview || originalData.overview || null,\n      // FIXED: Add movie-specific metadata for rendering\n      _isMovie: isMovie,\n      _mediaType: mediaType,\n      _rawData: originalData // Keep for debugging\n    };\n\n    \n    return transformedResult;\n  }\n\n  // FIXED: Enhanced poster URL extraction method\n  extractPosterUrl(media, originalData, ids) {\n    // Try multiple poster field variations that Simkl uses for different content types\n    const posterCandidates = [\n      // Standard fields\n      media.poster,\n      media.image,\n      media.cover,\n      \n      // Image object variations\n      media.images?.poster,\n      media.images?.poster_small,\n      media.images?.poster_large,\n      media.images?.movie_poster,\n      media.images?.cover,\n      media.images?.fanart,\n      \n      // Original data fallbacks\n      originalData?.poster,\n      originalData?.image,\n      originalData?.cover,\n      originalData?.images?.poster,\n      originalData?.images?.movie_poster\n    ];\n\n    let posterUrl = null;\n    \n    for (const candidate of posterCandidates) {\n      if (candidate) {\n        if (typeof candidate === 'object') {\n          posterUrl = candidate.full || candidate.large || candidate.medium || \n                     candidate.url || candidate.path || \n                     Object.values(candidate).find(v => typeof v === 'string' && v.trim());\n        } else if (typeof candidate === 'string' && candidate.trim()) {\n          posterUrl = candidate.trim();\n        }\n        \n        if (posterUrl) break;\n      }\n    }\n    \n    // Process the found poster URL\n    if (posterUrl) {\n      if (posterUrl.startsWith('//')) {\n        posterUrl = 'https:' + posterUrl;\n      } else if (posterUrl.startsWith('/')) {\n        posterUrl = 'https://simkl.in' + posterUrl;\n      } else if (!posterUrl.match(/^https?:\\/\\//i)) {\n        // Check if it looks like a direct filename or needs Simkl CDN path\n        if (posterUrl.includes('.jpg') || posterUrl.includes('.png') || posterUrl.includes('.webp')) {\n          // If it's already a filename, use Simkl CDN\n          posterUrl = `https://simkl.in/posters/${posterUrl.replace(/\\.(jpg|png|webp)$/i, '')}_m.jpg`;\n        } else {\n          // Use the ID-based fallback\n          posterUrl = `https://simkl.in/posters/${posterUrl}_m.jpg`;\n        }\n      }\n    }\n\n    // Final fallback using media ID\n    if (!posterUrl && ids && ids.simkl) {\n      posterUrl = `https://simkl.in/posters/${ids.simkl}_m.jpg`;\n    }\n\n    \n    return posterUrl;\n  }\n\n\n\n  // FIXED: Enhanced genres extraction method\n  extractGenres(media, originalData) {\n    const genreCandidates = [\n      media.genres,\n      media.genre,\n      originalData?.genres,\n      originalData?.genre\n    ];\n\n    for (const candidate of genreCandidates) {\n      if (Array.isArray(candidate) && candidate.length > 0) {\n        // Filter out empty/invalid genres\n        const validGenres = candidate.filter(g => \n          g && typeof g === 'string' && g.trim()\n        ).map(g => g.trim());\n        \n        if (validGenres.length > 0) {\n          \n          return validGenres;\n        }\n      }\n    }\n\n    \n    return [];\n  }\n\n  // FIXED: Completely rewritten comprehensive title extraction method with deep debugging\n  extractTitle(media, originalData) {\n    \n    // CRITICAL FIX: Try ALL possible nested structures and field names\n    const allPossibleTitleSources = [\n      // Direct media object fields\n      media?.title,\n      media?.name,\n      media?.en_title,\n      media?.original_title,\n      media?.title_en,\n      media?.title_english,\n      media?.english_name,\n      media?.romaji,\n      media?.english,\n      media?.native,\n      \n      // Nested title objects (common in many APIs)\n      media?.title?.english,\n      media?.title?.romaji,\n      media?.title?.native,\n      media?.title?.en,\n      media?.title?.original,\n      \n      // Original/root data fields\n      originalData?.title,\n      originalData?.name,\n      originalData?.en_title,\n      originalData?.original_title,\n      originalData?.title_en,\n      originalData?.title_english,\n      originalData?.english_name,\n      \n      // Nested in original data\n      originalData?.title?.english,\n      originalData?.title?.romaji,\n      originalData?.title?.native,\n      originalData?.title?.en,\n      originalData?.title?.original,\n      \n      // Show object nested fields (critical for Simkl sync responses)\n      originalData?.show?.title,\n      originalData?.show?.name,\n      originalData?.show?.en_title,\n      originalData?.show?.original_title,\n      originalData?.show?.title_en,\n      originalData?.show?.title_english,\n      \n      // Nested show title objects\n      originalData?.show?.title?.english,\n      originalData?.show?.title?.romaji,\n      originalData?.show?.title?.native,\n      originalData?.show?.title?.en,\n      \n      // Movie-specific nested fields\n      originalData?.movie?.title,\n      originalData?.movie?.name,\n      originalData?.movie?.en_title,\n      originalData?.movie?.original_title,\n      \n      // Alternative nested structures\n      media?.show?.title,\n      media?.show?.name,\n      media?.movie?.title,\n      media?.movie?.name,\n      \n      // International title variations\n      media?.titles?.en,\n      media?.titles?.english,\n      media?.titles?.original,\n      originalData?.titles?.en,\n      originalData?.titles?.english,\n      originalData?.titles?.original,\n      \n      // Last resort - use ID or any string field\n      media?.slug,\n      originalData?.slug,\n      String(media?.id || originalData?.id || '').replace(/[^a-zA-Z0-9\\s]/g, ' ')\n    ];\n\n    \n\n    // Find the first valid title\n    const primaryTitle = allPossibleTitleSources.find(title => \n      title && \n      typeof title === 'string' && \n      title.trim() !== '' && \n      title.toLowerCase() !== 'null' &&\n      title.toLowerCase() !== 'undefined'\n    );\n\n    \n\n    if (!primaryTitle || primaryTitle === 'Unknown Title') {\n      \n      \n      // Emergency fallback: try to construct title from any available data\n      const emergencyTitle = this.constructEmergencyTitle(media, originalData);\n      if (emergencyTitle) {\n        return {\n          romaji: emergencyTitle,\n          english: emergencyTitle,\n          native: emergencyTitle\n        };\n      }\n    }\n\n    // Now find specific variants for English and native titles\n    const englishCandidates = [\n      media?.en_title,\n      media?.title_en,\n      media?.title_english,\n      media?.english_name,\n      media?.title?.english,\n      media?.title?.en,\n      originalData?.en_title,\n      originalData?.title_en,\n      originalData?.title_english,\n      originalData?.show?.en_title,\n      originalData?.show?.title?.english,\n      originalData?.movie?.en_title,\n      primaryTitle // fallback\n    ];\n\n    const nativeCandidates = [\n      media?.original_title,\n      media?.title_original,\n      media?.native,\n      media?.title?.native,\n      media?.title?.original,\n      originalData?.original_title,\n      originalData?.title_original,\n      originalData?.show?.original_title,\n      originalData?.show?.title?.native,\n      originalData?.movie?.original_title,\n      primaryTitle // fallback\n    ];\n\n    const englishTitle = englishCandidates.find(title => \n      title && typeof title === 'string' && title.trim() !== ''\n    ) || primaryTitle || 'Unknown Title';\n\n    const nativeTitle = nativeCandidates.find(title => \n      title && typeof title === 'string' && title.trim() !== ''\n    ) || primaryTitle || 'Unknown Title';\n\n    // Smart romaji detection\n    let romajiTitle = primaryTitle || 'Unknown Title';\n    if (primaryTitle !== nativeTitle && /[a-zA-Z]/.test(primaryTitle)) {\n      romajiTitle = primaryTitle;\n    } else if (englishTitle !== primaryTitle) {\n      romajiTitle = englishTitle;\n    }\n\n    const result = {\n      romaji: romajiTitle,\n      english: englishTitle,\n      native: nativeTitle\n    };\n\n    \n    return result;\n  }\n\n  // NEW: Emergency title construction when all standard fields fail\n  constructEmergencyTitle(media, originalData) {\n    // Try to build a title from any available string data\n    const possibleSources = [\n      // Try any field that might contain a readable name\n      media?.slug?.replace(/[-_]/g, ' '),\n      originalData?.slug?.replace(/[-_]/g, ' '),\n      \n      // Check if there are any string fields that might be titles\n      ...Object.values(media || {}).filter(val => \n        typeof val === 'string' && \n        val.length > 2 && \n        val.length < 100 &&\n        !/^https?:\\/\\//.test(val) && // not a URL\n        !/^\\d+$/.test(val) && // not just numbers\n        !/^[a-f0-9-]{20,}$/.test(val) // not a hash/ID\n      ),\n      \n      ...Object.values(originalData || {}).filter(val => \n        typeof val === 'string' && \n        val.length > 2 && \n        val.length < 100 &&\n        !/^https?:\\/\\//.test(val) &&\n        !/^\\d+$/.test(val) &&\n        !/^[a-f0-9-]{20,}$/.test(val)\n      )\n    ];\n\n    const emergencyTitle = possibleSources[0];\n    if (emergencyTitle) {\n      // Clean it up\n      return emergencyTitle\n        .replace(/[-_]/g, ' ')\n        .replace(/\\s+/g, ' ')\n        .trim()\n        .replace(/\\b\\w/g, l => l.toUpperCase()); // Title case\n    }\n\n    return null;\n  }\n\n  // FIXED: Enhanced list entry transformation with proper movie handling\n  transformListEntry(simklEntry, mediaType) {\n    if (!simklEntry) return null;\n    \n    const show = simklEntry.show || simklEntry;\n    const statusRaw = simklEntry.status || simklEntry._status || show.status || null;\n\n    // Check if this is a movie\n    const isMovie = this.isMovieType(mediaType, show);\n\n    let progress = 0;\n    const watchedCandidates = [\n      simklEntry.watched_episodes_count,\n      simklEntry.watched_episodes,\n      simklEntry.episodes_watched,\n      show.watched_episodes_count,\n      show.watched_episodes\n    ];\n    \n    for (const w of watchedCandidates) {\n      if (w !== undefined && w !== null && w !== '') {\n        const n = Number(w);\n        if (!isNaN(n)) { \n          progress = n; \n          break; \n        }\n      }\n    }\n\n    // FIXED: Movie-specific progress handling\n    if (isMovie) {\n      // For movies, progress is either 0 or 1\n      if (progress > 0) {\n        progress = 1;\n      } else {\n        // Check if status indicates movie was watched\n        const watchedStatuses = ['completed', 'watching'];\n        if (watchedStatuses.includes(String(statusRaw).toLowerCase())) {\n          progress = 1;\n        }\n      }\n    } else {\n      // Handle TV shows with seasons (existing logic)\n      if ((!progress || progress === 0) && typeof simklEntry.seasons_watched === 'number') {\n        const totalEpisodes = (simklEntry.total_episodes_count ?? show.total_episodes_count ?? show.total_episodes ?? show.episodes) || 0;\n        const totalSeasons = show.seasons || 1;\n        if (totalEpisodes && totalSeasons) {\n          const perSeason = totalEpisodes / totalSeasons;\n          progress = Math.floor(simklEntry.seasons_watched * perSeason);\n        }\n      }\n    }\n\n    const mergedShow = Object.assign({}, show, {\n      total_episodes_count: simklEntry.total_episodes_count ?? show.total_episodes_count ?? show.total_episodes,\n      total_episodes: simklEntry.total_episodes_count ?? show.total_episodes\n    });\n    \n    const transformedMedia = this.transformMedia(mergedShow, mediaType);\n    \n    return {\n      id: transformedMedia?.id || null, \n      status: this.mapSimklStatusToAniList(statusRaw),\n      score: simklEntry.user_rating ?? simklEntry.rating ?? show.rating ?? 0,\n      progress: progress || 0,\n      media: transformedMedia\n    };\n  }\n\n  // FIXED: New helper method to properly detect movies\n  isMovieType(mediaType, mediaData) {\n    // First check the requested mediaType\n    if (mediaType) {\n      const upperType = String(mediaType).toUpperCase();\n      if (upperType === 'MOVIE' || upperType === 'MOVIES') {\n        return true;\n      }\n    }\n    \n    // Then check the media data itself\n    if (mediaData) {\n      const type = String(mediaData.type || mediaData.kind || '').toLowerCase();\n      return type === 'movie' || type === 'film' || type.includes('movie');\n    }\n    \n    return false;\n  }\n\n  // =================== UPDATE METHODS (Following MAL pattern) ===================\n async updateMediaListEntry(mediaId, updates, mediaType) {\n  try {  \n    const typeUpper = (mediaType || '').toString().toUpperCase();\n    const isMovieOrTv = typeUpper === 'MOVIE' || typeUpper === 'MOVIES' || typeUpper === 'TV' || typeUpper.includes('SHOW');\n    if (updates && updates._zUseTmdbId === true && isMovieOrTv) {\n      // Prefer explicit TMDb/IMDb ids for trending TMDb entries\n      let imdb = undefined;\n      try {\n        const cached = this.cache?.get(String(mediaId), { scope: 'mediaData' });\n        const media = cached?.media || cached || {};\n        imdb = media.idImdb || media.ids?.imdb;\n      } catch {}\n      return await this.updateMediaListEntryWithIds({ tmdb: mediaId, imdb }, updates, mediaType);\n    }\n    return await this.executeUpdate(mediaId, updates, mediaType);  \n  } catch (error) {  \n    throw this.createUserFriendlyError(error);  \n  }\n}\n\n  /**\n   * Update/create a Simkl list entry using explicit external identifiers (e.g., TMDb/IMDb).\n   * This is primarily used for TMDb trending items (movies/TV) where we don't have Simkl IDs.\n   *\n   * @param {{ tmdb?: number|string, imdb?: string, simkl?: number|string }} identifiers\n   * @param {object} updates\n   * @param {string} mediaType One of MOVIE/MOVIES/TV/ANIME\n   */\n  async updateMediaListEntryWithIds(identifiers, updates, mediaType) {\n    try {\n      await this.ensureValidToken();\n      const payload = this.buildUpdatePayloadFromIdentifiers(identifiers, updates, mediaType);\n      const typeUpper = (mediaType || '').toString().toUpperCase();\n      const isMovie = typeUpper === 'MOVIE' || typeUpper === 'MOVIES';\n\n      // Add to list (status)\n      if (updates.status !== undefined) {\n        await this.makeRequest({\n          url: `${this.baseUrl}/sync/add-to-list`,\n          method: 'POST',\n          headers: this.getHeaders({ type: 'update' }),\n          body: JSON.stringify(payload),\n          priority: 'high',\n          type: 'update'\n        });\n\n        // Enforce via ratings if score not provided\n        if (updates.score === undefined || updates.score === null) {\n          const statusMapped = this.mapAniListStatusToSimkl(updates.status);\n          // Do not send ratings for planning; ratings can imply \"seen\" on Simkl\n          if (statusMapped && statusMapped !== 'plantowatch') {\n            const statusToRating = { watching: 8, completed: 9, hold: 6, dropped: 3, plantowatch: 1 };\n            const derived = statusToRating[statusMapped];\n            if (derived) {\n              const ratingsPayload = this.buildUpdatePayloadFromIdentifiers(identifiers, { score: derived }, mediaType);\n              await this.makeRequest({\n                url: `${this.baseUrl}/sync/ratings`,\n                method: 'POST',\n                headers: this.getHeaders({ type: 'update' }),\n                body: JSON.stringify(ratingsPayload),\n                priority: 'high'\n              });\n            }\n          }\n        }\n      }\n\n      // Progress handling (movies only here; shows use watched_episodes in list payload already)\n      if (updates.progress !== undefined) {\n        if (isMovie) {\n          const watched = (parseInt(updates.progress) || 0) > 0;\n          const containerKey = 'movies';\n          const historyPayload = { [containerKey]: [{ ids: {} }] };\n          const item = historyPayload[containerKey][0];\n          if (identifiers?.tmdb) item.ids.tmdb = parseInt(identifiers.tmdb);\n          if (!item.ids.tmdb && identifiers?.imdb) item.ids.imdb = String(identifiers.imdb);\n          if (!item.ids.tmdb && !item.ids.imdb && identifiers?.simkl) item.ids.simkl = parseInt(identifiers.simkl);\n\n          await this.makeRequest({\n            url: `${this.baseUrl}/sync/history${watched ? '' : '/remove'}`,\n            method: 'POST',\n            headers: this.getHeaders({ type: 'update' }),\n            body: JSON.stringify(historyPayload),\n            priority: 'high'\n          });\n        }\n      }\n\n      // Invalidate caches\n      this.cache.invalidateScope('userData');\n\n      return {\n        id: null,\n        status: updates.status || null,\n        score: updates.score || 0,\n        progress: updates.progress || 0\n      };\n    } catch (error) {\n      throw this.createUserFriendlyError(error);\n    }\n  }\n\nasync executeUpdate(mediaId, updates, mediaType) {\n  const normalizedId = this.normalizeSimklId(mediaId);\n  console.log('[Simkl][Update] executeUpdate', { rawId: mediaId, normalizedId, updates, mediaType });\n  this.validateMediaId(normalizedId);\n  this.validateUpdates(updates);\n\n  await this.ensureValidToken();  \n  console.log('[Simkl][Update] token ensured');\n\n  const typeUpper = (mediaType || '').toString().toUpperCase();\n  const isMovie = typeUpper === 'MOVIE' || typeUpper === 'MOVIES';\n\n  // 1) Status -> watchlist + enforce via ratings mapping  \n  if (updates.status !== undefined) {  \n    const statusPayload = this.buildUpdatePayload(normalizedId, { status: updates.status }, mediaType);  \n    console.log('[Simkl][Update] watchlist status payload', statusPayload);  \n    await this.makeRequest({  \n      url: `${this.baseUrl}/sync/add-to-list`,  \n      method: 'POST',  \n      headers: this.getHeaders({ type: 'update' }),  \n      body: JSON.stringify(statusPayload),  \n      priority: 'high'  \n    });  \n    // Best-effort mirror: some accounts accept anime updates only under 'shows'  \n    if (!isMovie && typeUpper === 'ANIME') {  \n      const mirrorPayload = this.buildUpdatePayload(normalizedId, { status: updates.status }, mediaType, 'shows');  \n      await this.makeRequest({  \n        url: `${this.baseUrl}/sync/add-to-list`,  \n        method: 'POST',  \n        headers: this.getHeaders({ type: 'update' }),  \n        body: JSON.stringify(mirrorPayload),  \n        priority: 'normal'  \n      });  \n    }  \n    // Enforce status via ratings if no explicit score was provided  \n    if (updates.score === undefined || updates.score === null) {  \n      const statusMapped = this.mapAniListStatusToSimkl(updates.status);  \n      // Do not send ratings for planning; ratings can imply \"seen\" on Simkl\n      if (statusMapped && statusMapped !== 'plantowatch') {  \n        const statusToRating = { watching: 8, completed: 9, hold: 6, dropped: 3, plantowatch: 1 };  \n        const derived = statusToRating[statusMapped];  \n        if (derived) {  \n          const ratingsPayload = this.buildUpdatePayload(normalizedId, { score: derived }, mediaType);  \n          console.log('[Simkl][Update] derived ratings payload for status', ratingsPayload);  \n          await this.makeRequest({  \n            url: `${this.baseUrl}/sync/ratings`,  \n            method: 'POST',  \n            headers: this.getHeaders({ type: 'update' }),  \n            body: JSON.stringify(ratingsPayload),  \n            priority: 'high'  \n          });  \n        }  \n      }  \n    }  \n    // If marking a show as completed without progress, push remaining episodes to history  \n    if (!isMovie && String(updates.status).toUpperCase() === 'COMPLETED' && updates.progress === undefined) {  \n      try {  \n        let prevProgress = 0;  \n        let totalEpisodes = 0;  \n        prevProgress = Math.max(0, parseInt(existing?.progress) || 0);  \n        // Try to detect total episodes from existing media data  \n        const media = existing?.media;  \n        totalEpisodes = Math.max(0, parseInt(media?.episodes) || 0);  \n        if (!totalEpisodes) {  \n          const single = await this.fetchSimklData({ type: 'single', mediaType, mediaId: normalizedId, nocache: true });  \n          totalEpisodes = Math.max(0, parseInt(single?.MediaList?.media?.episodes) || 0);  \n        }  \n        if (totalEpisodes && totalEpisodes > prevProgress) {  \n          const episodes = [];  \n          for (let i = prevProgress + 1; i <= totalEpisodes && episodes.length < 1000; i++) episodes.push({ number: i });  \n          if (episodes.length) {  \n            const payload = { shows: [{ ids: { simkl: parseInt(normalizedId) }, episodes }] };  \n            await this.makeRequest({  \n              url: `${this.baseUrl}/sync/history`,  \n              method: 'POST',  \n              headers: this.getHeaders({ type: 'update' }),  \n              body: JSON.stringify(payload),  \n              priority: 'high'  \n            });  \n          }  \n        }  \n      } catch {}  \n    }  \n  }  \n\n  // 2) Score -> ratings  \n  if (updates.score !== undefined && updates.score !== null) {  \n    const rating = Math.max(0, Math.min(10, Math.round(updates.score)));  \n    if (rating > 0) {  \n      const ratingsPayload = this.buildUpdatePayload(normalizedId, { score: rating }, mediaType);  \n      console.log('[Simkl][Update] ratings payload', ratingsPayload);  \n      await this.makeRequest({  \n        url: `${this.baseUrl}/sync/ratings` ,  \n        method: 'POST',  \n        headers: this.getHeaders({ type: 'update' }),  \n        body: JSON.stringify(ratingsPayload),  \n        priority: 'high'  \n      });  \n      // Mirror ratings under 'shows' for anime as a fallback  \n      if (!isMovie && typeUpper === 'ANIME') {  \n        const mirrorRatings = this.buildUpdatePayload(normalizedId, { score: rating }, mediaType, 'shows');  \n        await this.makeRequest({  \n          url: `${this.baseUrl}/sync/ratings` ,  \n          method: 'POST',  \n          headers: this.getHeaders({ type: 'update' }),  \n          body: JSON.stringify(mirrorRatings),  \n          priority: 'normal'  \n        });  \n      }  \n    }  \n  }  \n\n  // 3) Progress -> history (movies only); shows keep watched_episodes via watchlist payload  \n  if (updates.progress !== undefined) {  \n    if (isMovie) {  \n      const watched = (parseInt(updates.progress) || 0) > 0;  \n      const containerKey = 'movies';  \n      const historyPayload = { [containerKey]: [{ ids: { simkl: parseInt(normalizedId) } }] };  \n      console.log('[Simkl][Update] history payload', historyPayload);  \n      await this.makeRequest({  \n        url: `${this.baseUrl}/sync/history${watched ? '' : '/remove'}`,  \n        method: 'POST',  \n        headers: this.getHeaders({ type: 'update' }),  \n        body: JSON.stringify(historyPayload),  \n        priority: 'high'  \n      });  \n    } else {  \n      // For shows, update progress via history episodes (incremental add/remove)  \n      let prevProgress = 0;  \n      let totalEpisodes = 0;  \n      let airedEpisodes = 0;  \n      try {  \n        prevProgress = Math.max(0, parseInt(existing?.progress) || 0);  \n        totalEpisodes = Math.max(0, parseInt(existing?.media?.episodes) || 0);  \n        const raw = existing?.media?._rawData || {};  \n        const airedCandidates = [raw.aired_episodes_count, raw.aired_episodes, raw.show?.aired_episodes_count, raw.show?.aired_episodes];  \n        for (const cand of airedCandidates) {  \n          const n = Number(cand);  \n          if (Number.isFinite(n) && n > 0) { airedEpisodes = n; break; }  \n        }  \n      } catch {}  \n      const requestedProgress = Math.max(0, parseInt(updates.progress) || 0);  \n      // Cap increases to the number of aired (or known total) episodes to match Simkl behavior  \n      const cap = Math.max(0, (airedEpisodes || totalEpisodes || requestedProgress));  \n      if (requestedProgress !== prevProgress) {  \n        let from, to, remove;  \n        if (requestedProgress > prevProgress) {  \n          remove = false;  \n          from = prevProgress + 1;  \n          to = Math.min(requestedProgress, cap);  \n        } else {  \n          remove = true;  \n          from = requestedProgress + 1;  \n          to = prevProgress;  \n        }  \n        const episodes = [];  \n        for (let i = from; i <= to && episodes.length < 1000; i++) episodes.push({ number: i });  \n        if (episodes.length > 0) {  \n          const payload = { shows: [{ ids: { simkl: parseInt(normalizedId) }, episodes }] };  \n          const url = `${this.baseUrl}/sync/history${remove ? '/remove' : ''}`;  \n          await this.makeRequest({  \n            url,  \n            method: 'POST',  \n            headers: this.getHeaders({ type: 'update' }),  \n            body: JSON.stringify(payload),  \n            priority: 'high'  \n          });  \n        }  \n      }  \n    }  \n  }  \n    \n  // Invalidate cache  \n  this.cache.invalidateByMedia(mediaId);  \n  this.cache.invalidateScope('userData');  \n    \n    \n  // Return AniList-compatible response  \n  return {  \n    id: null,  \n    status: updates.status || null,  \n    score: updates.score || 0,  \n    progress: updates.progress || 0  \n  };\n}\n\nbuildUpdatePayload(mediaId, updates, mediaType, forceContainerKey = null) { \n  console.log('[Simkl][Update] buildUpdatePayload', { mediaId, updates, mediaType, forceContainerKey });\n  const typeUpper = (mediaType || '').toString().toUpperCase();\n  const isMovie = typeUpper === 'MOVIE' || typeUpper === 'MOVIES';\n\n  // Simkl expects container 'shows' for anime/TV and 'movies' for movies  \n  const containerKey = forceContainerKey || (isMovie ? 'movies' : 'shows');  \n  const payload = { [containerKey]: [{ ids: {} }] };  \n\n  const item = payload[containerKey][0];  \n  item.type = isMovie ? 'movie' : 'show';  \n  // Prefer TMDb/IMDb if present in cache\n  try {\n    const cached = this.cache?.get(String(mediaId), { scope: 'mediaData' });\n    const media = cached?.media || cached || {};\n    const tmdb = media.idTmdb || media.ids?.tmdb;\n    const imdb = media.idImdb || media.ids?.imdb;\n    if (tmdb) item.ids.tmdb = parseInt(tmdb);\n    if (imdb) item.ids.imdb = imdb;\n  } catch {}\n  if (!item.ids.tmdb && !item.ids.imdb) {\n    const typeUpperLocal = typeUpper; // retain computed\n    const shouldUseTmdbFallback = (updates?._zUseTmdbId === true) && (isMovie || typeUpperLocal === 'TV' || typeUpperLocal.includes('SHOW'));\n    if (shouldUseTmdbFallback) {\n      item.ids.tmdb = parseInt(mediaId);\n    } else {\n      item.ids.simkl = parseInt(mediaId);\n    }\n  }\n  \n  console.log('[Simkl][Update] initial payload item', JSON.parse(JSON.stringify(item)));  \n    \n  // Add status using 'to' key instead of 'status' for list operations\n  if (updates.status !== undefined) {  \n    const originalStatus = updates.status;\n    const validatedStatus = this.validateAndConvertStatus(updates.status, mediaType);\n    item.to = validatedStatus;\n    \n    // Log status conversion for debugging\n    if (originalStatus !== validatedStatus) {\n      console.log(`[Simkl][Update] Status converted: ${originalStatus} \u2192 ${validatedStatus} (${isMovie ? 'movie' : 'show'})`);\n    }\n  } else if (!isMovie && updates.progress !== undefined) {  \n    // Ensure status present when only progress is updated on shows  \n    const prog = parseInt(updates.progress) || 0;  \n    item.to = prog > 0 ? 'watching' : 'plantowatch';  \n  }  \n  \n  // Add rating (Simkl uses 1-10 scale)  \n  if (updates.score !== undefined && updates.score !== null) {  \n    const score = Math.max(0, Math.min(10, Math.round(updates.score)));  \n    if (score > 0) {  \n      item.rating = score;  \n    }  \n  }  \n    \n  // Add progress  \n  if (updates.progress !== undefined) {  \n    if (isMovie) {  \n      // movies don't have episodes; treat any progress > 0 as watched flag  \n      item.watched = (parseInt(updates.progress) || 0) > 0;  \n    } else {  \n      const prog = parseInt(updates.progress) || 0;  \n      item.watched_episodes = prog;  \n      // If status not provided for shows, set a sensible default to satisfy API  \n      if (item.to === undefined) {  \n        item.to = prog > 0 ? 'watching' : 'plantowatch';  \n      }  \n    }  \n  }  \n    \n  console.log('[Simkl][Update] enriched item before cache', JSON.parse(JSON.stringify(item)));  \n  // Enrich with optional identifiers if available from cache (helps matching on server)  \n  try {  \n    const cached = this.cache?.get(String(mediaId), { scope: 'mediaData' });  \n    const media = cached?.media || cached;  \n    if (media?.idImdb) {  \n      item.ids.imdb = media.idImdb;  \n    }  \n    if (media?.idMal) {  \n      item.ids.mal = media.idMal;  \n    }  \n    const title = media?.title?.english || media?.title?.romaji || media?.title?.native;  \n    if (title) {  \n      item.title = title;  \n    }  \n    console.log('[Simkl][Update] enriched item after cache', JSON.parse(JSON.stringify(item)));  \n  } catch (e) { console.log('[Simkl][Update] cache enrich failed', e); }  \n\n  console.log('[Simkl][Update] final payload', JSON.parse(JSON.stringify(payload)));  \n  return payload;\n}\n\n  // Build payload using explicit identifiers, bypassing cache lookup\n  buildUpdatePayloadFromIdentifiers(identifiers, updates, mediaType, forceContainerKey = null) {\n    const typeUpper = (mediaType || '').toString().toUpperCase();\n    const isMovie = typeUpper === 'MOVIE' || typeUpper === 'MOVIES';\n    const containerKey = forceContainerKey || (isMovie ? 'movies' : 'shows');\n    const payload = { [containerKey]: [{ ids: {} }] };\n\n    const item = payload[containerKey][0];\n    item.type = isMovie ? 'movie' : 'show';\n\n    const tmdb = identifiers?.tmdb;\n    const imdb = identifiers?.imdb;\n    const simkl = identifiers?.simkl;\n    if (tmdb) item.ids.tmdb = parseInt(tmdb);\n    if (!item.ids.tmdb && imdb) item.ids.imdb = String(imdb);\n    if (!item.ids.tmdb && !item.ids.imdb && simkl) item.ids.simkl = parseInt(simkl);\n\n    // Try to enrich with metadata from cache (title/mal/imdb stabilization)\n    try {\n      const cached = this.cache?.get(String(tmdb || simkl), { scope: 'mediaData' })\n        || this.cache?.get(String(simkl || tmdb), { scope: 'mediaData' });\n      const media = cached?.media || cached || {};\n      if (!item.ids.imdb && media.idImdb) item.ids.imdb = media.idImdb;\n      if (media.idMal) item.ids.mal = media.idMal;\n      const title = media?.title?.english || media?.title?.romaji || media?.title?.native;\n      if (title) item.title = title;\n    } catch {}\n\n    // Status\n    if (updates.status !== undefined) {\n      const validatedStatus = this.validateAndConvertStatus(updates.status, mediaType);\n      item.to = validatedStatus;\n    } else if (!isMovie && updates.progress !== undefined) {\n      const prog = parseInt(updates.progress) || 0;\n      item.to = prog > 0 ? 'watching' : 'plantowatch';\n    }\n\n    // Rating\n    if (updates.score !== undefined && updates.score !== null) {\n      const score = Math.max(0, Math.min(10, Math.round(updates.score)));\n      if (score > 0) item.rating = score;\n    }\n\n    // Progress\n    if (updates.progress !== undefined) {\n      if (isMovie) {\n        item.watched = (parseInt(updates.progress) || 0) > 0;\n      } else {\n        const prog = parseInt(updates.progress) || 0;\n        item.watched_episodes = prog;\n        if (item.to === undefined) item.to = prog > 0 ? 'watching' : 'plantowatch';\n      }\n    }\n\n    return payload;\n  }\n\n// Build minimal payload for remove operations (only container and IDs)\nbuildRemovePayload(mediaId, mediaType, forceContainerKey = null) {\n  console.log('[Simkl][Remove] buildRemovePayload', { mediaId, mediaType, forceContainerKey });\n  const typeUpper = (mediaType || '').toString().toUpperCase();\n  const isMovie = typeUpper === 'MOVIE' || typeUpper === 'MOVIES';\n\n  // Simkl expects container 'shows' for anime/TV and 'movies' for movies  \n  const containerKey = forceContainerKey || (isMovie ? 'movies' : 'shows');  \n  const payload = { [containerKey]: [{ ids: {} }] };  \n\n  // Try to enrich with TMDb/IMDb from cache; fallback to simkl id\n  try {  \n    const cached = this.cache?.get(String(mediaId), { scope: 'mediaData' });  \n    const media = cached?.media || cached || {};  \n    const item = payload[containerKey][0];\n    const tmdb = media.idTmdb || media.ids?.tmdb;  \n    const imdb = media.idImdb || media.ids?.imdb;  \n    if (tmdb) item.ids.tmdb = parseInt(tmdb);  \n    if (imdb) item.ids.imdb = imdb;  \n    // Add title for better server-side matching\n    const title = media?.title?.english || media?.title?.romaji || media?.title?.native;  \n    if (title) {  \n      item.title = title;  \n    }  \n  } catch (e) { \n    console.log('[Simkl][Remove] cache enrich failed', e); \n  }\n  if (!payload[containerKey][0].ids.tmdb && !payload[containerKey][0].ids.imdb) {\n    payload[containerKey][0].ids.simkl = parseInt(mediaId);\n  }\n\n  console.log('[Simkl][Remove] minimal payload', JSON.parse(JSON.stringify(payload)));  \n  return payload;\n}\n\n// Remove media from user's Simkl list\nasync removeMediaListEntry(mediaId, mediaType) {\n  const normalizedId = this.normalizeSimklId(mediaId);\n  this.validateMediaId(normalizedId);\n  await this.ensureValidToken();\n  const typeUpper = (mediaType || '').toString().toUpperCase();\n  const isMovie = typeUpper === 'MOVIE' || typeUpper === 'MOVIES';\n  \n  console.log('[Simkl][Remove] Starting removal for', { normalizedId, mediaType, isMovie });\n  \n  // Use minimal payload for remove operations\n  const payload = this.buildRemovePayload(normalizedId, mediaType);\n\n  const requestParams = {  \n    url: `${this.baseUrl}/sync/remove-from-list`,  \n    method: 'POST',  \n    headers: this.getHeaders({ type: 'update' }),  \n    body: JSON.stringify(payload),  \n    priority: 'high'  \n  };  \n\n  try {  \n    console.log('[Simkl][Remove] Making primary remove request', requestParams);\n    await this.makeRequest(requestParams);  \n    console.log('[Simkl][Remove] Primary remove request successful');\n  } catch (error) {  \n    console.error('[Simkl][Remove] Primary remove request failed', error);\n    throw this.createUserFriendlyError(error);  \n  }  \n\n  // Best-effort fallback: if anime removal silently fails, retry with 'shows' container  \n  try {  \n    if (!isMovie && typeUpper === 'ANIME') {  \n      console.log('[Simkl][Remove] Attempting anime fallback with shows container');\n      const fallback = this.buildRemovePayload(normalizedId, mediaType, 'shows');  \n      await this.makeRequest({  \n        url: `${this.baseUrl}/sync/remove-from-list`,  \n        method: 'POST',  \n        headers: this.getHeaders({ type: 'update' }),  \n        body: JSON.stringify(fallback),  \n        priority: 'normal'  \n      });  \n      console.log('[Simkl][Remove] Anime fallback completed');\n    }  \n  } catch (fallbackError) {\n    console.warn('[Simkl][Remove] Fallback attempt failed', fallbackError);\n  }\n\n  // Also try removing from watchlist and history as comprehensive cleanup\n  try {\n    console.log('[Simkl][Remove] Attempting comprehensive cleanup');\n    \n    // Remove from watchlist (different endpoint)\n    await this.makeRequest({\n      url: `${this.baseUrl}/sync/watchlist/remove`,\n      method: 'POST',\n      headers: this.getHeaders({ type: 'update' }),\n      body: JSON.stringify(payload),\n      priority: 'normal'\n    });\n    \n    // Remove from history\n    await this.makeRequest({\n      url: `${this.baseUrl}/sync/history/remove`,\n      method: 'POST',\n      headers: this.getHeaders({ type: 'update' }),\n      body: JSON.stringify(payload),\n      priority: 'normal'\n    });\n    \n    // Remove ratings\n    await this.makeRequest({\n      url: `${this.baseUrl}/sync/ratings/remove`,\n      method: 'POST',\n      headers: this.getHeaders({ type: 'update' }),\n      body: JSON.stringify(payload),\n      priority: 'normal'\n    });\n    \n    console.log('[Simkl][Remove] Comprehensive cleanup completed');\n  } catch (cleanupError) {\n    console.warn('[Simkl][Remove] Comprehensive cleanup failed', cleanupError);\n    // Don't throw here as the main removal might have worked\n  }\n\n  // Invalidate cache after all operations\n  this.cache.invalidateByMedia(mediaId);  \n  this.cache.invalidateScope('userData');\n  \n  console.log('[Simkl][Remove] Removal process completed for', normalizedId);\n}\n  // =================== AUTH METHODS (Following MAL pattern) ===================\n\n  async makeObsidianRequest(code, redirectUri) {\n    const body = {\n      grant_type: 'authorization_code',\n      client_id: this.plugin.settings.simklClientId,\n      client_secret: this.plugin.settings.simklClientSecret || '',\n      redirect_uri: redirectUri,\n      code: code\n    };\n\n    try {\n      const requestFn = () => requestUrl({\n        url: this.tokenUrl,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n\n      const response = await this.requestQueue.add(requestFn, { priority: 'high', service: 'simkl', metadata: { type: 'auth' } });\n      \n      if (!response?.json || typeof response.json !== 'object') {\n        throw new Error('Invalid auth response from Simkl');\n      }\n\n      if (response.json.error) {\n        throw new Error(response.json.error_description || response.json.error);\n      }\n\n      console.log('[Simkl] Authentication successful');\n      return response.json;\n\n    } catch (error) {\n      console.error('[Simkl] Authentication failed:', error.message);\n      throw new Error(`Simkl authentication failed: ${error.message}`);\n    }\n  }\n\n  async ensureValidToken() {\n    if (!this.plugin.settings.simklAccessToken) {\n      throw new Error('Authentication required');\n    }\n    \n    // TODO: Implement token refresh logic if needed\n    return true;\n  }\n\n\n  // =================== MAPPING FUNCTIONS (Fixed) ===================\n\n  mapAniListStatusToSimkl(status) {\n    return this.aniListToSimklStatus[status] || status?.toLowerCase();\n  }\n\n  mapSimklStatusToAniList(status) {\n    return this.simklToAniListStatus[status] || status?.toUpperCase();\n  }\n\n  // Validate and convert status based on media type\n  validateAndConvertStatus(status, mediaType) {\n    if (!status) return 'plantowatch'; // Default to planning\n    \n    const typeUpper = String(mediaType || '').toUpperCase();\n    const isMovie = typeUpper === 'MOVIE' || typeUpper === 'MOVIES';\n    \n    // Convert AniList status to Simkl status\n    const simklStatus = this.mapAniListStatusToSimkl(status);\n    \n    if (isMovie) {\n      // Movies only support limited statuses\n      if (!this.validMovieStatuses.includes(simklStatus)) {\n        // Convert invalid movie statuses to valid ones\n        if (['watching', 'hold'].includes(simklStatus)) {\n          return 'plantowatch'; // Convert watching/on-hold to planning for movies\n        }\n        // Keep completed and dropped as-is\n        if (['completed', 'dropped'].includes(simklStatus)) {\n          return simklStatus;\n        }\n        // Default to planning for any other invalid status\n        return 'plantowatch';\n      }\n      return simklStatus;\n    } else {\n      // Shows support all statuses\n      if (!this.validShowStatuses.includes(simklStatus)) {\n        return 'plantowatch'; // Default to planning for invalid show statuses\n      }\n      return simklStatus;\n    }\n  }\n\n  // Get valid statuses for a specific media type\n  getValidStatusesForMediaType(mediaType) {\n    const typeUpper = String(mediaType || '').toUpperCase();\n    const isMovie = typeUpper === 'MOVIE' || typeUpper === 'MOVIES';\n    \n    if (isMovie) {\n      return this.validMovieStatuses;\n    } else {\n      return this.validShowStatuses;\n    }\n  }\n\n  // Get valid AniList statuses for a specific media type\n  getValidAniListStatusesForMediaType(mediaType) {\n    const simklStatuses = this.getValidStatusesForMediaType(mediaType);\n    return simklStatuses.map(status => this.simklToAniListStatus[status]).filter(Boolean);\n  }\n\n  // Check if a status is valid for a specific media type\n  isStatusValidForMediaType(status, mediaType) {\n    const validStatuses = this.getValidStatusesForMediaType(mediaType);\n    return validStatuses.includes(status);\n  }\n\n  // Check if an AniList status is valid for a specific media type\n  isAniListStatusValidForMediaType(aniListStatus, mediaType) {\n    const simklStatus = this.mapAniListStatusToSimkl(aniListStatus);\n    return this.isStatusValidForMediaType(simklStatus, mediaType);\n  }\n\n  // Get status conversion info for user feedback\n  getStatusConversionInfo(aniListStatus, mediaType) {\n    const typeUpper = String(mediaType || '').toUpperCase();\n    const isMovie = typeUpper === 'MOVIE' || typeUpper === 'MOVIES';\n    \n    if (isMovie) {\n      const simklStatus = this.mapAniListStatusToSimkl(aniListStatus);\n      if (!this.validMovieStatuses.includes(simklStatus)) {\n        const convertedStatus = this.validateAndConvertStatus(aniListStatus, mediaType);\n        return {\n          original: aniListStatus,\n          converted: this.simklToAniListStatus[convertedStatus],\n          reason: `Movies in Simkl only support: Planning, Completed, Dropped`,\n          note: `${aniListStatus} was converted to ${this.simklToAniListStatus[convertedStatus]}`\n        };\n      }\n    }\n    \n    return {\n      original: aniListStatus,\n      converted: aniListStatus,\n      reason: null,\n      note: null\n    };\n  }\n\n  // Get default status for a media type\n  getDefaultStatusForMediaType(mediaType) {\n    return 'plantowatch'; // Always default to planning for new entries\n  }\n\n  // Get default AniList status for a media type\n  getDefaultAniListStatusForMediaType(mediaType) {\n    const defaultSimklStatus = this.getDefaultStatusForMediaType(mediaType);\n    return this.simklToAniListStatus[defaultSimklStatus];\n  }\n  // FIXED: Enhanced format mapping with mediaType context\n  mapSimklFormat(type, mediaType) {\n    if (!type) {\n      // Use mediaType as fallback\n      if (mediaType) {\n        const upperType = String(mediaType).toUpperCase();\n        if (upperType === 'MOVIE' || upperType === 'MOVIES') return 'MOVIE';\n        if (upperType === 'TV') return 'TV';\n        if (upperType === 'ANIME') return 'TV';\n      }\n      return 'TV';\n    }\n    \n    const formatMap = {\n      'tv': 'TV',\n      'movie': 'MOVIE',\n      'film': 'MOVIE',\n      'special': 'SPECIAL',\n      'ova': 'OVA',\n      'ona': 'ONA',\n      'anime': 'TV'\n    };\n    \n    const lowerType = String(type).toLowerCase();\n    if (lowerType.includes('movie') || lowerType.includes('film')) {\n      return 'MOVIE';\n    }\n    \n    return formatMap[lowerType] || 'TV';\n  }\n\n  parseDate(dateString) {\n    if (!dateString) return null;\n    \n    try {\n      const date = new Date(dateString);\n      if (isNaN(date.getTime())) return null;\n      \n      return {\n        year: date.getFullYear(),\n        month: date.getMonth() + 1,\n        day: date.getDate()\n      };\n    } catch (error) {\n      return null;\n    }\n  }\n\n  // =================== VALIDATION METHODS (Following MAL pattern) ===================\n\n  validateConfig(config) {\n    if (!config || typeof config !== 'object') {\n      throw new Error('Configuration must be an object');\n    }\n\n    const normalized = { ...config };\n    if (!normalized.type) normalized.type = 'list';\n    if (normalized.mediaType) normalized.mediaType = normalized.mediaType.toUpperCase();\n    \n    if (normalized.page && (normalized.page < 1 || normalized.page > 1000)) {\n      throw new Error(`Invalid page: ${normalized.page}`);\n    }\n    \n    return normalized;\n  }\n\n  normalizeSimklId(mediaId) {\n    if (typeof mediaId === 'number') {\n      return Number.isFinite(mediaId) && mediaId > 0 ? mediaId : 0;\n    }\n    if (!mediaId) return 0;\n    // Accept strings like \"simkl:12345\", \"id=12345\", or mixed forms, pick the first valid group of digits\n    const str = String(mediaId);\n    // Prefer exact simkl id if encoded like simkl:123 or simkl=123\n    const simklMatch = str.match(/simkl[^0-9]*([0-9]+)/i);\n    if (simklMatch && simklMatch[1]) {\n      const val = parseInt(simklMatch[1], 10);\n      return Number.isFinite(val) && val > 0 ? val : 0;\n    }\n    // Fallback: first standalone number\n    const anyMatch = str.match(/([0-9]{1,})/);\n    if (anyMatch && anyMatch[1]) {\n      const val = parseInt(anyMatch[1], 10);\n      return Number.isFinite(val) && val > 0 ? val : 0;\n    }\n    return 0;\n  }\n\n  validateMediaId(mediaId) {\n    const id = this.normalizeSimklId(mediaId);\n    if (!id || id <= 0) {\n      throw new Error(`Invalid media ID: ${mediaId}`);\n    }\n  }\n  validateUpdates(updates) {\n    if (!updates || typeof updates !== 'object') {\n      throw new Error('Updates must be an object');\n    }\n    \n    if (Object.keys(updates).length === 0) {\n      throw new Error('At least one field must be updated');\n    }\n  }\n\n  requiresAuth(requestType) {\n    // Only search requests don't require authentication\n    return requestType !== 'search';\n  }\n\n  // =================== CACHE & URL METHODS ===================\n\n  createCacheKey(config) {\n    const sortedConfig = {};\n    Object.keys(config).sort().forEach(key => {\n      if (key !== 'accessToken' && key !== 'clientSecret') {\n        sortedConfig[key] = config[key];\n      }\n    });\n    return JSON.stringify(sortedConfig);\n  }\n\n  getCacheScope(requestType) {\n    const scopeMap = {\n      'stats': 'userData',\n      'single': 'mediaData',\n      'search': 'searchResults',\n      'list': 'userData'\n    };\n    return scopeMap[requestType] || 'userData';\n  }\n\n  buildFullUrl(baseUrl, params) {\n    if (!params || Object.keys(params).length === 0) return baseUrl;\n    const queryString = new URLSearchParams(params).toString();\n    return `${baseUrl}?${queryString}`;\n  }\n\n  getSimklUrl(mediaId, mediaType = 'ANIME') {\n    try {\n      this.validateMediaId(mediaId);\n      const typeUpper = (mediaType || 'ANIME').toString().toUpperCase();\n      \n      let segment = 'tv'; // default\n      if (typeUpper === 'ANIME') {\n        segment = 'anime';\n      } else if (typeUpper === 'MOVIE' || typeUpper === 'MOVIES' || typeUpper.includes('MOVIE')) {\n        segment = 'movies';\n      }\n      \n      return `https://simkl.com/${segment}/${mediaId}`;\n    } catch (error) {\n      throw error;\n    }\n  }\n  // =================== ERROR HANDLING (Simplified from original) ===================\n\n  createUserFriendlyError(error) {\n    const errorMessages = {\n      'auth': '\uD83D\uDD11 Authentication required. Please connect your Simkl account.',\n      'network': '\uD83C\uDF10 Connection issue. Please check your internet connection.',\n      'rate': '\uD83D\uDEA6 Too many requests. Please wait a moment.',\n      'server': '\uD83D\uDD27 Simkl servers are experiencing issues.',\n      'invalid': '\u26A0\uFE0F Invalid request. Please check your input.'\n    };\n    \n    let errorType = 'unknown';\n    const msg = error.message?.toLowerCase() || '';\n    \n    if (msg.includes('auth') || msg.includes('unauthorized')) {\n      errorType = 'auth';\n    } else if (msg.includes('rate limit')) {\n      errorType = 'rate';\n    } else if (msg.includes('network') || msg.includes('connection')) {\n      errorType = 'network';\n    } else if (msg.includes('server') || msg.includes('500')) {\n      errorType = 'server';\n    } else if (msg.includes('invalid') || msg.includes('400')) {\n      errorType = 'invalid';\n    }\n    \n    const userMessage = errorMessages[errorType] || '\u274C An unexpected error occurred.';\n    const friendlyError = new Error(userMessage);\n    friendlyError.type = errorType;\n    friendlyError.originalMessage = error.message;\n    \n    return friendlyError;\n  }\n\n  // =================== COMPATIBILITY METHODS (Following MAL pattern) ===================\n\n  async fetchSimklStats(config) {\n    return this.fetchSimklData({ ...config, type: 'stats' });\n  }\n\n  async fetchSimklList(config) {\n    return this.fetchSimklData(config);\n  }\n\n  async searchSimklMedia(config) {\n    const searchResults = await this.fetchSimklData({ ...config, type: 'search' });\n    \n    // Ensure search results have proper IDs for editing operations\n    if (config.ensureIds !== false) { // Default to true unless explicitly disabled\n      return await this.ensureSearchResultIds(searchResults, config.mediaType);\n    }\n    \n    return searchResults;\n  }\n\n  getMetrics() {\n    return { ...this.metrics };\n  }\n\n  // Fetch entries for computing distributions\n  async fetchUserListEntries(mediaType = 'ANIME') {\n    const resp = await this.fetchSimklData({ type: 'list', mediaType });\n    const entries = resp?.MediaListCollection?.lists?.flatMap(l => l.entries) || [];\n    return entries;\n  }\n\n  // Compute distributions from entries (replicated from MAL logic for parity)\n  aggregateDistributionsFromEntries(entries, typeLower) {\n    const result = {\n      statuses: [],\n      scores: [],\n      formats: [],\n      releaseYears: [],\n      genres: []\n    };\n  \n    const statusCounts = new Map();\n    const scoreCounts = new Map();\n    const formatCounts = new Map();\n    const yearCounts = new Map();\n    const genreSet = new Set();\n  \n    for (const entry of entries) {\n      const status = entry?.status;\n      if (status) {\n        statusCounts.set(status, (statusCounts.get(status) || 0) + 1);\n      }\n  \n      const rawScore = entry?.score;\n      if (typeof rawScore === 'number' && rawScore > 0) {\n        const scaled = Math.round(rawScore * 10);\n        scoreCounts.set(scaled, (scoreCounts.get(scaled) || 0) + 1);\n      }\n  \n      const format = entry?.media?.format;\n      if (format) {\n        formatCounts.set(format, (formatCounts.get(format) || 0) + 1);\n      }\n  \n      const year = entry?.media?.startDate?.year;\n      if (typeof year === 'number' && year > 0) {\n        yearCounts.set(year, (yearCounts.get(year) || 0) + 1);\n      }\n  \n      const genres = entry?.media?.genres || [];\n      for (const g of genres) {\n        if (typeof g === 'string' && g.trim()) genreSet.add(g);\n      }\n    }\n  \n    result.statuses = Array.from(statusCounts.entries())\n      .map(([status, count]) => ({ status, count }))\n      .sort((a, b) => b.count - a.count);\n  \n    result.scores = Array.from(scoreCounts.entries())\n      .map(([score, count]) => ({ score, count }))\n      .sort((a, b) => a.score - b.score);\n  \n    result.formats = Array.from(formatCounts.entries())\n      .map(([format, count]) => ({ format, count }))\n      .sort((a, b) => b.count - a.count);\n  \n    result.releaseYears = Array.from(yearCounts.entries())\n      .map(([releaseYear, count]) => ({ releaseYear, count }))\n      .sort((a, b) => b.releaseYear - a.releaseYear);\n  \n    result.genres = Array.from(genreSet);\n  \n    return result;\n  }\n\n  async attachSimklDistributions(user) {\n    try {\n      const [animeEntries, tvEntries, movieEntries] = await Promise.all([\n        this.fetchUserListEntries('ANIME'),\n        this.fetchUserListEntries('TV'),\n        this.fetchUserListEntries('MOVIE')\n      ]);\n      const animeAgg = this.aggregateDistributionsFromEntries(animeEntries, 'anime');\n      const tvAgg = this.aggregateDistributionsFromEntries(tvEntries, 'tv');\n      const movieAgg = this.aggregateDistributionsFromEntries(movieEntries, 'movie');\n\n      if (user?.statistics?.anime) {\n        Object.assign(user.statistics.anime, animeAgg);\n      }\n      if (user?.statistics?.tv) {\n        Object.assign(user.statistics.tv, tvAgg);\n      }\n      if (user?.statistics?.movie) {\n        Object.assign(user.statistics.movie, movieAgg);\n      }\n\n      // Apply fallback values similar to MAL implementation\n      const applyFallbacks = (entries, statsObj) => {\n        if (!statsObj) return;\n        if (!statsObj.count || statsObj.count === 0) {\n          statsObj.count = Array.isArray(entries) ? entries.length : 0;\n        }\n        if ((!statsObj.meanScore || statsObj.meanScore === 0) && Array.isArray(entries) && entries.length) {\n          const rated = entries.filter(e => typeof e.score === 'number' && e.score > 0);\n          if (rated.length) {\n            const avg10 = rated.reduce((sum, e) => sum + e.score, 0) / rated.length;\n            statsObj.meanScore = Math.round(avg10 * 10) / 10;\n          }\n        }\n      };\n\n      applyFallbacks(animeEntries, user?.statistics?.anime);\n      applyFallbacks(tvEntries, user?.statistics?.tv);\n      applyFallbacks(movieEntries, user?.statistics?.movie);\n\n    } catch (err) {\n      \n    }\n  }\n\n  // =================== MEDIA TYPE DETECTION (Following MAL pattern) ===================\n\n  async getMediaType(mediaId) {\n    // For Simkl, we need to determine if it's anime, TV, or movie\n    // Since we don't have a direct way to detect this from ID alone,\n    // we'll need to search across different types or use context\n    return 'anime'; // Default fallback\n  }\n\n\n\n}\n\nexport { SimklApi };", "import { Notice, requestUrl, Modal } from 'obsidian';\nimport { AuthModal } from './AuthModal.js';\n\n\n// AniList Authentication \n\nclass Authentication {\n  constructor(plugin) {\n    this.plugin = plugin;\n  }\n\n  static ANILIST_AUTH_URL  = 'https://anilist.co/api/v2/oauth/authorize';\n  static ANILIST_TOKEN_URL = 'https://anilist.co/api/v2/oauth/token';\n  static REDIRECT_URI      = 'https://anilist.co/api/v2/oauth/pin';\n\n  get isLoggedIn() {\n    return Boolean(this.plugin.settings.accessToken);\n  }\n\n  async loginWithFlow() {\n    if (!this.plugin.settings.clientId) {\n      new Notice('\u274C Please enter your Client ID first.', 5000);\n      return;\n    }\n\n    const { clientId } = this.plugin.settings;\n    const authUrl =\n      `${Authentication.ANILIST_AUTH_URL}?` +\n      new URLSearchParams({\n        client_id:     clientId,\n        redirect_uri:  Authentication.REDIRECT_URI,\n        response_type: 'code'\n      }).toString();\n\n    new Notice('\uD83D\uDD10 Opening AniList login page\u2026', 3000);\n    if (window.require) {\n      const { shell } = window.require('electron');\n      await shell.openExternal(authUrl);\n    } else {\n      window.open(authUrl, '_blank');\n    }\n\n    const modal = AuthModal.aniListPin(this.plugin.app, async (pin) => {\n  await this.exchangePin(pin);\n});\nmodal.open();\n  }\n\n  async logout() {\n    this.plugin.settings.accessToken  = '';\n    this.plugin.settings.tokenExpiry  = 0;\n    this.plugin.settings.authUsername = '';\n    this.plugin.settings.clientId     = '';\n    this.plugin.settings.clientSecret = '';\n    await this.plugin.saveSettings();\n    if (this.plugin.settings.authUsername) {\n   this.plugin.cache.invalidateByUser(this.plugin.settings.authUsername);\n }\n    this.plugin.cache.clear();\n    new Notice('\u2705 Logged out & cleared credentials.', 3000);\n  }\n\n  async exchangePin(pin) {\n    const body = new URLSearchParams({\n      grant_type:    'authorization_code',\n      code:          pin.trim(),\n      client_id:     this.plugin.settings.clientId,\n      client_secret: this.plugin.settings.clientSecret || '',\n      redirect_uri:  Authentication.REDIRECT_URI\n    });\n\n    const headers = {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept:         'application/json'\n    };\n\n    try {\n      const res = await this.plugin.requestQueue.add(() =>\n        requestUrl({\n          url:    Authentication.ANILIST_TOKEN_URL,\n          method: 'POST',\n          headers,\n          body:   body.toString()\n        })\n      );\n\n      const data = res.json;\n      if (!data?.access_token) {\n        throw new Error(data.error_description || 'No token returned');\n      }\n\n      this.plugin.settings.accessToken = data.access_token;\n      if (data.expires_in) {\n        this.plugin.settings.tokenExpiry = Date.now() + data.expires_in * 1000;\n      }\n      await this.plugin.saveSettings();\n      this.plugin.cache.invalidateByUser(await this.getAuthenticatedUsername());\n\n      await this.forceScoreFormat();\n      if (typeof this.plugin.updateDefaultApiSourceBasedOnAuth === 'function') {\n  await this.plugin.updateDefaultApiSourceBasedOnAuth();\n}\n      new Notice('\u2705 Authenticated successfully!', 4000);\n    } catch (err) {\n      new Notice(`\u274C Auth failed: ${err.message}`, 5000);\n      throw err;\n    }\n  }\n\n  \n\n  async ensureValidToken() {\n    if (!this.isLoggedIn) throw new Error('Not authenticated');\n    return true;\n  }\n  \n  async forceScoreFormat() {\n  if (!this.plugin.settings.forceScoreFormat) return;\n  \n  await this.ensureValidToken();\n  \n  // First check current score format\n  const viewerQuery = `\n    query {\n      Viewer {\n        id\n        name\n        mediaListOptions {\n          scoreFormat\n        }\n      }\n    }\n  `;\n\n  try {\n    const currentResponse = await this.plugin.requestQueue.add(() =>\n      requestUrl({\n        url: 'https://graphql.anilist.co',\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.plugin.settings.accessToken}`\n        },\n        body: JSON.stringify({ query: viewerQuery })\n      })\n    );\n\n    const currentFormat = currentResponse.json?.data?.Viewer?.mediaListOptions?.scoreFormat;\n    console.log('Current score format:', currentFormat);\n\n    if (currentFormat === 'POINT_10') {\n      console.log('Score format already set to POINT_10');\n      return;\n    }\n    \n    const mutation = `\n      mutation {\n        UpdateUser(scoreFormat: POINT_10) {\n          id\n          name\n          mediaListOptions {\n            scoreFormat\n          }\n        }\n      }\n    `;\n\n    const response = await this.plugin.requestQueue.add(() =>\n      requestUrl({\n        url: 'https://graphql.anilist.co',\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.plugin.settings.accessToken}`\n        },\n        body: JSON.stringify({ query: mutation })\n      })\n    );\n\n    if (response.json?.errors) {\n      const errorMsg = response.json.errors[0]?.message || 'Unknown error';\n      console.error('UpdateUser error:', response.json.errors);\n      throw new Error(errorMsg);\n    }\n    \n    const updatedFormat = response.json?.data?.UpdateUser?.mediaListOptions?.scoreFormat;\n    console.log('Updated score format to:', updatedFormat);\n    \n    if (updatedFormat === 'POINT_10') {\n      new Notice('\u2705 Score format updated to 0-10 scale', 3000);\n      \n    } else {\n      throw new Error(`Score format not updated properly. Got: ${updatedFormat}`);\n    }\n    \n  } catch (err) {\n    \n    new Notice(`\u274C Could not update score format: ${err.message}`, 5000);\n  }\n}\n\n  async getAuthenticatedUsername() {\n    await this.ensureValidToken();\n\n    const query = `query { Viewer { name } }`;\n    const res = await this.plugin.requestQueue.add(() =>\n      requestUrl({\n        url:     'https://graphql.anilist.co',\n        method:  'POST',\n        headers: {\n          'Content-Type':  'application/json',\n          Authorization:   `Bearer ${this.plugin.settings.accessToken}`\n        },\n        body: JSON.stringify({ query })\n      })\n    );\n\n    const name = res.json?.data?.Viewer?.name;\n    if (!name) throw new Error('Could not fetch username');\n    this.plugin.settings.authUsername = name;\n    await this.plugin.saveSettings();\n    return name;\n  }\n}\n\nexport { Authentication };", "import { Modal } from 'obsidian';\n\nclass AuthModal extends Modal {\n  constructor(app, config) {\n    super(app);\n    this.config = {\n      title: '\uD83D\uDD11 Authentication',\n      description: 'Enter your credentials',\n      placeholder: 'Enter value',\n      submitText: 'Save',\n      inputType: 'text',\n      extraClasses: [],\n      showReady: false,\n      ...config\n    };\n    this.onSubmit = config.onSubmit;\n  }\n\n  onOpen() {\n    const { contentEl } = this;\n    contentEl.addClass('auth-modal', ...this.config.extraClasses);\n    \n    this.createHeader();\n    this.createInput();\n    this.createButtons();\n    this.setupEventHandlers();\n    \n    setTimeout(() => this.input.focus(), 100);\n  }\n\n  createHeader() {\n    this.contentEl.createEl('h2', { text: this.config.title });\n    \n    const desc = this.contentEl.createEl('p', { cls: 'auth-modal-desc' });\n    desc.setText(this.config.description);\n  }\n\n  createInput() {\n    const inputContainer = this.contentEl.createEl('div', { cls: 'auth-input-container' });\n    \n    this.input = inputContainer.createEl('input', {\n      type: this.config.inputType,\n      placeholder: this.config.placeholder,\n      cls: `auth-input ${this.config.inputType === 'text' && this.config.extraClasses.includes('pin-modal') ? 'pin-input' : ''}`\n    });\n  }\n\n  createButtons() {\n    const buttonContainer = this.contentEl.createEl('div', { cls: 'auth-button-container' });\n    \n    this.submitButton = buttonContainer.createEl('button', {\n      text: this.config.submitText,\n      cls: `mod-cta auth-button ${this.config.showReady ? 'submit-button' : ''}`\n    });\n    \n    this.cancelButton = buttonContainer.createEl('button', {\n      text: 'Cancel',\n      cls: 'auth-button'\n    });\n  }\n\n  setupEventHandlers() {\n    const closeModal = () => this.close();\n    \n    this.submitButton.addEventListener('click', () => {\n      const value = this.input.value.trim();\n      if (value) {\n        this.onSubmit(value);\n        closeModal();\n      }\n    });\n    \n    this.cancelButton.addEventListener('click', closeModal);\n    \n    this.input.addEventListener('keypress', (e) => {\n      if (e.key === 'Enter') {\n        this.submitButton.click();\n      }\n    });\n    \n    if (this.config.showReady) {\n      this.input.addEventListener('input', (e) => {\n        const value = e.target.value.trim();\n        this.submitButton.classList.toggle('ready', !!value);\n      });\n    }\n  }\n\n  // Static factory methods for convenience\n  static clientId(app, onSubmit) {\n    return new AuthModal(app, {\n      title: '\uD83D\uDD11 Enter Client ID',\n      description: 'Enter your application Client ID',\n      placeholder: 'Client ID',\n      onSubmit\n    });\n  }\n\n  static clientSecret(app, onSubmit) {\n    return new AuthModal(app, {\n      title: '\uD83D\uDD10 Enter Client Secret',\n      description: 'Enter your application Client Secret',\n      placeholder: 'Client Secret',\n      inputType: 'password',\n      onSubmit\n    });\n  }\n\n  // AniList PIN modal\n  static aniListPin(app, onSubmit) {\n    return new AuthModal(app, {\n      title: '\uD83D\uDD13 AniList Authentication',\n      description: 'Paste the PIN code from the browser:',\n      placeholder: 'Paste PIN code here',\n      submitText: '\u2705 Complete Authentication',\n      extraClasses: ['pin-modal'],\n      showReady: true,\n      onSubmit\n    });\n  }\n\n  // MAL callback URL modal\n  static malCallback(app, onSubmit) {\n    return new AuthModal(app, {\n      title: '\uD83D\uDD13 MAL Authentication',\n      description: 'Paste the FULL callback URL from the browser:',\n      placeholder: 'Paste callback URL here',\n      submitText: '\u2705 Complete Authentication',\n      extraClasses: ['pin-modal'],\n      showReady: true,\n      onSubmit\n    });\n  }\n}\n\nexport { AuthModal };", "import { Notice, requestUrl } from 'obsidian';\nimport { AuthModal } from './AuthModal.js';\n\n\nclass MALAuthentication {\n  constructor(plugin) {\n    this.plugin = plugin;\n  }\n\n  static MAL_AUTH_URL = 'https://myanimelist.net/v1/oauth2/authorize';\n  static MAL_TOKEN_URL = 'https://myanimelist.net/v1/oauth2/token';\n  static MAL_USER_URL = 'https://api.myanimelist.net/v2/users/@me';\n\n  get isLoggedIn() {\n    return Boolean(this.plugin.settings.malAccessToken && this.isTokenValid());\n  }\n\n  makeVerifier() {\n    const arr = new Uint8Array(32);\n    \n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      try {\n        crypto.getRandomValues(arr);\n      } catch (e) {\n        console.log('[MAL-AUTH] crypto.getRandomValues failed, using Math.random fallback', e);\n        for (let i = 0; i < arr.length; i++) {\n          arr[i] = Math.floor(Math.random() * 256);\n        }\n      }\n    } else {\n      console.log('[MAL-AUTH] crypto.getRandomValues not available, using Math.random');\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = Math.floor(Math.random() * 256);\n      }\n    }\n    \n    const verifier = btoa(String.fromCharCode(...arr))\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=/g, '')\n      .substring(0, 128);\n    \n    return verifier;\n  }\n\n  makeChallenge(verifier) {\n    return verifier;\n  }\n\n  generateState() {\n    if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n      try {\n        return crypto.randomUUID();\n      } catch (e) {\n        console.log('[MAL-AUTH] crypto.randomUUID failed, using fallback', e);\n      }\n    }\n    \n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < 32; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  async loginWithFlow() {\n    if (!this.plugin.settings.malClientId) {\n      new Notice('\u274C Please enter your MAL Client ID first.', 5000);\n      return;\n    }\n    \n    if (this.isTokenValid()) {\n      new Notice('Already authenticated with MyAnimeList', 3000);\n      return;\n    }\n\n    this.verifier = this.makeVerifier();\n    const challenge = this.makeChallenge(this.verifier);\n    const state = this.generateState();\n\n    this.authState = state;\n\n    const params = new URLSearchParams({\n      response_type: 'code',\n      client_id: this.plugin.settings.malClientId,\n      redirect_uri: 'http://localhost:8080/callback',\n      code_challenge: challenge,\n      code_challenge_method: 'plain',\n      state: state\n    });\n\n    const authUrl = `${MALAuthentication.MAL_AUTH_URL}?${params.toString()}`;\n\n    new Notice('\uD83D\uDD10 Opening MyAnimeList login page\u2026', 3000);\n    if (window.require) {\n      const { shell } = window.require('electron');\n      await shell.openExternal(authUrl);\n    } else {\n      window.open(authUrl, '_blank');\n    }\n\n    const modal = AuthModal.malCallback(this.plugin.app, async (callbackUrl) => {\n  const code = this.extractAuthCode(callbackUrl);\n  if (!code) {\n    new Notice('\u274C Could not extract authorization code from URL', 5000);\n    return;\n  }\n  await this.exchangeCodeForToken(code);\n});\nmodal.open();\nreturn;\n  }\n\n  extractAuthCode(input) {\n    const trimmedInput = input.trim();\n    \n    if (!trimmedInput.includes('://') && !trimmedInput.includes('?') && !trimmedInput.includes('&')) {\n      if (/^[A-Za-z0-9_-]{20,}$/.test(trimmedInput)) {\n        return trimmedInput;\n      }\n    }\n    \n    let url;\n    try {\n      if (trimmedInput.startsWith('?')) {\n        url = new URL('http://localhost' + trimmedInput);\n      } else if (trimmedInput.includes('://')) {\n        url = new URL(trimmedInput);\n      } else {\n        const codeMatch = trimmedInput.match(/[?&]code=([^&\\s]+)/);\n        if (codeMatch) {\n          return decodeURIComponent(codeMatch[1]);\n        }\n        return null;\n      }\n    } catch (e) {\n      const codeMatch = trimmedInput.match(/[?&]code=([^&\\s]+)/);\n      if (codeMatch) {\n        return decodeURIComponent(codeMatch[1]);\n      }\n      return null;\n    }\n    \n    const code = url.searchParams.get('code');\n    if (code) {\n      return decodeURIComponent(code);\n    }\n    \n    const codeMatch = trimmedInput.match(/[?&]code=([^&\\s]+)/);\n    if (codeMatch) {\n      return decodeURIComponent(codeMatch[1]);\n    }\n    \n    return null;\n  }\n\n  async exchangeCodeForToken(code) {\n    if (!code || code.length < 10) {\n      throw new Error('Invalid authorization code');\n    }\n\n    new Notice('Exchanging authorization code for tokens\u2026',6000);\n\n    const body = new URLSearchParams({\n      client_id: this.plugin.settings.malClientId,\n      code: code,\n      code_verifier: this.verifier,\n      grant_type: 'authorization_code',\n      redirect_uri: 'http://localhost:8080/callback'\n    });\n\n    if (this.plugin.settings.malClientSecret && this.plugin.settings.malClientSecret.trim()) {\n      body.append('client_secret', this.plugin.settings.malClientSecret.trim());\n    }\n\n    try {\n      const res = await this.plugin.requestQueue.add(() =>\n        requestUrl({\n          url: MALAuthentication.MAL_TOKEN_URL,\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          body: body.toString(),\n          throw: false\n        })\n      );\n\n      if (res.status < 200 || res.status >= 300) {\n        const errorText = res.text || JSON.stringify(res.json) || 'Unknown error';\n        \n        let errorMsg = `Token exchange failed (HTTP ${res.status})`;\n        \n        try {\n          const errorData = res.json || (res.text ? JSON.parse(res.text) : {});\n          \n          if (errorData.error) {\n            errorMsg += `: ${errorData.error}`;\n            if (errorData.error_description) {\n              errorMsg += ` - ${errorData.error_description}`;\n            }\n          }\n          \n          if (errorData.error === 'invalid_client') {\n            errorMsg += '\\n\\nTip: Check your Client ID and Secret in settings. For apps without a secret, leave the Client Secret field empty.';\n          } else if (errorData.error === 'invalid_request') {\n            errorMsg += '\\n\\nTip: Ensure your Redirect URI exactly matches what\\'s registered in your MAL app settings.';\n          } else if (errorData.error === 'invalid_grant') {\n            errorMsg += '\\n\\nTip: The authorization code may have expired or been used already. Please try authenticating again.';\n          }\n        } catch (parseError) {\n          errorMsg += `: ${errorText}`;\n        }\n        \n        throw new Error(errorMsg);\n      }\n\n      let data;\n      try {\n        data = res.json || (res.text ? JSON.parse(res.text) : null);\n      } catch (jsonError) {\n        throw new Error('Invalid response from MyAnimeList server');\n      }\n\n      if (!data.access_token) {\n        throw new Error('No access token received from MyAnimeList');\n      }\n\n      this.plugin.settings.malAccessToken = data.access_token;\n      this.plugin.settings.malRefreshToken = data.refresh_token;\n      this.plugin.settings.malTokenExpiry = Date.now() + (data.expires_in * 1000);\n      await this.plugin.saveSettings();\n      this.plugin.cache.invalidateByUser(this.plugin.settings.malUserInfo?.name);\n\n      try {\n        await this.fetchUserInfo();\n        new Notice(`\u2705 Successfully authenticated with MAL! Welcome ${this.plugin.settings.malUserInfo?.name || 'user'} \uD83C\uDF89`, 4000);\n      } catch (userError) {\n        console.log('[MAL-AUTH] Failed to fetch user info but auth succeeded', userError);\n        new Notice('\u2705 Authentication successful! \uD83C\uDF89', 4000);\n      }\n     if (typeof this.plugin.updateDefaultApiSourceBasedOnAuth === 'function') {\n  await this.plugin.updateDefaultApiSourceBasedOnAuth();\n}\n    } catch (err) {\n      new Notice(`\u274C MAL Auth failed: ${err.message}`, 5000);\n      throw err;\n    }\n  }\n\n  async fetchUserInfo() {\n    const res = await this.plugin.requestQueue.add(() =>\n      requestUrl({\n        url: MALAuthentication.MAL_USER_URL,\n        method: 'GET',\n        headers: { \n          'Authorization': `Bearer ${this.plugin.settings.malAccessToken}`\n        },\n        throw: false\n      })\n    );\n    \n    if (res.status < 200 || res.status >= 300) {\n      throw new Error(`Could not fetch user info (HTTP ${res.status})`);\n    }\n    \n    this.plugin.settings.malUserInfo = res.json || (res.text ? JSON.parse(res.text) : null);\n    await this.plugin.saveSettings();\n  }\n\n  async refreshAccessToken() {\n    if (!this.plugin.settings.malRefreshToken) {\n      throw new Error('No refresh token available');\n    }\n    \n    const body = new URLSearchParams({\n      client_id: this.plugin.settings.malClientId,\n      refresh_token: this.plugin.settings.malRefreshToken,\n      grant_type: 'refresh_token'\n    });\n\n    if (this.plugin.settings.malClientSecret && this.plugin.settings.malClientSecret.trim()) {\n      body.append('client_secret', this.plugin.settings.malClientSecret.trim());\n    }\n\n    const res = await this.plugin.requestQueue.add(() =>\n      requestUrl({\n        url: MALAuthentication.MAL_TOKEN_URL,\n        method: 'POST',\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n        body: body.toString(),\n        throw: false\n      })\n    );\n\n    if (res.status < 200 || res.status >= 300) {\n      const errorText = res.text || JSON.stringify(res.json) || 'Unknown error';\n      throw new Error(`Token refresh failed (HTTP ${res.status}): ${errorText}`);\n    }\n\n    const data = res.json || (res.text ? JSON.parse(res.text) : null);\n    this.plugin.settings.malAccessToken = data.access_token;\n    this.plugin.settings.malRefreshToken = data.refresh_token || this.plugin.settings.malRefreshToken;\n    this.plugin.settings.malTokenExpiry = Date.now() + (data.expires_in * 1000);\n    await this.plugin.saveSettings();\n  }\n\n  isTokenValid() {\n    return !!(this.plugin.settings.malAccessToken && \n              this.plugin.settings.malTokenExpiry && \n              Date.now() < (this.plugin.settings.malTokenExpiry - 5 * 60 * 1000));\n  }\n\n  async checkTokenExpiry() {\n    if (this.isTokenValid()) return;\n    if (!this.plugin.settings.malRefreshToken) {\n      console.log('[MAL-AUTH] Token expired and no refresh token available');\n      return;\n    }\n    \n    try {\n      await this.refreshAccessToken();\n      console.log('[MAL-AUTH] Token automatically refreshed');\n    } catch (e) {\n      console.error('[MAL-AUTH] Automatic token refresh failed', e);\n      new Notice('MAL authentication expired. Please re-authenticate.', 5000);\n    }\n  }\n\n  async logout() {\n    this.plugin.settings.malAccessToken = '';\n    this.plugin.settings.malRefreshToken = '';\n    this.plugin.settings.malTokenExpiry = null;\n    this.plugin.settings.malUserInfo = null;\n    this.plugin.settings.malClientId = '';\n    this.plugin.settings.malClientSecret = '';\n    await this.plugin.saveSettings();\n    if (this.plugin.settings.malUserInfo?.name) {\n    this.plugin.cache.invalidateByUser(this.plugin.settings.malUserInfo.name);\n   }\n    \n   this.plugin.cache.clear('malData');\n   this.plugin.cache.clear();\n    new Notice('\u2705 Logged out from MyAnimeList & cleared credentials.', 3000);\n  }\n\n  \n\n  async ensureValidToken() {\n    if (!this.isLoggedIn) throw new Error('Not authenticated with MyAnimeList');\n    await this.checkTokenExpiry();\n    return true;\n  }\n  \n  async getAuthenticatedUsername() {\n    await this.ensureValidToken();\n\n    if (!this.plugin.settings.malUserInfo) {\n      await this.fetchUserInfo();\n    }\n\n    const name = this.plugin.settings.malUserInfo?.name;\n    if (!name) throw new Error('Could not fetch MAL username');\n    return name;\n  }\n\n  getAuthHeaders() { \n    return this.isTokenValid() ? { Authorization: `Bearer ${this.plugin.settings.malAccessToken}` } : null; \n  }\n  \n  isAuthenticated() { \n    return this.isTokenValid(); \n  }\n  \n  getUserInfo() { \n    return this.plugin.settings.malUserInfo; \n  }\n}\n\nexport { MALAuthentication };", "import { Notice, requestUrl } from 'obsidian';\nimport { SimklPinModal } from './SimklPinModal.js';\n\n\nclass SimklAuthentication {\n  constructor(plugin) {\n    this.plugin = plugin;\n    this.pollInterval = null;\n  }\n\n  static SIMKL_PIN_URL = 'https://api.simkl.com/oauth/pin';\n  static SIMKL_PIN_CHECK_URL = 'https://api.simkl.com/oauth/pin/';\n  static SIMKL_USER_URL = 'https://api.simkl.com/users/settings';\n\n  get isLoggedIn() {\n    return Boolean(this.plugin.settings.simklAccessToken);\n  }\n\n  get hasRequiredCredentials() {\n    return Boolean(this.plugin.settings.simklClientId && this.plugin.settings.simklClientSecret);\n  }\n\n  async loginWithFlow() {\n    if (!this.plugin.settings.simklClientId) {\n      new Notice('\u274C Please enter your SIMKL Client ID first.', 5000);\n      return;\n    }\n\n    if (!this.plugin.settings.simklClientSecret) {\n      new Notice('\u274C Please enter your SIMKL Client Secret first.', 5000);\n      return;\n    }\n\n    if (this.isLoggedIn) {\n      new Notice('Already authenticated with SIMKL', 3000);\n      return;\n    }\n\n    try {\n      // Step 1: Request device code\n      const pinUrl = `${SimklAuthentication.SIMKL_PIN_URL}?client_id=${encodeURIComponent(this.plugin.settings.simklClientId)}&redirect_uri=${encodeURIComponent('urn:ietf:wg:oauth:2.0:oob')}`;\n      \n      const deviceResponse = await requestUrl({\n        url: pinUrl,\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'simkl-api-key': this.plugin.settings.simklClientId\n        },\n        throw: false\n      });\n\n      if (deviceResponse.status < 200 || deviceResponse.status >= 300) {\n        throw new Error(`PIN request failed: HTTP ${deviceResponse.status}`);\n      }\n\n      const deviceData = deviceResponse.json;\n      \n      if (!deviceData.user_code) {\n        throw new Error('Invalid response: missing user_code');\n      }\n\n      // Step 2: Open browser to PIN page\n      new Notice('\uD83D\uDD10 Opening SIMKL PIN page\u2026', 3000);\n      const pinPageUrl = deviceData.verification_url || 'https://simkl.com/pin';\n      \n      if (window.require) {\n        const { shell } = window.require('electron');\n        await shell.openExternal(pinPageUrl);\n      } else {\n        window.open(pinPageUrl, '_blank');\n      }\n\n      /** Step 3: Show PIN in modal and start polling\n      const modal = new SimklPinModal(this.plugin.app, deviceData, async () => {\n        // User clicked cancel\n        this.stopPolling();\n      });\n      modal.open();\n     */\n     \n      // Start polling for authentication\n      this.startPolling(deviceData);\n\n    } catch (error) {\n      console.error('SIMKL authentication failed:', error);\n      new Notice(`\u274C Authentication failed: ${error.message}`, 8000);\n    }\n  }\n\n  async startPolling(deviceData) {\n    const { user_code, interval = 5, expires_in = 900 } = deviceData;\n    const maxAttempts = Math.floor(expires_in / interval);\n    let attempts = 0;\n\n    const poll = async () => {\n      attempts++;\n      \n      if (attempts > maxAttempts) {\n        this.stopPolling();\n        new Notice('\u274C Authentication timeout. Please try again.', 8000);\n        return;\n      }\n\n      try {\n        const pollUrl = `${SimklAuthentication.SIMKL_PIN_CHECK_URL}${encodeURIComponent(user_code)}?client_id=${encodeURIComponent(this.plugin.settings.simklClientId)}`;\n\n        const response = await requestUrl({\n          url: pollUrl,\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json',\n            'simkl-api-key': this.plugin.settings.simklClientId\n          },\n          throw: false\n        });\n\n        const data = response.json || {};\n\n        if (data.access_token) {\n          // Success!\n          this.plugin.settings.simklAccessToken = data.access_token;\n          await this.plugin.saveSettings();\n          \n          // Close modal\n          document.querySelectorAll('.modal-container').forEach(modal => {\n            if (modal.querySelector('.simkl-pin-modal')) {\n              modal.remove();\n            }\n          });\n          \n          this.stopPolling();\n          \n          // Fetch user info\n          try {\n            await this.fetchUserInfo();\n            new Notice(`\u2705 Successfully authenticated with SIMKL! Welcome ${this.plugin.settings.simklUserInfo?.user?.name || 'user'} \uD83C\uDF89`, 4000);\n          } catch (userError) {\n            console.log('[SIMKL-AUTH] Failed to fetch user info but auth succeeded', userError);\n            new Notice('\u2705 Authentication successful! \uD83C\uDF89', 4000);\n          }\n          if (typeof this.plugin.updateDefaultApiSourceBasedOnAuth === 'function') {\n  await this.plugin.updateDefaultApiSourceBasedOnAuth();\n}\n          return;\n        }\n\n        // Continue polling if no token yet\n        if (response.status === 404 || !data || Object.keys(data).length === 0) {\n          // User hasn't entered code yet, continue polling\n        }\n\n      } catch (error) {\n        console.error('Polling error:', error);\n      }\n    };\n\n    // Start polling\n    this.pollInterval = setInterval(poll, interval * 1000);\n    \n    // Do first poll after interval\n    setTimeout(poll, interval * 1000);\n  }\n\n  stopPolling() {\n    if (this.pollInterval) {\n      clearInterval(this.pollInterval);\n      this.pollInterval = null;\n    }\n  }\n\n  async fetchUserInfo() {\n    const headers = this.getAuthHeaders();\n    if (!headers) {\n      throw new Error('Not authenticated');\n    }\n\n    const res = await requestUrl({\n      url: SimklAuthentication.SIMKL_USER_URL,\n      method: 'GET',\n      headers,\n      throw: false\n    });\n    \n    if (res.status < 200 || res.status >= 300) {\n      throw new Error(`Could not fetch user info (HTTP ${res.status})`);\n    }\n    \n    this.plugin.settings.simklUserInfo = res.json;\n    await this.plugin.saveSettings();\n  }\n\n  async logout() {\n    this.plugin.settings.simklAccessToken = '';\n    this.plugin.settings.simklUserInfo = null;\n    this.plugin.settings.simklClientId = '';\n    this.plugin.settings.simklClientSecret = '';\n    await this.plugin.saveSettings();\n    \n    // Clear any SIMKL-specific cache if you have one\n    if (this.plugin.cache) {\n      this.plugin.cache.clear('simklData');\n    }\n    \n    new Notice('\u2705 Logged out from SIMKL & cleared credentials.', 3000);\n  }\n\n  async ensureValidToken() {\n    if (!this.isLoggedIn) throw new Error('Not authenticated with SIMKL');\n    if (!this.hasRequiredCredentials) throw new Error('Missing SIMKL client credentials');\n    return true;\n  }\n  \n  async getAuthenticatedUsername() {\n    await this.ensureValidToken();\n\n    if (!this.plugin.settings.simklUserInfo) {\n      await this.fetchUserInfo();\n    }\n\n    const name = this.plugin.settings.simklUserInfo?.user?.name;\n    if (!name) throw new Error('Could not fetch SIMKL username');\n    return name;\n  }\n\n  getAuthHeaders() { \n    if (!this.isLoggedIn || !this.hasRequiredCredentials) return null;\n    \n    return { \n      'Authorization': `Bearer ${this.plugin.settings.simklAccessToken}`,\n      'simkl-api-key': this.plugin.settings.simklClientId,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }; \n  }\n  \n  isAuthenticated() { \n    return this.isLoggedIn && this.hasRequiredCredentials; \n  }\n  \n  getUserInfo() { \n    return this.plugin.settings.simklUserInfo; \n  }\n}\n\nexport { SimklAuthentication };", "import { Modal } from 'obsidian';\n\nclass SimklPinModal extends Modal {\n  constructor(app, deviceData, onCancel) {\n    super(app);\n    this.deviceData = deviceData;\n    this.onCancel = onCancel;\n    this.countdownInterval = null;\n  }\n\n  onOpen() {\n    const { contentEl } = this;\n    contentEl.empty();\n    contentEl.addClass('simkl-pin-modal');\n\n    contentEl.createEl('h2', { \n      text: '\uD83D\uDD10 SIMKL Authentication',\n      attr: { style: 'text-align: center; margin-bottom: 20px;' }\n    });\n\n    const instructionsEl = contentEl.createEl('div', {\n      attr: { style: 'text-align: center; padding: 20px;' }\n    });\n\n    instructionsEl.createEl('h3', { \n      text: 'Your PIN Code:',\n      attr: { style: 'margin-bottom: 15px;' }\n    });\n\n    // Large PIN code display\n    const codeEl = instructionsEl.createEl('div', {\n      text: this.deviceData.user_code,\n      cls: 'simkl-pin-code',\n      attr: { \n        style: 'font-size: 3em; font-weight: bold; color: var(--interactive-accent); margin: 30px 0; padding: 20px; border: 3px solid var(--interactive-accent); border-radius: 12px; font-family: monospace; letter-spacing: 5px;'\n      }\n    });\n\n    // Instructions\n    const steps = instructionsEl.createEl('ol', {\n      attr: { style: 'text-align: left; max-width: 400px; margin: 0 auto 20px auto;' }\n    });\n    steps.createEl('li', { text: 'The SIMKL PIN page should have opened in your browser' });\n    steps.createEl('li', { text: 'Enter the code shown above' });\n    steps.createEl('li', { text: 'This dialog will close automatically when complete' });\n\n    // Buttons\n    const buttonContainer = instructionsEl.createEl('div', {\n      attr: { style: 'margin-top: 20px;' }\n    });\n\n    const copyButton = buttonContainer.createEl('button', {\n      text: '\uD83D\uDCCB Copy Code',\n      cls: 'mod-cta',\n      attr: { style: 'margin: 5px;' }\n    });\n\n    const cancelButton = buttonContainer.createEl('button', {\n      text: 'Cancel',\n      attr: { style: 'margin: 5px;' }\n    });\n\n    // Countdown\n    const countdownEl = instructionsEl.createEl('div', {\n      attr: { style: 'margin-top: 15px; font-size: 0.9em; color: var(--text-muted);' }\n    });\n\n    // Event handlers\n    copyButton.onclick = () => {\n      navigator.clipboard.writeText(this.deviceData.user_code);\n      new Notice('\uD83D\uDCCB Code copied to clipboard!');\n    };\n\n    cancelButton.onclick = () => {\n      this.close();\n      if (this.onCancel) this.onCancel();\n      new Notice('Authentication cancelled.');\n    };\n\n    // Start countdown\n    let timeLeft = this.deviceData.expires_in || 900;\n    const updateCountdown = () => {\n      const minutes = Math.floor(timeLeft / 60);\n      const seconds = timeLeft % 60;\n      countdownEl.textContent = `\u23F0 Code expires in: ${minutes}:${seconds.toString().padStart(2, '0')}`;\n      \n      if (timeLeft > 0) {\n        timeLeft--;\n      } else {\n        this.close();\n        if (this.onCancel) this.onCancel();\n      }\n    };\n    \n    updateCountdown();\n    this.countdownInterval = setInterval(updateCountdown, 1000);\n  }\n\n  onClose() {\n    if (this.countdownInterval) {\n      clearInterval(this.countdownInterval);\n    }\n  }\n}\n\nexport { SimklPinModal };", "import { Notice, requestUrl } from 'obsidian';\n\nclass Theme {\nstatic THEME_REPO_URL = 'https://api.github.com/repos/zara-kasi/zoro/contents/Theme?ref=main';\n\n  constructor(plugin) {\n    this.plugin = plugin;\n    this.themeStyleId = 'zoro-theme';\n    this.pluginScopes = [\n      '.zoro-container',\n      '.zoro-search-container',\n      '.zoro-dashboard-container',\n      '.zoro-edit-modal',\n      '.zoro-auth-modal'\n    ];\n  }\n\n   async fetchRemoteThemes() {\n  try {\n    const res = await fetch(Theme.THEME_REPO_URL);\n    if (!res.ok) throw res.status;\n    const json = await res.json();\n    return json\n      .filter(item => item.type === 'file' && item.name.endsWith('.css'))\n      .map(item => item.name.replace('.css', ''));\n  } catch (e) {\n    console.warn('[Zoro] Remote theme list failed', e);\n    return [];\n  }\n}\n   async downloadTheme(name) {\n  const rawUrl = `https://raw.githubusercontent.com/zara-kasi/zoro/main/Theme/${encodeURIComponent(name)}.css`;\n  const localPath = `${this.plugin.manifest.dir}/themes/${name}.css`;\n  \n  try {\n    // Check if file exists and delete it\n    try {\n      await this.plugin.app.vault.adapter.stat(localPath);\n      // File exists, delete it\n      await this.plugin.app.vault.adapter.remove(localPath);\n    } catch (e) {\n      // File doesn't exist, continue with download\n    }\n\n    const res = await fetch(rawUrl);\n    if (!res.ok) throw res.status;\n    const css = await res.text();\n    \n    // Ensure themes directory exists\n    const themesDir = `${this.plugin.manifest.dir}/themes`;\n    try {\n      await this.plugin.app.vault.adapter.mkdir(themesDir);\n    } catch (e) {\n      // Directory already exists\n    }\n    \n    await this.plugin.app.vault.adapter.write(localPath, css);\n    new Notice(`\u2705 Theme \"${name}\" downloaded successfully`);\n    \n    // Auto-apply the theme after successful download\n    await this.applyTheme(name);\n    \n    return true;\n  } catch (e) {\n    new Notice(`\u274C Could not download \"${name}\": ${e}`);\n    return false;\n  }\n}\n\n  async getAvailableThemes() {\n    try {\n      const themesDir = `${this.plugin.manifest.dir}/themes`;\n      const { files } = await this.plugin.app.vault.adapter.list(themesDir);\n      return files\n        .filter(f => f.endsWith('.css'))\n        .map(f => f.split('/').pop().replace('.css', ''));\n    } catch {\n      return [];\n    }\n  }\n\n  async applyTheme(themeName) {\n    const old = document.getElementById(this.themeStyleId);\n    if (old) old.remove();\n\n    if (!themeName) return;\n\n    const cssPath = `${this.plugin.manifest.dir}/themes/${themeName}.css`;\n    let rawCss;\n    try {\n      rawCss = await this.plugin.app.vault.adapter.read(cssPath);\n    } catch (err) {\n      console.warn('Zoro: theme file missing:', themeName, err);\n      new Notice(`\u274C Theme \"${themeName}\" not found`);\n      return;\n    }\n\n    const scopedCss = this.scopeToPlugin(rawCss);\n\n    const style = document.createElement('style');\n    style.id = this.themeStyleId;\n    style.textContent = scopedCss;\n    document.head.appendChild(style);\n  }\n\n   async deleteTheme(name) {\n  const localPath = `${this.plugin.manifest.dir}/themes/${name}.css`;\n  \n  try {\n    await this.plugin.app.vault.adapter.remove(localPath);\n    new Notice(`\u2705 Theme \"${name}\" deleted successfully`);\n    return true;\n  } catch (e) {\n    new Notice(`\u274C Could not delete \"${name}\": ${e}`);\n    return false;\n  }\n}\n  scopeToPlugin(css) {\n    const rules = this.extractCSSRules(css);\n    const scopedRules = [];\n\n    for (const rule of rules) {\n      if (rule.type === 'at-rule') {\n        scopedRules.push(this.handleAtRule(rule));\n      } else if (rule.type === 'rule') {\n        scopedRules.push(this.handleRegularRule(rule));\n      } else {\n        scopedRules.push(rule.content);\n      }\n    }\n\n    return scopedRules.join('\\n');\n  }\n\n  extractCSSRules(css) {\n    const rules = [];\n    let pos = 0;\n    let current = '';\n    let braceDepth = 0;\n    let inAtRule = false;\n    let atRuleType = '';\n\n    while (pos < css.length) {\n      const char = css[pos];\n      current += char;\n\n      if (char === '@' && braceDepth === 0) {\n        if (current.slice(0, -1).trim()) {\n          rules.push({ type: 'text', content: current.slice(0, -1) });\n        }\n        current = char;\n        inAtRule = true;\n        const match = css.slice(pos).match(/^@(\\w+)/);\n        atRuleType = match ? match[1] : '';\n      }\n\n      if (char === '{') {\n        braceDepth++;\n      } else if (char === '}') {\n        braceDepth--;\n        \n        if (braceDepth === 0) {\n          if (inAtRule) {\n            rules.push({ type: 'at-rule', content: current, atType: atRuleType });\n            inAtRule = false;\n            atRuleType = '';\n          } else {\n            rules.push({ type: 'rule', content: current });\n          }\n          current = '';\n        }\n      }\n\n      pos++;\n    }\n\n    if (current.trim()) {\n      rules.push({ type: 'text', content: current });\n    }\n\n    return rules;\n  }\n\n  handleAtRule(rule) {\n    if (rule.atType === 'media') {\n      const mediaMatch = rule.content.match(/^(@media[^{]+)\\{(.*)\\}$/s);\n      if (mediaMatch) {\n        const mediaQuery = mediaMatch[1];\n        const innerCSS = mediaMatch[2];\n        const scopedInner = this.scopeToPlugin(innerCSS);\n        return `${mediaQuery} {\\n${scopedInner}\\n}`;\n      }\n    }\n    return rule.content;\n  }\n\n  handleRegularRule(rule) {\n    const match = rule.content.match(/^([^{]+)\\{(.*)\\}$/s);\n    if (!match) return rule.content;\n\n    const selectors = match[1].trim();\n    const declarations = match[2];\n\n    const selectorList = selectors.split(',').map(s => s.trim());\n    const scopedSelectors = [];\n\n    for (const selector of selectorList) {\n      if (this.isAlreadyPluginScoped(selector)) {\n        scopedSelectors.push(selector);\n      } else if (this.shouldBePluginScoped(selector)) {\n        scopedSelectors.push(this.addPluginScope(selector));\n      } else {\n        scopedSelectors.push(selector);\n      }\n    }\n\n    return `${scopedSelectors.join(', ')} {${declarations}}`;\n  }\n\n  isAlreadyPluginScoped(selector) {\n    return this.pluginScopes.some(scope => selector.includes(scope));\n  }\n\n  shouldBePluginScoped(selector) {\n    const globalPrefixes = [':root', 'html', 'body', '*'];\n    const pluginPrefixes = ['.zoro-', '#zoro-'];\n    \n    const hasGlobalPrefix = globalPrefixes.some(prefix => selector.startsWith(prefix));\n    const hasPluginPrefix = pluginPrefixes.some(prefix => selector.includes(prefix));\n    \n    return !hasGlobalPrefix && (hasPluginPrefix || !selector.startsWith('.'));\n  }\n\n  addPluginScope(selector) {\n    const primaryScope = '.zoro-container';\n    \n    if (selector.includes('.zoro-modal') || selector.includes('.zoro-overlay')) {\n      return selector;\n    }\n    \n    if (selector.startsWith(':')) {\n      return `${primaryScope}${selector}`;\n    }\n    \n    return `${primaryScope} ${selector}`;\n  }\n\n  removeTheme() {\n    const existingStyle = document.getElementById(this.themeStyleId);\n    if (existingStyle) {\n      existingStyle.remove();\n    }\n  }\n}\n\nexport { Theme };\n", "import { Notice } from 'obsidian';\nimport { Trending } from '../features/Trending.js';\n\nclass Processor {\n  constructor(plugin) {\n    this.plugin = plugin;\n    this.apiRegistry = new Map();\n    this.initializeApis();\n  }\n\n  initializeApis() {\n    if (this.plugin.api) {\n      this.apiRegistry.set('anilist', this.plugin.api);\n    }\n    \n    if (this.plugin.malApi) {\n      this.apiRegistry.set('mal', this.plugin.malApi);\n    }\n    \n    if (this.plugin.simklApi) {\n      this.apiRegistry.set('simkl', this.plugin.simklApi);\n    }\n  }\n\n  getApiInstance(source) {\n    const normalizedSource = source?.toLowerCase();\n    \n    if (!this.apiRegistry.has(normalizedSource)) {\n      const availableSources = Array.from(this.apiRegistry.keys()).join(', ');\n      throw new Error(`\u274C Unsupported API source: ${source}. Available sources: ${availableSources}`);\n    }\n    \n    return this.apiRegistry.get(normalizedSource);\n  }\n\n  getSupportedOperations(source) {\n    const operationMap = {\n      'anilist': ['stats', 'search', 'single', 'list', 'trending'],\n      'mal': ['stats', 'search', 'single', 'list', 'trending'],\n      'simkl': ['stats', 'search', 'single', 'list', 'trending']\n    };\n    \n    return operationMap[source?.toLowerCase()] || [];\n  }\n\n  validateOperation(source, operation) {\n    const supportedOps = this.getSupportedOperations(source);\n    \n    if (!supportedOps.includes(operation)) {\n      throw new Error(`\u274C Operation '${operation}' is not supported by ${source.toUpperCase()}. Supported operations: ${supportedOps.join(', ')}`);\n    }\n  }\n\n  createSkeleton(config) {\n    const skeletonMap = {\n      'stats': () => this.plugin.render.createStatsSkeleton(),\n      'single': () => this.plugin.render.createListSkeleton(1),\n      'trending': () => this.plugin.render.createListSkeleton(),\n      'search': () => this.plugin.render.createListSkeleton(),\n      'list': () => this.plugin.render.createListSkeleton()\n    };\n\n    const createSkeletonFn = skeletonMap[config.type];\n    if (!createSkeletonFn) {\n      return this.plugin.render.createListSkeleton();\n    }\n\n    return createSkeletonFn();\n  }\n\n  async resolveAuthentication(config) {\n    const updatedConfig = { ...config };\n\n    if (config.source === 'mal' || config.source === 'simkl') {\n      return updatedConfig;\n    }\n\n    if (updatedConfig.useAuthenticatedUser) {\n      const authUsername = await this.plugin.auth.getAuthenticatedUsername();\n      if (!authUsername) {\n        throw new Error('\u274C Could not retrieve authenticated username. Please authenticate or provide a username.');\n      }\n      updatedConfig.username = authUsername;\n    }\n\n    return updatedConfig;\n  }\n\n  async executeApiOperation(api, config) {\n    const { type, source } = config;\n\n    try {\n      switch (type) {\n        case 'stats':\n          return await this.handleStatsOperation(api, config);\n          \n        case 'search':\n          return await this.handleSearchOperation(api, config);\n          \n        case 'single':\n          return await this.handleSingleOperation(api, config);\n          \n        case 'list':\n          return await this.handleListOperation(api, config);\n          \n        case 'trending':\n          return await this.handleTrendingOperation(api, config);\n          \n        default:\n          throw new Error(`\u274C Unknown operation type: ${type}`);\n      }\n    } catch (error) {\n      throw new Error(`\u274C ${source.toUpperCase()} API operation failed: ${error.message}`);\n    }\n  }\n\ninjectMetadata(data, config) {\n  if (!data) return data;\n  \n  const metadata = {\n    source: config.source || 'anilist',\n    mediaType: config.mediaType || (data.media?.type || 'ANIME')\n  };\n\n  if (Array.isArray(data)) {\n    data.forEach(entry => {\n      if (entry) {\n        entry._zoroMeta = metadata;\n        // Ensure media type is consistent\n        if (entry.media && !entry.media.type) {\n          entry.media.type = metadata.mediaType;\n        }\n      }\n    });\n    return data;\n  }\n  \n  // Handle single entry\n  if (data && typeof data === 'object') {\n    data._zoroMeta = metadata;\n    if (data.media && !data.media.type) {\n      data.media.type = metadata.mediaType;\n    }\n  }\n  \n  return data;\n}\n async handleStatsOperation(api, config) {\n  if (config.source === 'mal') {\n    const response = await api.fetchMALData({ ...config, type: 'stats' });\n    const data = response?.User || response;\n    return this.injectMetadata(data, config);\n  } else if (config.source === 'simkl') {\n    const response = await api.fetchSimklData({ ...config, type: 'stats' });\n    const data = response?.User || response;\n    return this.injectMetadata(data, config);\n  } else {\n    const data = await api.fetchAniListData?.(config);\n    const result = data?.User || data;\n    return this.injectMetadata(result, config);\n  }\n}\n\nasync handleSearchOperation(api, config) {\n  return { isSearchInterface: true, config };\n}\n\nasync handleSingleOperation(api, config) {\n  if (!config.mediaId && !config.externalIds) {\n    throw new Error('\u274C Media ID or externalIds is required for single media view');\n  }\n\n  if (config.source === 'mal') {\n    // Use item endpoint to fetch single MAL media reliably\n    const response = await api.fetchMALData({ ...config, type: 'item' });\n    const media = response?.Media;\n    const wrapped = media ? { id: null, status: null, score: null, progress: 0, media } : null;\n    return this.injectMetadata(wrapped, config);\n  } else if (config.source === 'simkl') {\n    const response = await api.fetchSimklData({ ...config, type: 'single' });\n    const data = response?.MediaList;\n    return this.injectMetadata(data, config);\n  } else {\n    // AniList: use Media(id) query; wrap result to MediaList-like shape for renderer\n    const data = await api.fetchAniListData?.({ ...config, type: 'single' });\n    const media = data?.Media;\n    const wrapped = media ? { id: null, status: null, score: null, progress: 0, media } : null;\n    return this.injectMetadata(wrapped, config);\n  }\n}\n\nasync handleListOperation(api, config) {\n  if (config.source === 'mal') {\n    const response = await api.fetchMALData({\n      ...config,\n      type: 'list'\n    });\n    const entries = response?.MediaListCollection?.lists?.flatMap(l => l.entries) || [];\n    return this.injectMetadata(entries, config);\n  } else if (config.source === 'simkl') {\n    const response = await api.fetchSimklData({\n      ...config,\n      type: 'list'\n    });\n    const entries = response?.MediaListCollection?.lists?.flatMap(l => l.entries) || [];\n    return this.injectMetadata(entries, config);\n  } else {\n    const data = await api.fetchAniListData?.({ ...config });\n    const entries = data?.MediaListCollection?.lists?.flatMap(l => l.entries) || [];\n    return this.injectMetadata(entries, config);\n  }\n}\n\nasync handleTrendingOperation(api, config) {\n  const trending = new Trending(this.plugin);\n  \n  const data = await trending.fetchTrending(\n    config.source, \n    config.mediaType, \n    config.limit || 40  // Changed from 20 to 40\n  );\n  \n  if (Array.isArray(data)) {\n    data.forEach(item => {\n      if (!item._zoroMeta) {\n        item._zoroMeta = {\n          source: config.source,\n          mediaType: config.mediaType,\n          fetchedAt: Date.now()\n        };\n      }\n    });\n  }\n  \n  return data;\n}\n\nasync renderData(el, data, config) {\n  const { type } = config;\n\n  try {\n    switch (type) {\n      case 'stats':\n        this.plugin.render.renderUserStats(el, data, { \n          mediaType: config.mediaType || 'ANIME', \n          layout: config.layout || 'enhanced' \n        });\n        break;\n\n      case 'search':\n        if (data.isSearchInterface) {\n          await this.plugin.render.renderSearchInterface(el, data.config);\n        } else {\n          this.plugin.render.renderSearchResults(el, data.Page?.media || [], config);\n        }\n        break;\n\n      case 'single':\n        this.plugin.render.renderSingleMedia(el, data, config);\n        break;\n\n      case 'list':\n        this.plugin.render.renderMediaList(el, data, config);\n        break;\n\n      case 'trending':\n        if (Array.isArray(data)) {\n          console.log(`[Processor] Rendering trending data: ${data.length} items`);\n          // Data is already fetched and formatted, just render it\n          this.plugin.render.renderSearchResults(el, data, {\n            layout: config.layout || 'card',\n            mediaType: config.mediaType || 'ANIME',\n            source: config.source,\n            type: 'trending'\n          });\n        } else if (data && data.isTrendingOperation) {\n          // Fallback to the old render method if needed\n          console.log('[Processor] Using fallback trending render method');\n          const trending = new Trending(this.plugin);\n          await trending.renderTrendingBlock(el, data.config);\n        } else {\n          throw new Error('Invalid trending data format received');\n        }\n        break;\n\n      default:\n        throw new Error(`\u274C Unknown rendering type: ${type}`);\n    }\n  } catch (error) {\n    console.error('[Processor] Render data failed:', error);\n    throw new Error(`\u274C Rendering failed: ${error.message}`);\n  }\n}\n\n\n  async processZoroCodeBlock(source, el, ctx) {\n    let config;\n    \n    try {\n      config = this.parseCodeBlockConfig(source) || {};\n      \n      this.validateOperation(config.source, config.type);\n      \n      const skeleton = this.createSkeleton(config);\n      el.empty();\n      el.appendChild(skeleton);\n\n      const retryFn = () => this.processZoroCodeBlock(source, el, ctx);\n\n      await this.executeProcessing(el, config, retryFn);\n\n    } catch (error) {\n      console.error('[Zoro] Code block processing error:', error);\n      el.empty();\n      \n      const retryFn = () => this.processZoroCodeBlock(source, el, ctx);\n      this.plugin.renderError(\n        el,\n        error.message || 'Unknown error occurred.',\n        'Code block',\n        retryFn\n      );\n    }\n  }\n\nasync executeProcessing(el, config, retryFn) {\n  try {\n    const resolvedConfig = await this.resolveAuthentication(config);\n    \n    // Get API instance for non-trending operations\n    let api = null;\n    if (resolvedConfig.type !== 'trending') {\n      api = this.getApiInstance(resolvedConfig.source);\n    }\n    \n    // Execute the operation\n    const data = await this.executeApiOperation(api, resolvedConfig);\n    \n    // Render the data\n    await this.renderData(el, data, resolvedConfig);\n\n  } catch (error) {\n    console.error('[Processor] Execute processing failed:', error);\n    el.empty();\n    this.plugin.renderError(el, error.message, 'Failed to load', retryFn);\n    throw error;\n  }\n}\n\n  parseCodeBlockConfig(source) {\n    const config = {};\n    const lines = source.split('\\n').filter(l => l.trim() && !l.trim().startsWith('#'));\n\n    const keyMappings = {\n      'username': 'username',\n      'user': 'username',\n      'listtype': 'listType',\n      'list-type': 'listType',\n      'list_type': 'listType',\n      'mediatype': 'mediaType',\n      'media-type': 'mediaType',\n      'media_type': 'mediaType',\n      'type': 'type',\n      'layout': 'layout',\n      'search': 'search',\n      'query': 'search',\n      'source': 'source',\n      'api': 'source',\n      'page': 'page',\n      'perpage': 'perPage',\n      'per-page': 'perPage',\n      'per_page': 'perPage',\n      'limit': 'perPage',\n      // support single media identifiers\n      'mediaid': 'mediaId',\n      'media-id': 'mediaId',\n      'media_id': 'mediaId',\n      'id': 'mediaId'\n    };\n\n    for (let raw of lines) {\n      const colonIndex = raw.indexOf(':');\n      if (colonIndex === -1) continue;\n\n      let key = raw.slice(0, colonIndex).trim().toLowerCase();\n      let value = raw.slice(colonIndex + 1).trim();\n\n      const mappedKey = keyMappings[key];\n      if (!mappedKey) continue;\n\n      config[mappedKey] = this.processConfigValue(mappedKey, value);\n    }\n\n    return this.applyConfigDefaults(config);\n  }\n\n  processConfigValue(key, value) {\n    switch (key) {\n      case 'listType':\n        return value.toUpperCase().replace(/[\\s-]/g, '_');\n      case 'mediaType':\n        return value.toUpperCase();\n      case 'type':\n      case 'layout':\n      case 'source':\n        return value.toLowerCase();\n      case 'page':\n      case 'perPage':\n      case 'mediaId':\n        return parseInt(value) || undefined;\n      default:\n        return value;\n    }\n  }\n\n  applyConfigDefaults(config) {\n  const mt = String(config.mediaType || 'ANIME').toUpperCase();\n  if (!config.source) {\n    if (mt === 'MOVIE' || mt === 'MOVIES' || mt === 'TV' || mt === 'SHOW' || mt === 'SHOWS') {\n      config.source = 'simkl';\n    } else if (mt === 'MANGA') {\n      const def = this.plugin.settings.defaultApiSource || 'anilist';\n      config.source = def === 'simkl' ? 'mal' : def;\n    } else {\n      config.source = this.plugin.settings.defaultApiSource || 'anilist';\n    }\n  }\n\n  if (config.type === 'trending') {\n    config.mediaType = config.mediaType || 'ANIME';\n    config.layout = config.layout || this.plugin.settings.defaultLayout || 'card';\n    config.limit = config.limit || config.perPage || 40;  // Changed from 20 to 40\n    \n    const mtUpper = config.mediaType.toUpperCase();\n    if (['MOVIE','MOVIES','TV','SHOW','SHOWS'].includes(mtUpper)) {\n      config.source = 'simkl';\n    } else if (mtUpper === 'MANGA' && config.source === 'simkl') {\n  config.source = 'mal';\n}\n    \n    return config;\n  }\n\n  // Existing authentication checks for other operations\n  if (config.source === 'mal' || config.source === 'simkl') {\n    if (!this.hasValidAuthForSource(config.source)) {\n      throw new Error(`\u274C ${config.source.toUpperCase()} authentication required. Please authenticate in plugin settings.`);\n    }\n  } else {\n    if (!config.username) {\n      if (this.plugin.settings.defaultUsername) {\n        config.username = this.plugin.settings.defaultUsername;\n      } else if (this.hasValidAuthForSource(config.source)) {\n        config.useAuthenticatedUser = true;\n      } else {\n        throw new Error('\u274C Username is required. Please set a default username in plugin settings, authenticate, or specify one in the code block.');\n      }\n    }\n  }\n\n  config.type = config.type || 'list';\n  config.mediaType = config.mediaType || 'ANIME';\n  config.layout = config.layout || this.plugin.settings.defaultLayout || 'card';\n  \n  if (!config.listType && config.type === 'list') {\n    config.listType = 'CURRENT';\n  }\n  \n  if ((config.source === 'mal' || config.source === 'simkl') && config.listType === 'REPEATING') {\n    throw new Error('Repeating is supported only on AniList.');\n  }\n  \n  if (config.source === 'simkl' && config.mediaType === 'MANGA') {\n    throw new Error('Manga is supported only on AniList and MyAnimeList.');\n  }\n\n  return config;\n}\n\n  hasValidAuthForSource(source) {\n    switch (source) {\n      case 'mal':\n        return !!this.plugin.settings.malAccessToken;\n      case 'simkl':\n        return !!this.plugin.settings.simklAccessToken;\n      case 'anilist':\n        return !!this.plugin.settings.accessToken;\n      default:\n        return false;\n    }\n  }\n}\n\nexport { Processor };", "import { Notice } from 'obsidian';\n\nclass Trending {\n  constructor(plugin) { \n    this.plugin = plugin; \n  }\n\n  getTrendingCacheKey(source, mediaType, limit) {\n    return this.plugin.cache.structuredKey('trending', 'trending', `${source}_${mediaType}_${limit}`);\n  }\n\n  async fetchAniListTrending(mediaType = 'ANIME', limit = 40) {\n    const cacheKey = this.getTrendingCacheKey('anilist', mediaType, limit);\n    \n    const cached = this.plugin.cache.get(cacheKey, {\n      scope: 'mediaData',\n      source: 'anilist'\n    });\n    \n    if (cached) {\n      return cached;\n    }\n\n    const query = `\n      query ($type: MediaType, $perPage: Int) {\n        Page(page: 1, perPage: $perPage) {\n          media(type: $type, sort: TRENDING_DESC) {\n            id\n            idMal\n            title {\n              romaji\n              english\n              native\n            }\n            coverImage {\n              large\n              medium\n            }\n            format\n            averageScore\n            genres\n            episodes\n            chapters\n            status\n            startDate {\n              year\n              month\n              day\n            }\n          }\n        }\n      }\n    `;\n\n    const variables = {\n      type: mediaType.toUpperCase(),\n      perPage: limit\n    };\n\n    try {\n      const response = await fetch('https://graphql.anilist.co', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query, variables })\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('[Trending] AniList error response:', errorText);\n        throw new Error(`AniList API error: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      \n      if (data.errors) {\n        console.error('[Trending] AniList GraphQL errors:', data.errors);\n        throw new Error(`AniList GraphQL error: ${data.errors[0]?.message || 'Unknown error'}`);\n      }\n\n      if (!data.data?.Page?.media) {\n        console.error('[Trending] No media data in response:', data);\n        throw new Error('No trending data received from AniList');\n      }\n\n      const mediaList = data.data.Page.media.map(media => ({\n        ...media,\n        _zoroMeta: {\n          source: 'anilist',\n          mediaType: mediaType.toUpperCase(),\n          fetchedAt: Date.now()\n        }\n      }));\n\n      this.plugin.cache.set(cacheKey, mediaList, {\n        scope: 'mediaData',\n        source: 'anilist',\n        ttl: 24 * 60 * 60 * 1000,\n        tags: ['trending', mediaType.toLowerCase(), 'anilist']\n      });\n\n      return mediaList;\n\n    } catch (error) {\n      console.error('[Trending] AniList fetch failed:', error);\n      \n      const staleData = this.plugin.cache.get(cacheKey, {\n        scope: 'mediaData',\n        source: 'anilist',\n        ttl: Infinity\n      });\n      \n      if (staleData) {\n        return staleData;\n      }\n      \n      throw error;\n    }\n  }\n\n  async fetchTMDbTrending(mediaType = 'MOVIE', limit = 40) {\n    const tmdbApiKey = this.plugin.settings.tmdbApiKey;\n    \n    if (!tmdbApiKey) {\n      console.error('[Trending] TMDb API key not configured');\n      throw new Error('TMDb API key is required. Please add it in settings.');\n    }\n\n    const typeUpper = (mediaType || 'MOVIE').toUpperCase();\n    const cacheKey = this.getTrendingCacheKey('tmdb', mediaType, limit);\n\n    const cached = this.plugin.cache.get(cacheKey, {\n      scope: 'mediaData'\n    });\n    \n    if (cached) {\n      return cached;\n    }\n\n    let endpoint;\n    if (typeUpper === 'MOVIE' || typeUpper === 'MOVIES') {\n      endpoint = 'trending/movie/day';\n    } else if (typeUpper === 'TV' || typeUpper === 'SHOW' || typeUpper === 'SHOWS') {\n      endpoint = 'trending/tv/day';\n    } else {\n      console.log('[Trending] TMDb skipping anime request - should use AniList');\n      return [];\n    }\n\n    const pages = Math.ceil(limit / 20);\n    const allResults = [];\n\n    try {\n      for (let page = 1; page <= pages; page++) {\n        const url = `https://api.themoviedb.org/3/${endpoint}?api_key=${tmdbApiKey}&page=${page}`;\n        const requestFn = () => fetch(url, { headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' } });\n        const response = await this.plugin.requestQueue.add(requestFn, { priority: 'normal', service: 'tmdb', metadata: { type: 'trending' } });\n        if (!response || !response.ok) {\n          const errorText = response ? await response.text() : 'No response';\n          console.error('[Trending] TMDb error response:', errorText);\n          throw new Error(`TMDb API error: ${response ? response.status : 'NO-RESP'} - ${errorText}`);\n        }\n        const data = await response.json();\n        if (!data.results || !Array.isArray(data.results)) {\n          console.error('[Trending] Invalid TMDb response format:', data);\n          throw new Error('Invalid response format from TMDb');\n        }\n        allResults.push(...data.results);\n        if (allResults.length >= limit) break;\n      }\n\n      const mediaList = allResults\n        .slice(0, limit)\n        .map(item => this.transformTMDbMedia(item, mediaType))\n        .filter(Boolean);\n\n      try {\n        const idsToFetch = mediaList.map(m => m.idTmdb).filter(Boolean).slice(0, 20);\n        const fetches = idsToFetch.map(id => {\n          const url = `https://api.themoviedb.org/3/${typeUpper.includes('MOVIE') ? 'movie' : 'tv'}/${id}/external_ids?api_key=${tmdbApiKey}`;\n          const requestFn = () => fetch(url);\n          return this.plugin.requestQueue.add(requestFn, { priority: 'low', service: 'tmdb', metadata: { type: 'external_ids' } })\n            .then(r => r && r.ok ? r.json() : null)\n            .catch(() => null);\n        });\n        const results = await Promise.all(fetches);\n        const tmdbToImdb = new Map();\n        results.forEach((ext, idx) => {\n          if (ext && (ext.imdb_id || ext.imdb)) {\n            tmdbToImdb.set(idsToFetch[idx], ext.imdb_id || ext.imdb);\n          }\n        });\n        mediaList.forEach(m => {\n          const imdb = tmdbToImdb.get(m.idTmdb);\n          if (imdb) {\n            m.idImdb = imdb;\n            if (!m.ids) m.ids = {};\n            m.ids.imdb = imdb;\n          }\n        });\n      } catch {}\n\n      this.plugin.cache.set(cacheKey, mediaList, {\n        scope: 'mediaData',\n        ttl: 24 * 60 * 60 * 1000,\n        tags: ['trending', mediaType.toLowerCase()]\n      });\n\n      return mediaList;\n\n    } catch (error) {\n      console.error('[Trending] TMDb fetch failed:', error);\n      \n      const staleData = this.plugin.cache.get(cacheKey, {\n        scope: 'mediaData',\n        ttl: Infinity\n      });\n      \n      if (staleData) {\n        return staleData;\n      }\n      \n      throw error;\n    }\n  }\n\n  transformTMDbMedia(item, mediaType) {\n    try {\n      const isMovie = mediaType.toUpperCase() === 'MOVIE' || mediaType.toUpperCase() === 'MOVIES';\n      \n      return {\n        id: item.id,\n        idTmdb: item.id,\n        idImdb: null,\n        ids: {\n          tmdb: item.id,\n          imdb: null\n        },\n        title: {\n          english: isMovie ? item.title : item.name,\n          romaji: null,\n          native: null\n        },\n        coverImage: {\n          large: item.poster_path ? `https://image.tmdb.org/t/p/w500${item.poster_path}` : null,\n          medium: item.poster_path ? `https://image.tmdb.org/t/p/w342${item.poster_path}` : null\n        },\n        bannerImage: item.backdrop_path ? `https://image.tmdb.org/t/p/w1280${item.backdrop_path}` : null,\n        format: isMovie ? 'MOVIE' : 'TV',\n        averageScore: item.vote_average ? Math.round(item.vote_average * 10) : null,\n        popularity: item.popularity,\n        genres: item.genre_ids || [],\n        episodes: null,\n        status: null,\n        description: item.overview || null,\n        startDate: {\n          year: null,\n          month: null,\n          day: null\n        },\n        releaseDate: isMovie ? item.release_date : item.first_air_date,\n        _zoroMeta: {\n          mediaType: mediaType.toUpperCase(),\n          fetchedAt: Date.now(),\n          trending: {\n            popularity: item.popularity,\n            voteAverage: item.vote_average,\n            voteCount: item.vote_count\n          }\n        }\n      };\n    } catch (error) {\n      console.error('[Trending] Failed to transform TMDb item:', item, error);\n      return null;\n    }\n  }\n\n  async fetchJikanTrending(mediaType = 'anime', limit = 40) {\n  const type = mediaType.toLowerCase();\n  const cacheKey = this.getTrendingCacheKey('mal', mediaType, limit);\n  \n  const cached = this.plugin.cache.get(cacheKey, {\n    scope: 'mediaData',\n    source: 'mal'\n  });\n  \n  if (cached) {\n    return cached;\n  }\n\n  let url;\n  let maxLimit = 25; // Jikan API limit for most endpoints\n  \n  if (type === 'manga') {\n    // Use top manga by publishing (currently ongoing) for better trending\n    url = `https://api.jikan.moe/v4/top/manga?filter=publishing&limit=${Math.min(limit, 25)}`;\n  } else {\n    // Back to original anime trending (airing filter)\n    url = `https://api.jikan.moe/v4/top/${type}?filter=airing&limit=${Math.min(limit, 25)}`;\n  }\n\n  try {\n    const response = await this.plugin.requestQueue.add(() => fetch(url), {\n  priority: 'normal',\n  service: 'mal',\n  metadata: { type: 'trending' }\n});\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('[Trending] Jikan error response:', errorText);\n      throw new Error(`Jikan API error: ${response.status} - ${errorText}`);\n    }\n\n    const data = await response.json();\n    \n    let items = [];\n    \n    if (type === 'manga') {\n      // Handle regular top manga response (same as anime)\n      const unique = [];\n      const seen = new Set();\n      \n      (data.data || []).forEach(item => {\n        if (!seen.has(item.mal_id)) {\n          seen.add(item.mal_id);\n          \n          // Filter out finished manga - only keep ongoing/publishing manga\n          const status = item.status?.toLowerCase() || '';\n          const isFinished = status.includes('finished') || \n                           status.includes('completed') || \n                           status.includes('complete') ||\n                           item.publishing === false; // Not currently publishing\n          \n          if (isFinished) {\n            return; // Skip finished manga\n          }\n          \n          unique.push({\n            id: item.mal_id,\n            malId: item.mal_id,\n            title: {\n              romaji: item.title || '',\n              english: item.title_english || item.titles?.find(t => t.type === 'English')?.title || '',\n              native: item.title_japanese || item.titles?.find(t => t.type === 'Japanese')?.title || ''\n            },\n            coverImage: {\n              large: item.images?.jpg?.large_image_url || item.images?.webp?.large_image_url,\n              medium: item.images?.jpg?.image_url || item.images?.webp?.image_url\n            },\n            format: item.type,\n            averageScore: item.score ? Math.round(item.score * 10) : null,\n            genres: item.genres?.map(g => g.name) || [],\n            chapters: item.chapters,\n            volumes: item.volumes,\n            status: item.status,\n            published: item.published ? {\n              from: item.published.from,\n              to: item.published.to\n            } : null,\n            publishing: item.publishing,\n            serializations: item.serializations?.map(s => s.name) || [],\n            authors: item.authors?.map(a => a.name) || [],\n            themes: item.themes?.map(t => t.name) || [],\n            demographics: item.demographics?.map(d => d.name) || [],\n            popularity: item.popularity,\n            members: item.members,\n            favorites: item.favorites,\n            _zoroMeta: {\n              source: 'mal',\n              mediaType: 'MANGA',\n              fetchedAt: Date.now(),\n              trendingMethod: 'publishing_ongoing',\n              apiEndpoint: 'top/manga'\n            }\n          });\n        }\n      });\n      \n      items = unique.slice(0, limit);\n    } else {\n      // Handle regular top anime response\n      const unique = [];\n      const seen = new Set();\n      \n      (data.data || []).forEach(item => {\n        if (!seen.has(item.mal_id)) {\n          seen.add(item.mal_id);\n          \n          unique.push({\n            id: item.mal_id,\n            malId: item.mal_id,\n            title: {\n              romaji: item.title || '',\n              english: item.title_english || item.titles?.find(t => t.type === 'English')?.title || '',\n              native: item.title_japanese || item.titles?.find(t => t.type === 'Japanese')?.title || ''\n            },\n            coverImage: {\n              large: item.images?.jpg?.large_image_url || item.images?.webp?.large_image_url,\n              medium: item.images?.jpg?.image_url || item.images?.webp?.image_url\n            },\n            format: item.type,\n            averageScore: item.score ? Math.round(item.score * 10) : null,\n            genres: item.genres?.map(g => g.name) || [],\n            episodes: item.episodes,\n            status: item.status,\n            popularity: item.popularity,\n            members: item.members,\n            favorites: item.favorites,\n            _zoroMeta: {\n              source: 'mal',\n              mediaType: 'ANIME',\n              fetchedAt: Date.now(),\n              trendingMethod: 'airing',\n              apiEndpoint: 'top/anime'\n            }\n          });\n        }\n      });\n      \n      items = unique.slice(0, limit);\n    }\n\n    this.plugin.cache.set(cacheKey, items, {\n      scope: 'mediaData',\n      source: 'mal',\n      ttl: 24 * 60 * 60 * 1000,\n      tags: ['trending', type, 'mal']\n    });\n\n    console.log(`[Trending] Jikan ${type} trending: ${items.length} items fetched using ${type === 'manga' ? 'recommendations' : 'airing'} method`);\n    return items;\n\n  } catch (error) {\n    console.error('[Trending] Jikan fetch failed:', error);\n    \n    const staleData = this.plugin.cache.get(cacheKey, {\n      scope: 'mediaData',\n      source: 'mal',\n      ttl: Infinity\n    });\n    \n    if (staleData) {\n      console.log('[Trending] Returning stale Jikan cache data');\n      return staleData;\n    }\n    \n    throw error;\n  }\n}\n\n  async fetchTrending(source, mediaType, limit = 40) {\n    const typeUpper = String(mediaType || '').toUpperCase();\n    if (typeUpper === 'MOVIE' || typeUpper === 'MOVIES' || typeUpper === 'TV' || typeUpper === 'SHOW' || typeUpper === 'SHOWS') {\n      return await this.fetchTMDbTrending(typeUpper.includes('MOVIE') ? 'MOVIE' : 'TV', limit);\n    }\n\n    switch ((source || '').toLowerCase()) {\n      case 'mal':\n        return await this.fetchJikanTrending(mediaType, limit);\n      case 'simkl':\n        return await this.fetchSimklTrending(mediaType, limit);\n      case 'anilist':\n      default:\n        return await this.fetchAniListTrending(mediaType, limit);\n    }\n  }\n\n  async renderTrendingBlock(el, config) {\n    el.empty();\n    el.appendChild(this.plugin.render.createListSkeleton(10));\n\n    try {\n      const type = (config.mediaType || 'ANIME').toLowerCase();\n      let source = config.source || this.plugin.settings.defaultApiSource || 'anilist';\n      const mt = String(config.mediaType || 'ANIME').toUpperCase();\n      if (['MOVIE','MOVIES','TV','SHOW','SHOWS'].includes(mt)) source = 'simkl';\n      if (mt === 'MANGA' && (source === 'anilist' || source === 'simkl')) source = 'mal';\n      const limit = config.limit || 40;\n\n      const normalizedType = ['movie','movies','tv','show','shows'].includes(type) ? (type.includes('movie') ? 'MOVIE' : 'TV') : (type === 'manga' ? 'MANGA' : 'ANIME');\n\n      const items = await this.plugin.requestQueue.add(() => \n        this.fetchTrending(source, normalizedType, limit)\n      );\n\n      items.forEach(item => {\n        const isTmdb = ['MOVIE','MOVIES','TV','SHOW','SHOWS'].includes((config.mediaType || '').toUpperCase());\n        if (!item._zoroMeta) {\n          item._zoroMeta = {\n            source: isTmdb ? 'tmdb' : source,\n            mediaType: config.mediaType || 'ANIME',\n            fetchedAt: Date.now()\n          };\n        } else {\n          item._zoroMeta.source = isTmdb ? 'tmdb' : source;\n          item._zoroMeta.mediaType = config.mediaType || 'ANIME';\n          item._zoroMeta.fetchedAt = Date.now();\n        }\n      });\n\n      el.empty();\n      this.plugin.render.renderSearchResults(el, items, {\n        layout: config.layout || 'card',\n        mediaType: config.mediaType || 'ANIME',\n        source: source\n      });\n\n    } catch (err) {\n      console.error('[Trending] Error in renderTrendingBlock:', err);\n      el.empty();\n      this.plugin.renderError(el, err.message, 'Trending');\n    }\n  }\n\n  invalidateTrendingCache(source = null, mediaType = null) {\n    if (source && mediaType) {\n      const cacheKey = this.getTrendingCacheKey(source, mediaType, 40);\n      this.plugin.cache.delete(cacheKey, { scope: 'mediaData', source });\n    } else if (source) {\n      this.plugin.cache.invalidateByTag('trending', { source });\n    } else {\n      this.plugin.cache.invalidateByTag('trending');\n    }\n  }\n\n  async refreshTrending(source, mediaType, limit = 40) {\n    this.invalidateTrendingCache(source, mediaType);\n    return await this.fetchTrending(source, mediaType, limit);\n  }\n\n  getTrendingCacheStats() {\n    const stats = this.plugin.cache.getStats();\n    return {\n      totalCacheSize: stats.cacheSize,\n      hitRate: stats.hitRate,\n      storeBreakdown: Object.entries(stats.storeBreakdown)\n        .filter(([key]) => key.includes('mediaData'))\n        .reduce((acc, [key, value]) => {\n          acc[key] = value;\n          return acc;\n        }, {})\n    };\n  }\n}\n\nexport { Trending };", "import { Notice } from 'obsidian';\nimport { RenderEditModal } from './modals/RenderEditModal.js';\nimport { AniListEditModal } from './modals/AniListEditModal.js';\nimport { MALEditModal } from './modals/MALEditModal.js';\nimport { SimklEditModal } from './modals/SimklEditModal.js';\nimport { SupportEditModal } from './modals/SupportEditModal.js';\n\nclass Edit {\n  constructor(plugin) {\n    this.plugin = plugin;\n    this.saving = false;\n    this.config = {\n      statuses: [\n        { value: 'CURRENT', label: 'Current', emoji: '\uD83D\uDCFA' },\n        { value: 'PLANNING', label: 'Planning', emoji: '\uD83D\uDCCB' },\n        { value: 'COMPLETED', label: 'Completed', emoji: '\u2705' },\n        { value: 'DROPPED', label: 'Dropped', emoji: '\u274C' },\n        { value: 'PAUSED', label: 'On hold', emoji: '\u23F8\uFE0F' },\n        { value: 'REPEATING', label: 'Repeating', emoji: '\uD83D\uDD04' }\n      ],\n      fields: {\n        status: { label: 'Status', emoji: '\uD83E\uDDFF', id: 'zoro-status' },\n        score: { label: 'Score', emoji: '\u2B50', id: 'zoro-score', min: 0, max: 10, step: 1 },\n        progress: { label: 'Progress', emoji: '\uD83D\uDCCA', id: 'zoro-progress' }\n      },\n      buttons: {\n        save: { label: 'Save', class: 'zoro-save-btn' },\n        remove: { label: '\uFE0FRemove', class: 'zoro-remove-btn' },\n        favorite: { class: 'zoro-fav-btn', hearts: { empty: '', filled: '' } },\n        close: { class: 'zoro-modal-close' }\n      }\n    };\n\n    this.renderer = new RenderEditModal(this.config);\n    this.support = new SupportEditModal(plugin, this.renderer);\n    this.anilistProvider = new AniListEditModal(plugin);\n    this.malProvider = new MALEditModal(plugin);\n    this.simklProvider = new SimklEditModal(plugin);\n        this.providers = {\n      'anilist': this.anilistProvider,\n      'mal': this.malProvider,\n      'simkl': this.simklProvider\n    };\n  }\n\n  createEditModal(entry, onSave, onCancel, source = 'anilist') {\n    // Route to Side Panel inline always\n    try {\n      const media = entry?.media;\n      const mediaType = entry?._zoroMeta?.mediaType || media?.type || media?.format || 'ANIME';\n      const resolvedSource = entry?._zoroMeta?.source || source || 'anilist';\n      this.plugin.connectedNotes.openSidePanelWithContext({ media, entry, source: resolvedSource, mediaType })\n        .then(view => view.showEditForEntry(entry, { source: resolvedSource }));\n    } catch (e) {\n      console.error('[Zoro][Edit] Failed to route to Side Panel for modal call', e);\n    }\n    return null;\n  }\n\n  createInlineEdit(entry, onSave, onCancel, source = 'anilist', mountContainer = null) {\n    // Always inline; if no container, route to Side Panel and render there\n    if (!mountContainer || !mountContainer.appendChild) {\n      try {\n        const media = entry?.media;\n        const mediaType = entry?._zoroMeta?.mediaType || media?.type || media?.format || 'ANIME';\n        const resolvedSource = entry?._zoroMeta?.source || source || 'anilist';\n        this.plugin.connectedNotes.openSidePanelWithContext({ media, entry, source: resolvedSource, mediaType })\n          .then(view => view.showEditForEntry(entry, { source: resolvedSource }));\n        return null;\n      } catch (e) {\n        console.error('[Zoro][Edit] Failed to route to Side Panel for inline edit', e);\n      }\n    }\n\n    // Force TMDb movie/TV to use Simkl provider for editing (same logic as modal)\n    const isTmdb = (entry._zoroMeta?.source || source) === 'tmdb';\n    const mt = (entry._zoroMeta?.mediaType || '').toUpperCase();\n    const actualSource = (isTmdb && (mt === 'MOVIE' || mt === 'MOVIES' || mt === 'TV' || mt === 'SHOW' || mt === 'SHOWS'))\n      ? 'simkl'\n      : (entry._zoroMeta?.source || source);\n    const provider = this.providers[actualSource];\n\n    // Build inline container structure (no overlay)\n    const container = document.createElement('div');\n    container.className = 'zoro-edit-modal zoro-inline';\n    const content = document.createElement('div');\n    content.className = 'zoro-modal-content';\n    const form = document.createElement('form');\n    form.className = 'zoro-edit-form';\n    content.appendChild(form);\n    container.appendChild(content);\n\n    // Compose UI via existing renderer helpers\n    const title = this.renderer.createTitle(entry);\n    const closeBtn = this.renderer.createCloseButton(() => {\n      try { container.remove(); } catch {}\n      if (typeof onCancel === 'function') onCancel();\n    });\n    const favoriteBtn = this.renderer.createFavoriteButton(entry, actualSource, (entryToFav, btn, src) => this.toggleFavorite(entryToFav, btn, src));\n    const formFields = this.renderer.createFormFields(entry, actualSource);\n    const quickButtons = this.renderer.createQuickProgressButtons(entry, formFields.progress.input, formFields.status.input);\n    const actionButtons = this.renderer.createActionButtons(entry, () => this.handleRemoveInline(entry, container, actualSource), this.config, actualSource);\n\n    // Assemble DOM\n    this.renderer.assembleModal(content, form, {\n      title,\n      closeBtn,\n      favoriteBtn,\n      formFields,\n      quickButtons,\n      actionButtons\n    });\n\n    // Wire up submit for inline (no overlay lifecycle)\n    form.onsubmit = async (e) => {\n      e.preventDefault();\n      if (this.saving) return;\n      this.saving = true;\n      this.support.setSavingState(actionButtons.save);\n\n      try {\n        const updates = this.support.extractFormData(formFields);\n        await provider.updateEntry(entry, updates, onSave);\n        provider.invalidateCache(entry);\n        this.support.refreshUI(entry);\n        new Notice('\u2705 Saved');\n      } catch (err) {\n        this.support.showModalError(form, `Save failed: ${err.message}`);\n        this.support.resetSaveButton(actionButtons.save);\n        this.saving = false;\n        return;\n      }\n\n      this.support.resetSaveButton(actionButtons.save);\n      this.saving = false;\n    };\n\n    // Initialize favorites if supported\n    if (provider.supportsFeature('favorites')) {\n      this.initializeFavoriteButton(entry, favoriteBtn, actualSource);\n    } else {\n      favoriteBtn.style.display = 'none';\n    }\n\n    // Mount into provided container\n    mountContainer.appendChild(container);\n    return { container, content, form };\n  }\n\n  async handleRemoveInline(entry, container, source) {\n    if (!confirm('Remove this entry?')) return;\n    const removeBtn = container.querySelector('.zoro-remove-btn');\n    this.support.setRemovingState(removeBtn);\n\n    try {\n      const provider = this.providers[source];\n      if (!provider.supportsFeature('remove')) {\n        throw new Error(`${source.toUpperCase()} does not support removing entries via API`);\n      }\n      await provider.removeEntry(entry);\n      provider.invalidateCache(entry);\n      this.support.refreshUI(entry);\n      try { container.remove(); } catch {}\n      new Notice('\u2705 Removed');\n    } catch (e) {\n      this.support.showModalError(container.querySelector('.zoro-edit-form'), `Remove failed: ${e.message}`);\n      this.support.resetRemoveButton(removeBtn);\n    }\n  }\n\n  async initializeFavoriteButton(entry, favBtn, source) {\n    const provider = this.providers[source];\n    await provider.initializeFavoriteButton(entry, favBtn);\n  }\n\n  async toggleFavorite(entry, favBtn, source) {\n    const provider = this.providers[source];\n    await provider.toggleFavorite(entry, favBtn);\n  }\n\n  async handleSave(entry, onSave, saveBtn, formFields, modal, source) {\n    if (this.saving) return;\n    this.saving = true;\n    this.support.setSavingState(saveBtn);\n    \n    const form = modal.form;\n    \n    try {\n      const updates = this.support.extractFormData(formFields);\n      const provider = this.providers[source];\n      \n      await provider.updateEntry(entry, updates, onSave);\n      \n      provider.invalidateCache(entry);\n      this.support.refreshUI(entry);\n      this.support.closeModal(modal.container, () => {});\n      \n      new Notice('\u2705 Saved');\n    } catch (err) {\n      this.support.showModalError(form, `Save failed: ${err.message}`);\n      this.support.resetSaveButton(saveBtn);\n      this.saving = false;\n      return;\n    }\n    \n    this.support.resetSaveButton(saveBtn);\n    this.saving = false;\n  }\n\n  async handleRemove(entry, modalElement, source) {\n    if (!confirm('Remove this entry?')) return;\n    \n    const removeBtn = modalElement.querySelector('.zoro-remove-btn');\n    this.support.setRemovingState(removeBtn);\n    \n    try {\n      const provider = this.providers[source];\n      \n      if (!provider.supportsFeature('remove')) {\n        throw new Error(`${source.toUpperCase()} does not support removing entries via API`);\n      }\n      \n      await provider.removeEntry(entry);\n      \n      provider.invalidateCache(entry);\n      this.support.refreshUI(entry);\n      this.support.closeModal(modalElement, () => {});\n      \n      new Notice('\u2705 Removed');\n    } catch (e) {\n      this.support.showModalError(modalElement.querySelector('.zoro-edit-form'), `Remove failed: ${e.message}`);\n      this.support.resetRemoveButton(removeBtn);\n    }\n  }\n\n  closeModal(modalElement, onCancel) {\n    this.support.closeModal(modalElement, onCancel);\n  }\n}\n\nexport { Edit };", "import { Notice } from 'obsidian';\n\nclass RenderEditModal {\n  constructor(config) {\n    this.config = config;\n  }\n\n  createModalStructure() {\n    const container = document.createElement('div');\n    container.className = 'zoro-edit-modal zoro-inline';\n    const content = document.createElement('div');\n    content.className = 'zoro-modal-content';\n    const form = document.createElement('form');\n    form.className = 'zoro-edit-form';\n    content.appendChild(form);\n    container.append(content);\n    return { container, overlay: null, content, form };\n  }\n  \n  createTitle(entry) {\n    const title = document.createElement('h3');\n    title.className = 'zoro-modal-title';\n    title.textContent = entry.media.title.english || entry.media.title.romaji;\n    return title;\n  }\n  \n  createCloseButton(onClick) {\n    const btn = document.createElement('span');\n    btn.style.display = 'none';\n    btn.onclick = onClick;\n    return btn;\n  }\n\n  createFavoriteButton(entry, source, onToggle) {\n    const favBtn = document.createElement('button');\n    favBtn.className = this.config.buttons.favorite.class;\n    favBtn.type = 'button';\n    favBtn.title = 'Toggle Favorite';\n    \n    if (source === 'mal') {\n      favBtn.style.display = 'none';\n      return favBtn;\n    }\n    \n    favBtn.className = entry.media.isFavourite ? \n      'zoro-fav-btn zoro-heart' : \n      'zoro-fav-btn zoro-no-heart';\n    \n    favBtn.onclick = () => onToggle(entry, favBtn, source);\n    return favBtn;\n  }\n  \n  createFormFields(entry, source = 'anilist') {\n    const statusField = this.createStatusField(entry, source);\n    const scoreField = this.createScoreField(entry);\n    const progressField = this.createProgressField(entry);\n    \n    return {\n      status: statusField,\n      score: scoreField,\n      progress: progressField\n    };\n  }\n  \n  createFormField({ type, label, emoji, id, value, options = {}, className = '' }) {\n    const group = document.createElement('div');\n    group.className = `zoro-form-group zoro-${type}-group ${className}`.trim();\n\n    const labelEl = document.createElement('label');\n    labelEl.className = `zoro-form-label zoro-${type}-label`;\n    labelEl.textContent = `${emoji} ${label}`;\n    labelEl.setAttribute('for', id);\n\n    let input;\n    \n    if (type === 'select') {\n      input = this.createSelectInput(id, value, options);\n    } else if (type === 'number') {\n      input = this.createNumberInput(id, value, options);\n    } else {\n      input = this.createTextInput(id, value, options);\n    }\n\n    group.appendChild(labelEl);\n    group.appendChild(input);\n    return { group, input, label: labelEl };\n  }\n\n  createSelectInput(id, selectedValue, { items = [] }) {\n    const select = document.createElement('select');\n    select.className = `zoro-form-input zoro-${id.replace('zoro-', '')}-select`;\n    select.id = id;\n\n    items.forEach(item => {\n      const option = document.createElement('option');\n      option.value = item.value;\n      option.textContent = item.label;\n      if (item.value === selectedValue) option.selected = true;\n      select.appendChild(option);\n    });\n\n    return select;\n  }\n\n  createNumberInput(id, value, { min, max, step, placeholder }) {\n    const input = document.createElement('input');\n    input.className = `zoro-form-input zoro-${id.replace('zoro-', '')}-input`;\n    input.type = 'number';\n    input.id = id;\n    if (min !== undefined) input.min = min;\n    if (max !== undefined) input.max = max;\n    if (step !== undefined) input.step = step;\n    input.value = value ?? '';\n    if (placeholder) input.placeholder = placeholder;\n    return input;\n  }\n  \n  createTextInput(id, value, { placeholder }) {\n    const input = document.createElement('input');\n    input.className = `zoro-form-input zoro-${id.replace('zoro-', '')}-input`;\n    input.type = 'text';\n    input.id = id;\n    input.value = value ?? '';\n    if (placeholder) input.placeholder = placeholder;\n    return input;\n  }\n  \n  createStatusField(entry, source = 'anilist') {\n    const config = this.config.fields.status;\n    \n    // Filter out REPEATING status for MAL since it doesn't support it\n    let availableStatuses = this.config.statuses;\n    if (source === 'mal' || source === 'simkl') {\n      availableStatuses = this.config.statuses.filter(status => status.value !== 'REPEATING');\n    }\n    \n    // For Simkl movies, also filter out CURRENT and ON_HOLD since they're not supported\n    if (source === 'simkl') {\n      const mediaType = entry._zoroMeta?.mediaType || (entry.media?.format === 'MOVIE' ? 'MOVIE' : 'TV');\n      const isMovie = mediaType === 'MOVIE' || mediaType === 'MOVIES';\n      \n      if (isMovie) {\n        availableStatuses = availableStatuses.filter(status => \n          !['CURRENT', 'PAUSED'].includes(status.value)\n        );\n      }\n    }\n    \n    return this.createFormField({\n      type: 'select',\n      label: config.label,\n      emoji: config.emoji,\n      id: config.id,\n      value: entry.status,\n      options: { items: availableStatuses }\n    });\n  }\n\n  createScoreField(entry) {\n    const config = this.config.fields.score;\n    return this.createFormField({\n      type: 'number',\n      label: `${config.label} (${config.min}\u2013${config.max})`,\n      emoji: config.emoji,\n      id: config.id,\n      value: entry.score,\n      options: {\n        min: config.min,\n        max: config.max,\n        step: config.step,\n        placeholder: `e.g. ${config.max/2 + config.max/5}` \n      }\n    });\n  }\n\n  createProgressField(entry) {\n    const config = this.config.fields.progress;\n    const maxProgress = entry.media.episodes || entry.media.chapters || 999;\n    \n    return this.createFormField({\n      type: 'number',\n      label: config.label,\n      emoji: config.emoji,\n      id: config.id,\n      value: entry.progress || 0,\n      options: {\n        min: 0,\n        max: maxProgress,\n        placeholder: 'Progress'\n      }\n    });\n  }\n\n  createQuickProgressButtons(entry, progressInput, statusSelect) {\n    const container = document.createElement('div');\n    container.className = 'zoro-quick-progress-buttons';\n\n    const plusBtn = this.createQuickButton('+1', 'zoro-plus-btn', () => {\n      const current = parseInt(progressInput.value) || 0;\n      const max = progressInput.max;\n      if (current < max) progressInput.value = current + 1;\n    });\n\n    const minusBtn = this.createQuickButton('-1', 'zoro-minus-btn', () => {\n      const current = parseInt(progressInput.value) || 0;\n      if (current > 0) progressInput.value = current - 1;\n    });\n\n    const completeBtn = this.createQuickButton('Complete', 'zoro-complete-btn', () => {\n      progressInput.value = entry.media.episodes || entry.media.chapters || 1;\n      statusSelect.value = 'COMPLETED';\n    });\n\n    container.append(plusBtn, minusBtn, completeBtn);\n    return { container, plus: plusBtn, minus: minusBtn, complete: completeBtn };\n  }\n  \n  createQuickButton(label, className, onClick) {\n    const button = document.createElement('button');\n    button.className = `zoro-quick-btn ${className}`;\n    button.type = 'button';\n    button.textContent = label;\n    button.onclick = onClick;\n    return button;\n  }\n\n  createActionButtons(entry, onRemove, config, source = 'anilist') {\n    const container = document.createElement('div');\n    container.className = 'zoro-modal-buttons';\n    \n    const removeBtn = this.createActionButton({\n      label: config.buttons.remove.label,\n      className: config.buttons.remove.class,\n      onClick: onRemove\n    });\n    \n    if (source === 'mal') {\n      removeBtn.style.display = 'none';\n    }\n    \n    const saveBtn = this.createActionButton({\n      label: config.buttons.save.label,\n      className: config.buttons.save.class,\n      type: 'submit'\n    });\n    \n    container.append(removeBtn, saveBtn);\n    return { container, remove: removeBtn, save: saveBtn };\n  }\n  \n  createActionButton({ label, className, type = 'button', onClick, disabled = false }) {\n    const button = document.createElement('button');\n    button.className = `zoro-modal-btn ${className}`;\n    button.type = type;\n    button.textContent = label;\n    button.disabled = disabled;\n    if (onClick) button.onclick = onClick;\n    return button;\n  }\n\n  assembleModal(content, form, elements) {\n    content.appendChild(elements.closeBtn);\n    const favContainer = document.createElement('div');\n    favContainer.className = 'zoro-fav-container';\n    favContainer.appendChild(elements.favoriteBtn);\n\n    form.append(\n      elements.title,\n      elements.favoriteBtn,\n      elements.formFields.status.group,\n      elements.formFields.score.group,\n      elements.formFields.progress.group,\n      elements.quickButtons.container,\n      elements.actionButtons.container\n    );\n  }\n}\n\nexport { RenderEditModal };", "import { Notice } from 'obsidian';\n\n\nclass AniListEditModal {\n  constructor(plugin) {\n    this.plugin = plugin;\n  }\n\n  async initializeFavoriteButton(entry, favBtn) {\n    if (entry.media.isFavourite !== undefined) {\n      favBtn.className = entry.media.isFavourite ? 'zoro-fav-btn zoro-heart' : 'zoro-fav-btn zoro-no-heart';\n      favBtn.disabled = false;\n      return;\n    }\n    \n    try {\n      const query = `\n        query ($mediaId: Int) {\n          Media(id: $mediaId) { \n            isFavourite \n            type\n          }\n        }`;\n      const res = await this.plugin.requestQueue.add(() =>\n        requestUrl({\n          url: 'https://graphql.anilist.co',\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${this.plugin.settings.accessToken}`\n          },\n          body: JSON.stringify({ query, variables: { mediaId: entry.media.id } })\n        })\n      );\n      const mediaData = res.json.data?.Media;\n      const fav = mediaData?.isFavourite;\n      entry.media.isFavourite = fav;\n      favBtn.className = fav ? 'zoro-fav-btn zoro-heart' : 'zoro-fav-btn zoro-no-heart';\n      favBtn.dataset.mediaType = mediaData?.type;\n    } catch (e) {\n      console.warn('Could not fetch favorite', e);\n    }\n  }\n\n  async toggleFavorite(entry, favBtn) {\n    favBtn.disabled = true;\n    const wasAlreadyFavorited = entry.media.isFavourite;\n    \n    try {\n      let mediaType = favBtn.dataset.mediaType;\n      if (!mediaType) {\n        mediaType = entry.media.type || 'TV';\n      }\n      \n      const isAnime = mediaType === 'ANIME';\n      \n      const mutation = `\n        mutation ToggleFav($animeId: Int, $mangaId: Int) {\n          ToggleFavourite(animeId: $animeId, mangaId: $mangaId) {\n            anime { nodes { id } }\n            manga { nodes { id } }\n          }\n        }`;\n        \n      const variables = {};\n      if (isAnime) {\n        variables.animeId = entry.media.id;\n      } else {\n        variables.mangaId = entry.media.id;\n      }\n\n      const res = await this.plugin.requestQueue.add(() =>\n        requestUrl({\n          url: 'https://graphql.anilist.co',\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${this.plugin.settings.accessToken}`\n          },\n          body: JSON.stringify({ query: mutation, variables })\n        })\n      );\n      \n      if (res.json.errors) {\n        new Notice(`API Error: ${res.json.errors[0].message}`, 8000);\n        throw new Error(res.json.errors[0].message);\n      }\n      \n      const isFav = !wasAlreadyFavorited;\n      \n      entry.media.isFavourite = isFav;\n      document.querySelectorAll(`[data-media-id=\"${entry.media.id}\"] .zoro-heart`)\n        .forEach(h => h.style.display = entry.media.isFavourite ? '' : 'none');\n      \n      this.invalidateCache(entry);\n      this.updateAllFavoriteButtons(entry);\n      \n      favBtn.className = isFav ? 'zoro-fav-btn zoro-heart' : 'zoro-fav-btn zoro-no-heart';\n      new Notice(`${isFav ? 'Added to' : 'Removed from'} favorites!`, 3000);\n      \n    } catch (e) {\n      new Notice(`\u274C Error: ${e.message || 'Unknown error'}`, 8000);\n    } finally {\n      favBtn.disabled = false;\n    }\n  }\n\n  async updateEntry(entry, updates, onSave) {\n    await onSave(updates);\n    Object.assign(entry, updates);\n    return entry;\n  }\n\n  async removeEntry(entry) {\n    const mutation = `\n      mutation ($id: Int) {\n        DeleteMediaListEntry(id: $id) { deleted }\n      }`;\n    await this.plugin.requestQueue.add(() =>\n      requestUrl({\n        url: 'https://graphql.anilist.co',\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.plugin.settings.accessToken}`\n        },\n        body: JSON.stringify({ query: mutation, variables: { id: entry.id } })\n      })\n    );\n  }\n\n  invalidateCache(entry) {\n    this.plugin.cache.invalidateByMedia(String(entry.media.id));\n  }\n\n  updateAllFavoriteButtons(entry) {\n    document.querySelectorAll(`[data-media-id=\"${entry.media.id}\"] .zoro-fav-btn`)\n      .forEach(btn => {\n        btn.className = entry.media.isFavourite ? 'zoro-fav-btn zoro-heart' : 'zoro-fav-btn zoro-no-heart';\n      });\n  }\n\n  supportsFeature(feature) {\n    return ['favorites', 'remove', 'update'].includes(feature);\n  }\n}\n\nexport { AniListEditModal };", "import { Notice } from 'obsidian';\n\nclass MALEditModal {\n  constructor(plugin) {\n    this.plugin = plugin;\n  }\n\n  async initializeFavoriteButton(entry, favBtn) {\n    favBtn.style.display = 'none';\n  }\n\n  async toggleFavorite(entry, favBtn) {\n    return;\n  }\n\n  async updateEntry(entry, updates, onSave) {\n  const mediaId = entry.media?.id || entry.mediaId;\n  const mediaType = this.detectMediaType(entry);\n  \n  if (!mediaId) {\n    throw new Error('Media ID not found');\n  }\n\n  const malUpdates = {};\n  \n  if (updates.status !== undefined) {\n    malUpdates.status = updates.status;\n  }\n  \n  if (updates.score !== undefined) {\n    malUpdates.score = updates.score === null ? 0 : updates.score;\n  }\n  \n  if (updates.progress !== undefined) {\n    malUpdates.progress = updates.progress;\n  }\n\n  let updatedEntry;\n  \n  try {\n    updatedEntry = await this.plugin.malApi.updateMediaListEntry(mediaId, malUpdates);\n    \n    await onSave(updatedEntry);\n    Object.assign(entry, updatedEntry);\n    \n    return entry;\n  } catch (error) {\n    if (error.message?.includes('No valid updates provided')) {\n      throw new Error('No changes to save');\n    }\n    if (error.message?.includes('invalidateScope is not a function')) {\n      console.warn('Cache cleanup failed:', error.message);\n      if (updatedEntry) {\n        await onSave(updatedEntry);\n        Object.assign(entry, updatedEntry);\n        return entry;\n      }\n    }\n    throw new Error(`MAL update failed: ${error.message}`);\n  }\n}\n\n  async removeEntry(entry) {\n    throw new Error('MAL does not support removing entries via API');\n  }\n\n  invalidateCache(entry) {\n    if (entry.media?.id) {\n      this.plugin.cache.invalidateByMedia(String(entry.media.id));\n    }\n    this.plugin.cache.invalidateScope('userData');\n  }\n\n  updateAllFavoriteButtons(entry) {\n    // MAL doesn't have favorites\n  }\n\n  supportsFeature(feature) {\n    return ['update'].includes(feature);\n  }\n\n  detectMediaType(entry) {\n    // Try multiple ways to determine media type for MAL API\n    if (entry._zoroMeta?.mediaType) {\n      return entry._zoroMeta.mediaType.toLowerCase();\n    }\n    \n    if (entry.media?.type) {\n      return entry.media.type.toLowerCase();\n    }\n    \n    // Check media format\n    if (entry.media?.format) {\n      const format = entry.media.format.toLowerCase();\n      if (['tv', 'movie', 'ova', 'ona', 'special', 'music'].includes(format)) {\n        return 'anime';\n      }\n      if (['manga', 'novel', 'one_shot'].includes(format)) {\n        return 'manga';\n      }\n    }\n    \n    // Fall back to checking for episodes vs chapters\n    if (entry.media?.episodes !== undefined || entry.media?.episodes !== null) {\n      return 'anime';\n    } else if (entry.media?.chapters !== undefined || entry.media?.chapters !== null) {\n      return 'manga';\n    }\n    \n    // Default fallback\n    return 'anime';\n  }\n}\n\nexport { MALEditModal };", "import { Notice } from 'obsidian';\n\nclass SimklEditModal {\n  constructor(plugin) {\n    this.plugin = plugin;\n  }\n\n  async initializeFavoriteButton(entry, favBtn) {\n    favBtn.style.display = 'none';\n  }\n\n  async toggleFavorite(entry, favBtn) {\n    return;\n  }\n\n  async updateEntry(entry, updates, onSave) {\n    console.log('[Simkl][Edit] updateEntry called', { entry, updates });\n    const mediaId = entry.media?.id || entry.mediaId;\n    console.log('[Simkl][Edit] raw mediaId', mediaId);\n    if (!mediaId) throw new Error('Media ID not found');\n    const mediaType = entry._zoroMeta?.mediaType || (entry.media?.format === 'MOVIE' ? 'MOVIE' : 'TV');\n    console.log('[Simkl][Edit] mediaType', mediaType);\n    console.log('[Simkl][Edit] calling updateMediaListEntry', { mediaId, updates, mediaType });\n    await this.plugin.simklApi.updateMediaListEntry(mediaId, updates, mediaType);\n    console.log('[Simkl][Edit] updateEntry done');\n    await onSave(updates);\n    Object.assign(entry, updates);\n    return entry;\n  }\n\n  async removeEntry(entry) {\n    console.log('[Simkl][Edit] removeEntry called', entry);\n    const mediaId = entry.media?.id || entry.mediaId;\n    console.log('[Simkl][Edit] raw mediaId', mediaId);\n    if (!mediaId) throw new Error('Media ID not found');\n    const mediaType = entry._zoroMeta?.mediaType || (entry.media?.format === 'MOVIE' ? 'MOVIE' : 'TV');\n    console.log('[Simkl][Edit] mediaType', mediaType);\n    await this.plugin.simklApi.removeMediaListEntry(mediaId, mediaType);\n    console.log('[Simkl][Edit] removeEntry done');\n  }\n\n  invalidateCache(entry) {\n    if (entry.media?.id) {\n      this.plugin.cache.invalidateByMedia(entry.media.id);\n    }\n    this.plugin.cache.invalidateScope?.('userData');\n  }\n\n  supportsFeature(feature) {\n    return ['update', 'remove'].includes(feature);\n  }\n}\n\nexport { SimklEditModal };", "import { Notice } from 'obsidian';\nimport { DOMHelper } from '../../rendering/helpers/DOMHelper.js';\n\nclass SupportEditModal {\n  constructor(plugin, renderer) {\n    this.plugin = plugin;\n    this.renderer = renderer;\n  }\n\n  validateScore(scoreValue) {\n    const scoreVal = parseFloat(scoreValue);\n    if (scoreValue && (isNaN(scoreVal) || scoreVal < 0 || scoreVal > 10)) {\n      return { valid: false, error: \"Score must be between 0 and 10\" };\n    }\n    return { valid: true, value: scoreValue === '' ? null : scoreVal };\n  }\n\n  extractFormData(formFields) {\n    const scoreValidation = this.validateScore(formFields.score.input.value);\n    if (!scoreValidation.valid) {\n      throw new Error(scoreValidation.error);\n    }\n\n    return {\n      status: formFields.status.input.value,\n      score: scoreValidation.value,\n      progress: parseInt(formFields.progress.input.value) || 0\n    };\n  }\n  \n  setupFormSubmission(form, handleSaveFunction) {\n    form.onsubmit = async (e) => {\n      e.preventDefault();\n      await handleSaveFunction();\n    };\n  }\n\n\n  showModalError(form, msg) {\n    form.querySelector('.zoro-modal-error')?.remove();\n    const banner = document.createElement('div');\n    banner.className = 'zoro-modal-error';\n    banner.textContent = msg;\n    form.appendChild(banner);\n  }\n\n  resetSaveButton(saveBtn) {\n    saveBtn.disabled = false;\n    saveBtn.textContent = 'Save';\n  }\n\n  setSavingState(saveBtn) {\n    saveBtn.disabled = true;\n    saveBtn.textContent = 'Saving...';\n  }\n\n  setRemovingState(removeBtn) {\n    removeBtn.disabled = true;\n    removeBtn.innerHTML = `\n<div class=\"global-loading-glow\">\n  <div class=\"tomoe-container\">\n    <span class=\"tomoe\"></span>\n    <span class=\"tomoe\"></span>\n    <span class=\"tomoe\"></span>\n  </div>\n</div>\n`;\n  }\n\n  resetRemoveButton(removeBtn) {\n    removeBtn.disabled = false;\n    removeBtn.textContent = '\uD83D\uDDD1\uFE0F';\n  }\n\n  detectSource(entry) {\n    if (this.plugin.currentApi === 'mal' || entry.source === 'mal') {\n      return 'mal';\n    }\n    return 'anilist';\n  }\n\n  refreshUI(entry) {\n    const card = document.querySelector(`.zoro-container [data-media-id=\"${entry.media.id}\"]`);\n    if (card) {\n      const statusBadge = card.querySelector('.clickable-status');\n      if (statusBadge) {\n        statusBadge.textContent = entry.status;\n        statusBadge.className = `status-badge status-${entry.status.toLowerCase()} clickable-status`;\n      }\n      const scoreEl = card.querySelector('.score');\n      if (scoreEl) scoreEl.textContent = entry.score != null ? `\u2605 ${entry.score}` : '';\n      \n      const progressEl = card.querySelector('.progress');\n      if (progressEl) {\n        const total = entry.media.episodes || entry.media.chapters || '?';\n        progressEl.textContent = `${entry.progress}/${total}`;\n      }\n    } else {\n      const container = Array.from(document.querySelectorAll('.zoro-container'))\n                              .find(c => c.querySelector(`[data-media-id=\"${entry.media.id}\"]`));\n      if (container) {\n        const block = container.closest('.markdown-rendered')?.querySelector('code');\n        if (block) {\n          container.innerHTML = '';\n          container.appendChild(this.plugin.render.createListSkeleton(1));\n          this.plugin.processZoroCodeBlock(block.textContent, container, {});\n        }\n      }\n    }\n  }\n}\n\nexport { SupportEditModal };", "import { setIcon } from 'obsidian';\nimport { GRID_COLUMN_OPTIONS } from '../../core/constants.js';\nclass DOMHelper {\n  static createLoadingSpinner() {\n    return `\n      <div class=\"global-loading-glow\">\n        <div class=\"tomoe-container\">\n          <span class=\"tomoe\"></span>\n          <span class=\"tomoe\"></span>\n          <span class=\"tomoe\"></span>\n        </div>\n      </div>\n    `;\n  }\n\n  static createSkeletonCard() {\n    const skeleton = document.createElement('div');\n    skeleton.className = 'zoro-card zoro-skeleton';\n    skeleton.innerHTML = `\n      <div class=\"skeleton-cover\"></div>\n      <div class=\"media-info\">\n        <div class=\"skeleton-title\"></div>\n        <div class=\"skeleton-details\">\n          <span class=\"skeleton-badge\"></span>\n          <span class=\"skeleton-badge\"></span>\n        </div>\n      </div>\n    `;\n    return skeleton;\n  }\n\n  static createListSkeleton(count = 6) {\n  const fragment = document.createDocumentFragment();\n  const grid = document.createElement('div');\n  grid.className = 'zoro-cards-grid';\n  \n // Get grid columns from settings (fallback to default)\n  let gridSetting = GRID_COLUMN_OPTIONS.DEFAULT;\n  let gridColumns = 2; // Default fallback for skeleton\n  try {\n    if (window.zoroPlugin?.settings?.gridColumns) {\n      gridSetting = window.zoroPlugin.settings.gridColumns;\n      if (gridSetting === GRID_COLUMN_OPTIONS.DEFAULT) {\n        // For \"Default\", use responsive behavior - create 2 rows of 3 columns for skeleton\n        gridColumns = 3;\n      } else {\n        // For fixed column values, use the specified number\n        gridColumns = Number(gridSetting) || 2;\n      }\n    }\n  } catch (e) {\n    // Fallback to default\n  }\n  \n  // Set grid styles based on the setting\n  if (gridSetting === GRID_COLUMN_OPTIONS.DEFAULT) {\n    // For \"Default\", let CSS handle responsive behavior\n    grid.style.setProperty('--zoro-grid-gap', 'var(--size-4-4)', 'important');\n  } else {\n    // For fixed column values, set the CSS variables\n    grid.style.setProperty('--zoro-grid-columns', String(gridSetting), 'important');\n    grid.style.setProperty('--grid-cols', String(gridSetting), 'important');\n    grid.style.setProperty('--zoro-grid-gap', 'var(--size-4-4)', 'important');\n    // Also set grid-template-columns directly to ensure it takes precedence\n    grid.style.setProperty('grid-template-columns', `repeat(${gridSetting}, minmax(0, 1fr))`, 'important');\n  }\n  \n  // Create exactly 2 rows of skeleton cards\n  const totalCards = gridColumns * 2;\n  \n  for (let i = 0; i < totalCards; i++) {\n    const skeleton = document.createElement('div');\n    skeleton.className = 'zoro-card zoro-skeleton';\n    skeleton.innerHTML = `\n      <div class=\"skeleton-cover\"></div>\n      <div class=\"media-info\">\n        <div class=\"skeleton-title\"></div>\n        <div class=\"skeleton-details\">\n          <span class=\"skeleton-badge\"></span>\n          <span class=\"skeleton-badge\"></span>\n        </div>\n      </div>\n    `;\n    grid.appendChild(skeleton);\n  }\n  \n  fragment.appendChild(grid);\n  return fragment;\n}\n\n  static createStatsSkeleton() {\n    const container = document.createElement('div');\n    container.className = 'zoro-container zoro-stats-skeleton';\n    container.innerHTML = `\n      <div class=\"zoro-user-stats\">\n        <div class=\"zoro-user-header\">\n          <div class=\"skeleton-avatar\"></div>\n          <div class=\"skeleton-title\"></div>\n        </div>\n        <div class=\"zoro-stats-grid\">\n          <div class=\"skeleton-stat-section\"></div>\n          <div class=\"skeleton-stat-section\"></div>\n        </div>\n      </div>\n    `;\n    return container;\n  }\n\n  static createSearchSkeleton() {\n    const container = document.createElement('div');\n    container.className = 'zoro-search-container zoro-search-skeleton';\n    container.innerHTML = `\n      <div class=\"zoro-search-input-container\">\n        <input type=\"text\" class=\"zoro-search-input\" disabled placeholder=\"Loading search...\">\n      </div>\n      <div class=\"zoro-search-results\">\n        <div class=\"zoro-cards-grid\">\n          ${Array(3).fill().map(() => `\n            <div class=\"zoro-card zoro-skeleton\">\n              <div class=\"skeleton-cover\"></div>\n              <div class=\"media-info\">\n                <div class=\"skeleton-title\"></div>\n                <div class=\"skeleton-details\">\n                  <span class=\"skeleton-badge\"></span>\n                </div>\n              </div>\n            </div>\n          `).join('')}\n        </div>\n      </div>\n    `;\n    return container;\n  }\n\n  static createErrorMessage(message) {\n    return `<div class=\"zoro-search-message\">${message}</div>`;\n  }\n\n  static createFragment() {\n    return document.createDocumentFragment();\n  }\n\n  static setupFragment() {\n    // Create fragment with Obsidian's createEl method if available\n    const fragment = document.createDocumentFragment();\n    \n    // Add Obsidian's createEl method to fragment if it doesn't exist\n    if (!fragment.createEl && document.createEl) {\n      fragment.createEl = function(tag, attr, callback) {\n        const el = document.createElement(tag);\n        if (attr) {\n          if (attr.cls) el.className = attr.cls;\n          if (attr.text) el.textContent = attr.text;\n          if (attr.attr) {\n            Object.entries(attr.attr).forEach(([key, value]) => {\n              el.setAttribute(key, value);\n            });\n          }\n        }\n        if (callback) callback(el);\n        this.appendChild(el);\n        return el;\n      };\n    }\n    \n    return fragment;\n  }\n\n  static setupPressAndHold(element, callback, duration = 400) {\n    let pressTimer = null;\n    let isPressed = false;\n    \n    const startPress = (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      isPressed = true;\n      element.classList.add('pressed');\n      \n      pressTimer = setTimeout(() => {\n        if (isPressed) {\n          callback(e);\n          element.classList.remove('pressed');\n          isPressed = false;\n        }\n      }, duration);\n    };\n\n    const endPress = (e) => {\n      if (pressTimer) {\n        clearTimeout(pressTimer);\n        pressTimer = null;\n      }\n      element.classList.remove('pressed');\n      isPressed = false;\n    };\n\n    // Mouse events\n    element.onmousedown = startPress;\n    element.onmouseup = element.onmouseleave = endPress;\n    \n    // Touch events\n    element.ontouchstart = startPress;\n    element.ontouchend = element.ontouchcancel = element.ontouchmove = endPress;\n    \n    // Prevent default behaviors\n    element.onclick = (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      return false;\n    };\n    \n    element.oncontextmenu = (e) => {\n      e.preventDefault();\n      return false;\n    };\n    \n    element.ondragstart = (e) => {\n      e.preventDefault();\n      return false;\n    };\n\n    return { startPress, endPress };\n  }\n\n  static addSecondaryMetric(container, label, value) {\n    const metric = container.createDiv({ cls: 'zoro-secondary-metric' });\n    metric.createEl('span', { \n      text: label,\n      cls: 'zoro-metric-label-small'\n    });\n    metric.createEl('span', { \n      text: value,\n      cls: 'zoro-metric-value-small'\n    });\n  }\n}\n\nexport { DOMHelper };", "const getDefaultGridColumns = () => {\n  return window.innerWidth >= 768 ? 5 : 2;\n};\n\n// New unified grid column system\nconst GRID_COLUMN_OPTIONS = {\n  DEFAULT: 'default',\n  ONE: '1',\n  TWO: '2', \n  THREE: '3',\n  FOUR: '4',\n  FIVE: '5',\n  SIX: '6'\n};\n\nconst GRID_COLUMN_LABELS = {\n  [GRID_COLUMN_OPTIONS.DEFAULT]: 'Default (Responsive)',\n  [GRID_COLUMN_OPTIONS.ONE]: '1 Column',\n  [GRID_COLUMN_OPTIONS.TWO]: '2 Columns',\n  [GRID_COLUMN_OPTIONS.THREE]: '3 Columns',\n  [GRID_COLUMN_OPTIONS.FOUR]: '4 Columns',\n  [GRID_COLUMN_OPTIONS.FIVE]: '5 Columns',\n  [GRID_COLUMN_OPTIONS.SIX]: '6 Columns'\n};\n\nconst DEFAULT_SETTINGS = {\n  defaultApiSource: 'anilist',\n  defaultApiUserOverride: false,\n  defaultUsername: '',\n  defaultLayout: 'card',\n  notePath: 'Zoro/Note',\n  insertCodeBlockOnNote: true,\n  showCoverImages: true,\n  showRatings: true,\n  showProgress: true,\n  showGenres: false,\n  showLoadingIcon: true,\n  gridColumns: GRID_COLUMN_OPTIONS.DEFAULT, // Changed from numeric to string option\n  theme: '', \n  hideUrlsInTitles: true,\n  forceScoreFormat: true,\n  showAvatar: true,\n  showFavorites: true,\n  showBreakdowns: true,\n  showTimeStats: true,\n  statsLayout: 'enhanced',\n  statsTheme: 'auto',\n  clientId: '',\n  clientSecret: '',\n  redirectUri: 'https://anilist.co/api/v2/oauth/pin',\n  accessToken: '',\n  malClientId: '',\n  malClientSecret: '',\n  malAccessToken: '',\n  malRefreshToken: '',\n  malTokenExpiry: null,\n  malUserInfo: null,\n  simklClientId: '',\n  simklClientSecret: '',\n  simklAccessToken: '',\n  simklUserInfo: null,\n  autoFormatSearchUrls: true,\n  customSearchUrls: {\n    ANIME: [],\n    MANGA: [],\n    MOVIE_TV: []\n  },\n  tmdbApiKey: '',\n};\n\nexport { DEFAULT_SETTINGS, getDefaultGridColumns, GRID_COLUMN_OPTIONS, GRID_COLUMN_LABELS };", "// No obsidian imports needed here\n\nclass CustomExternalURL {\n  constructor(plugin) {\n    this.plugin = plugin;\n  }\n\n  // Auto-format URL - removes everything after equals sign\n  formatSearchUrl(url) {\n    if (!url || !url.trim()) return '';\n    \n    const trimmedUrl = url.trim();\n    const equalsIndex = trimmedUrl.indexOf('=');\n    \n    if (equalsIndex !== -1) {\n      return trimmedUrl.substring(0, equalsIndex + 1);\n    }\n    \n    // If no equals sign, add common search parameter\n    if (trimmedUrl.includes('?')) {\n      return trimmedUrl + (trimmedUrl.endsWith('?') ? 'q=' : '&q=');\n    } else {\n      return trimmedUrl + '?q=';\n    }\n  }\n  \n  // Smart template learning from user examples\n  learnTemplateFromExample(url, searchTerm = 'zoro zoro') {\n    if (!url || !searchTerm) return null;\n    \n    try {\n      // Always keep a constant base term to detect space replacement\n      const baseTerm = 'zoro zoro';\n      let foundTerm = searchTerm;\n\n      // First, try to find the exact search term\n      let searchIndex = url.toLowerCase().indexOf(searchTerm.toLowerCase());\n      \n      if (searchIndex === -1) {\n        // If not found, try to find variations of \"zoro zoro\"\n        const variations = [\n          'zoro zoro',\n          'zoro-zoro',\n          'zoro+zoro',\n          'zoro_zoro',\n          'zoro/zoro',\n          'zoro%20zoro',\n          'zoro%2Bzoro'\n        ];\n        \n        for (const variation of variations) {\n          const idx = url.toLowerCase().indexOf(variation.toLowerCase());\n          if (idx !== -1) {\n            searchIndex = idx;\n            foundTerm = variation; // Keep which representation appears in the URL\n            break;\n          }\n        }\n      }\n      \n      if (searchIndex === -1) return null;\n      \n      // Extract template (everything before the search term)\n      const template = url.substring(0, searchIndex);\n      \n      // Extract the search term as it appears in the URL\n      const actualSearchTerm = url.substring(searchIndex, searchIndex + foundTerm.length);\n      \n      // Detect space replacement pattern using the base term\n      const spacePattern = this.detectSpacePattern(baseTerm, actualSearchTerm);\n      \n\n      \n      return {\n        template: template,\n        spacePattern: spacePattern,\n        originalUrl: url,\n        searchTerm: baseTerm\n      };\n    } catch (e) {\n      return null;\n    }\n  }\n  \n  // Detect how spaces are replaced in the URL\n  detectSpacePattern(originalTerm, urlTerm) {\n    if (originalTerm === urlTerm) return ' ';\n    \n    // Handle the case where \"zoro zoro\" becomes \"zoro-zoro\" (no space)\n    if (originalTerm === 'zoro zoro' && urlTerm === 'zoro-zoro') {\n      return '-';\n    }\n    \n    // Handle the case where \"zoro zoro\" becomes \"zoro+zoro\" (no space)\n    if (originalTerm === 'zoro zoro' && urlTerm === 'zoro+zoro') {\n      return '+';\n    }\n    \n    // Handle the case where \"zoro zoro\" becomes \"zoro_zoro\" (no space)\n    if (originalTerm === 'zoro zoro' && urlTerm === 'zoro_zoro') {\n      return '_';\n    }\n    \n    // Handle the case where \"zoro zoro\" becomes \"zoro/zoro\" (no space)\n    if (originalTerm === 'zoro zoro' && urlTerm === 'zoro/zoro') {\n      return '/';\n    }\n    \n    // Handle the case where \"zoro zoro\" becomes \"zoro%20zoro\"\n    if (originalTerm === 'zoro zoro' && urlTerm === 'zoro%20zoro') {\n      return '%20';\n    }\n    \n    // Handle the case where \"zoro zoro\" becomes \"zoro%2Bzoro\"\n    if (originalTerm === 'zoro zoro' && urlTerm === 'zoro%2Bzoro') {\n      return '%2B';\n    }\n    \n    // For more complex cases, try to detect the pattern\n    const originalWords = originalTerm.split(' ');\n    const urlWords = urlTerm.split(/[+\\-\\/_%]/);\n    \n    if (originalWords.length !== urlWords.length) return ' ';\n    \n    // Find the separator used between words\n    const separators = ['+', '-', '_', '/', '%20', '%2B'];\n    \n    for (const separator of separators) {\n      if (urlTerm.includes(separator)) {\n        return separator;\n      }\n    }\n    \n    return ' ';\n  }\n  \n  // Build URL using learned template\n  buildUrlWithTemplate(template, title, spacePattern) {\n    if (!template || !title) return template;\n    \n    // Replace spaces with the detected pattern\n    const encodedTitle = title.replace(/\\s+/g, spacePattern);\n    \n    // Handle special cases\n    if (spacePattern === '%20') {\n      return template + encodeURIComponent(title);\n    } else if (spacePattern === '%2B') {\n      return template + encodeURIComponent(title).replace(/%20/g, '%2B');\n    } else if (spacePattern === ' ') {\n      // Space in URLs should be encoded\n      return template + encodeURIComponent(title);\n    }\n    \n    return template + encodedTitle;\n  }\n  \n  // Build URL using learned template with proper replacement\n  buildUrlWithTemplateAndReplacement(template, title, spacePattern, originalSearchTerm) {\n    if (!template || !title) return template;\n    \n    // Replace spaces with the detected pattern\n    const encodedTitle = title.replace(/\\s+/g, spacePattern);\n    \n    // Handle special cases\n    if (spacePattern === '%20') {\n      return template + encodeURIComponent(title);\n    } else if (spacePattern === '%2B') {\n      return template + encodeURIComponent(title).replace(/%20/g, '%2B');\n    } else if (spacePattern === ' ') {\n      // Space in URLs should be encoded\n      return template + encodeURIComponent(title);\n    }\n    \n    return template + encodedTitle;\n  }\n  \n  // Extract basic template from URL when no \"zoro zoro\" is found\n  extractBasicTemplate(url) {\n    if (!url) return null;\n    \n    try {\n      const urlObj = new URL(url);\n      const pathParts = urlObj.pathname.split('/').filter(part => part);\n      \n      // Look for common search patterns\n      if (pathParts.includes('search')) {\n        // URL like: https://sflix2.to/search/zoro-zoroThe%20Godfather\n        const searchIndex = pathParts.indexOf('search');\n        if (searchIndex !== -1 && searchIndex < pathParts.length - 1) {\n          // Extract everything up to and including /search/\n          const template = urlObj.origin + '/' + pathParts.slice(0, searchIndex + 1).join('/') + '/';\n          \n          // Try to detect the pattern from the remaining parts\n          const remainingParts = pathParts.slice(searchIndex + 1);\n          if (remainingParts.length > 0) {\n            const firstPart = remainingParts[0];\n            // Look for \"zoro\" in the first part\n            if (firstPart.toLowerCase().includes('zoro')) {\n              // Extract the pattern after \"zoro\"\n              const zoroIndex = firstPart.toLowerCase().indexOf('zoro');\n              const afterZoro = firstPart.substring(zoroIndex + 4); // \"zoro\" is 4 characters\n              \n              // Detect the pattern\n              let spacePattern = ' ';\n              if (afterZoro.startsWith('-')) spacePattern = '-';\n              else if (afterZoro.startsWith('+')) spacePattern = '+';\n              else if (afterZoro.startsWith('_')) spacePattern = '_';\n              else if (afterZoro.startsWith('/')) spacePattern = '/';\n              else if (afterZoro.startsWith('%20')) spacePattern = '%20';\n              else if (afterZoro.startsWith('%2B')) spacePattern = '%2B';\n              \n              return {\n                template: template,\n                spacePattern: spacePattern,\n                originalUrl: url,\n                searchTerm: 'zoro zoro'\n              };\n            }\n          }\n        }\n      }\n      \n      // If no specific pattern found, try to extract a general template\n      const lastSlashIndex = url.lastIndexOf('/');\n      if (lastSlashIndex !== -1) {\n        const template = url.substring(0, lastSlashIndex + 1);\n        return {\n          template: template,\n          spacePattern: '-', // Default to dash\n          originalUrl: url,\n          searchTerm: 'zoro zoro'\n        };\n      }\n      \n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  // Validate if URL has proper search format\n  isValidSearchUrl(url) {\n    if (!url || !url.trim()) return false;\n    \n    try {\n      new URL(url);\n      return url.includes('=');\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Extract clean domain name for button text\n  extractDomainName(url) {\n    try {\n      // Support learned template JSON by using originalUrl or template for domain extraction\n      let sourceUrl = url;\n      if (typeof url === 'string') {\n        const trimmed = url.trim();\n        if (trimmed.startsWith('{') && trimmed.endsWith('}')) {\n          try {\n            const data = JSON.parse(trimmed);\n            if (data?.originalUrl) sourceUrl = data.originalUrl;\n            else if (data?.template) sourceUrl = data.template;\n          } catch {}\n        }\n      }\n\n      const urlObj = new URL(sourceUrl);\n      let domain = urlObj.hostname;\n      domain = domain.replace(/^www\\./, '');\n      const parts = domain.split('.');\n      if (parts.length >= 2) {\n        domain = parts[parts.length - 2];\n      }\n      return domain.charAt(0).toUpperCase() + domain.slice(1).toLowerCase();\n    } catch (e) {\n      return 'Search';\n    }\n  }\n\n  // Get best title from media object\n  getBestTitle(media) {\n    return media.title?.english || \n           media.title?.romaji || \n           media.title?.native || \n           'Unknown Title';\n  }\n\n  // Build search URL with encoded title\n  buildSearchUrl(template, title) {\n    if (!template || !title) return template;\n    \n    try {\n      // Check if this is a learned template (JSON string)\n      if (template.startsWith('{') && template.endsWith('}')) {\n        const templateData = JSON.parse(template);\n        if (templateData.template && templateData.spacePattern) {\n          // Use the template with proper replacement\n          const result = this.buildUrlWithTemplateAndReplacement(\n            templateData.template, \n            title, \n            templateData.spacePattern, \n            templateData.searchTerm\n          );\n          \n          return result;\n        }\n      }\n      \n      // Regular URL template\n      const encodedTitle = encodeURIComponent(title);\n      return template + encodedTitle;\n    } catch (e) {\n      return template + title.replace(/[^a-zA-Z0-9\\s]/g, '').replace(/\\s+/g, '+');\n    }\n  }\n\n  // Add new URL to settings\n  async addUrl(mediaType, url = '') {\n    if (!this.plugin.settings.customSearchUrls[mediaType]) {\n      this.plugin.settings.customSearchUrls[mediaType] = [];\n    }\n    \n    let finalUrl = url.trim();\n    \n    if (this.plugin.settings.autoFormatSearchUrls) {\n      // Auto-format URL\n      finalUrl = this.formatSearchUrl(url);\n    } else {\n      // Learn template from example if it contains \"zoro zoro\" or variations\n      const template = this.learnTemplateFromExample(url, 'zoro zoro');\n      if (template) {\n        // Store the learned template instead of the raw URL\n        finalUrl = JSON.stringify(template);\n      } else {\n        // If no template learned, try to extract a basic template\n        const basicTemplate = this.extractBasicTemplate(url);\n        if (basicTemplate) {\n          finalUrl = JSON.stringify(basicTemplate);\n        }\n      }\n    }\n    \n    this.plugin.settings.customSearchUrls[mediaType].push(finalUrl);\n    await this.plugin.saveSettings();\n    return finalUrl;\n  }\n\n  // Remove URL from settings\n  async removeUrl(mediaType, index) {\n    if (this.plugin.settings.customSearchUrls[mediaType]) {\n      this.plugin.settings.customSearchUrls[mediaType].splice(index, 1);\n      await this.plugin.saveSettings();\n    }\n  }\n\n  // Update URL in settings\n  async updateUrl(mediaType, index, newUrl) {\n    if (this.plugin.settings.customSearchUrls[mediaType] && \n        this.plugin.settings.customSearchUrls[mediaType][index] !== undefined) {\n      let finalUrl = newUrl.trim();\n      \n      if (this.plugin.settings.autoFormatSearchUrls) {\n        // Auto-format URL\n        finalUrl = this.formatSearchUrl(newUrl);\n      } else {\n        // Learn template from example if it contains \"zoro zoro\" or variations\n        const template = this.learnTemplateFromExample(newUrl, 'zoro zoro');\n        if (template) {\n          // Store the learned template instead of the raw URL\n          finalUrl = JSON.stringify(template);\n        } else {\n          // If no template learned, try to extract a basic template\n          const basicTemplate = this.extractBasicTemplate(newUrl);\n          if (basicTemplate) {\n            finalUrl = JSON.stringify(basicTemplate);\n          }\n        }\n      }\n      \n      this.plugin.settings.customSearchUrls[mediaType][index] = finalUrl;\n      await this.plugin.saveSettings();\n      return finalUrl;\n    }\n  }\n\n  // Get URLs for specific media type\n  getUrls(mediaType) {\n    // Map MOVIE and TV to MOVIE_TV for unified search URLs\n    const mappedType = (mediaType === 'MOVIE' || mediaType === 'TV') ? 'MOVIE_TV' : mediaType;\n    return this.plugin.settings.customSearchUrls?.[mappedType] || [];\n  }\n\n  // Create search buttons for panel\n  createSearchButtons(media, container) {\n    const customUrls = this.getUrls(media.type);\n    if (!customUrls || customUrls.length === 0) return;\n\n    const mediaTitle = this.getBestTitle(media);\n    \n    customUrls.forEach(url => {\n      if (url && url.trim() !== '') {\n        const domainName = this.extractDomainName(url);\n        const searchBtn = document.createElement('button');\n        searchBtn.className = 'external-link-btn zoro-custom-external-btn';\n        searchBtn.innerHTML = `\uD83D\uDD0D ${domainName}`;\n        searchBtn.onclick = (e) => {\n          e.stopPropagation();\n          try {\n            const searchUrl = this.buildSearchUrl(url, mediaTitle);\n            window.open(searchUrl, '_blank');\n          } catch (error) {\n            console.error('Failed to open search URL:', error);\n          }\n        };\n        container.appendChild(searchBtn);\n      }\n    });\n  }\n}\n\nexport { CustomExternalURL };", "// No obsidian imports needed\nimport { CustomExternalURL } from './CustomExternalURL.js';\n\nclass RenderDetailPanel {\n  constructor(plugin) {\n    this.plugin = plugin;\n  }\n\n  createPanel(media, entry) {\n    const fragment = document.createDocumentFragment();\n    \n    const panel = document.createElement('div');\n    panel.className = 'zoro-more-details-panel';\n\n    const content = document.createElement('div');\n    content.className = 'panel-content';\n\n    const sections = [];\n\n    const src = (entry?._zoroMeta?.source || '').toLowerCase();\n    const mediaKind = media?.type || media?.format;\n    const deferDetailsToSimkl = src === 'tmdb' && (mediaKind === 'MOVIE' || mediaKind === 'TV');\n\n    sections.push(this.createHeaderSection(media));\n\n    if (!deferDetailsToSimkl) {\n      sections.push(this.createMetadataSection(media, entry));\n     \n     if (media.type === 'ANIME' && media.nextAiringEpisode) {\n        sections.push(this.createAiringSection(media.nextAiringEpisode));\n      }\n\n      if (media.averageScore > 0) {\n        sections.push(this.createStatisticsSection(media));\n      }\n\n      if (media.genres?.length > 0) {\n        const mappedInitialGenres = this.mapTmdbGenresIfNeeded(media.genres, mediaKind);\n        console.log('[Details][Genres][Initial] Mapped genres:', mappedInitialGenres);\n        sections.push(this.createGenresSection(mappedInitialGenres));\n      }\n\n      sections.push(this.createSynopsisSection(media.description));\n    } else {\n      // Show loading placeholder for TMDb movie/TV until Simkl details are fetched\n      sections.push(this.createLoadingSection());\n    }\n\n    sections.push(this.createExternalLinksSection(media));\n\n    sections.forEach(section => content.appendChild(section));\n\n    const closeBtn = document.createElement('span');\n    closeBtn.className = 'panel-close-btn';\n    closeBtn.style.display = 'none';\n\n    panel.appendChild(closeBtn);\n    panel.appendChild(content);\n\n    // Add copy functionality styles\n    this.addCopyStyles();\n\n    return panel;\n  }\n\n  addCopyStyles() {\n    // Styles are now handled externally in CSS file\n    // This method can be removed or kept empty for backward compatibility\n    return;\n  }\n\n  createCopyButton(type, data) {\n    const copyBtn = document.createElement('button');\n    copyBtn.className = 'zoro-copy-btn';\n    copyBtn.createEl('span', { text: '\uD83D\uDCCB' });\n    copyBtn.title = 'Copy';\n\n    // Direct copy on click - no dropdown\n    copyBtn.onclick = (e) => {\n      e.stopPropagation();\n      \n      let textToCopy = '';\n      if (type === 'title') {\n        // Copy the best available title\n        textToCopy = data.title?.english || data.title?.romaji || data.title?.native || 'Unknown Title';\n      } else if (type === 'synopsis') {\n        textToCopy = this.cleanSynopsis(data);\n      }\n      \n      this.copyToClipboard(textToCopy, copyBtn);\n    };\n\n    return copyBtn;\n  }\n\n  cleanSynopsis(description) {\n    if (!description || typeof description !== 'string' || !description.trim()) {\n      return 'Synopsis not available';\n    }\n    \n    return description\n      .replace(/<br\\s*\\/?>/gi, '\\n')\n      .replace(/<[^>]*>/g, '')\n      .replace(/\\n\\s*\\n/g, '\\n\\n')\n      .trim();\n  }\n\n  async copyToClipboard(text, buttonElement) {\n  try {\n    await navigator.clipboard.writeText(text);\n\n    // cancel any existing revert timer\n    if (buttonElement._copyTimeout) {\n      clearTimeout(buttonElement._copyTimeout);\n      buttonElement._copyTimeout = null;\n    }\n\n    const mapper = globalThis.__emojiIconMapper;\n\n    // helper to render an \"emoji\" via mapper/createEl/setIcon/fallback\n    const renderEmoji = (emojiOrGlyph, setIconNameFallback) => {\n      // normalize (strip variation selector FE0F if present)\n      const emoji = String(emojiOrGlyph).replace(/\\uFE0F/g, '');\n\n      // clear current children (stop spinner + previous icon)\n      if (typeof buttonElement.replaceChildren === 'function') {\n        buttonElement.replaceChildren();\n      } else {\n        buttonElement.innerHTML = '';\n      }\n\n      // 1) Try mapper -> DocumentFragment\n      if (mapper) {\n        try {\n          const frag = mapper.parseToFragment(emoji);\n          if (frag) {\n            buttonElement.appendChild(frag);\n            return;\n          }\n        } catch (e) { /* ignore and fallback */ }\n      }\n\n      // 2) Try patched createEl (if available)\n      try {\n        if (typeof buttonElement.createEl === 'function') {\n          buttonElement.createEl('span', { text: emoji });\n          return;\n        }\n      } catch {}\n\n      // 3) Try global setIcon (icon name fallback)\n      if (typeof setIcon === 'function' && setIconNameFallback) {\n        const s = document.createElement('span');\n        try {\n          setIcon(s, setIconNameFallback);\n          buttonElement.appendChild(s);\n          return;\n        } catch {}\n      }\n\n      // 4) Last-resort: raw emoji glyph\n      buttonElement.textContent = emoji;\n    };\n\n    // show success icon (use mapper if present)\n    renderEmoji('\u2705', 'check');\n    buttonElement.classList.add('zoro-copied');\n\n    // revert after 2s (store timer so we can cancel on repeated clicks)\n    buttonElement._copyTimeout = setTimeout(() => {\n      renderEmoji('\uD83D\uDCCB', 'clipboard-list');\n      buttonElement.classList.remove('zoro-copied');\n      buttonElement._copyTimeout = null;\n    }, 2000);\n\n  } catch (err) {\n    // fallback copy behaviour (your existing fallback method)\n    this.fallbackCopyTextToClipboard(text, buttonElement);\n  }\n}\n\n  fallbackCopyTextToClipboard(text, buttonElement) {\n    const textArea = document.createElement(\"textarea\");\n    textArea.value = text;\n    textArea.style.position = \"fixed\";\n    textArea.style.left = \"-999999px\";\n    textArea.style.top = \"-999999px\";\n    document.body.appendChild(textArea);\n    textArea.focus();\n    textArea.select();\n    \n    try {\n      document.execCommand('copy');\n      buttonElement.innerHTML = '\u2705';\n      buttonElement.classList.add('zoro-copied');\n      \n      setTimeout(() => {\n        buttonElement.innerHTML = '\uD83D\uDCCB';\n        buttonElement.classList.remove('zoro-copied');\n      }, 2000);\n    } catch (err) {\n      buttonElement.innerHTML = '\u274C';\n      setTimeout(() => {\n        buttonElement.innerHTML = '\uD83D\uDCCB';\n      }, 2000);\n    }\n    \n    document.body.removeChild(textArea);\n  }\n\n  updatePanelContent(panel, media, malData = null, imdbData = null) {\n    const content = panel.querySelector('.panel-content');\n    // Remove loading placeholder if present\n    const loadingSection = content.querySelector('.loading-section');\n    if (loadingSection) loadingSection.remove();\n    if (media.type === 'ANIME' && media.nextAiringEpisode && !content.querySelector('.airing-section')) {\n      const airingSection = this.createAiringSection(media.nextAiringEpisode);\n      const metadataSection = content.querySelector('.metadata-section');\n      if (metadataSection) {\n        metadataSection.insertAdjacentElement('afterend', airingSection);\n      } else {\n        const headerSection = content.querySelector('.panel-header');\n        if (headerSection) {\n          headerSection.insertAdjacentElement('afterend', airingSection);\n        }\n      }\n    }\n   \n    \n    if (media.description) {\n      const existingSynopsis = content.querySelector('.synopsis-section');\n      if (existingSynopsis) {\n        const newSynopsis = this.createSynopsisSection(media.description);\n        content.replaceChild(newSynopsis, existingSynopsis);\n      } else {\n        // If synopsis did not exist (TMDb defer), append it before links\n        const linksSection = content.querySelector('.external-links-section');\n        const synopsis = this.createSynopsisSection(media.description);\n        if (linksSection) content.insertBefore(synopsis, linksSection);\n        else content.appendChild(synopsis);\n      }\n    }\n\n    if (media.genres?.length > 0) {\n      console.log('[Details][Genres] Incoming genres before mapping:', media.genres);\n      const mappedGenres = this.mapTmdbGenresIfNeeded(media.genres, media.type);\n      console.log('[Details][Genres] Mapped genres:', mappedGenres);\n      const existingGenres = content.querySelector('.genres-section');\n      const genresSection = this.createGenresSection(mappedGenres);\n      if (existingGenres) {\n        content.replaceChild(genresSection, existingGenres);\n      } else {\n        const synopsisSection = content.querySelector('.synopsis-section');\n        if (synopsisSection) {\n          content.insertBefore(genresSection, synopsisSection);\n        } else {\n          content.appendChild(genresSection);\n        }\n      }\n    }\n\n    // Always rebuild external links after updates (ids like Simkl/TMDb may appear later)\n    const existingLinksSection = content.querySelector('.external-links-section');\n    if (existingLinksSection) {\n      const newLinksSection = this.createExternalLinksSection(media);\n      content.replaceChild(newLinksSection, existingLinksSection);\n    }\n\n    // Show stats for anime (AniList/MAL) or for movies/TV (OMDb/IMDb; else TMDb fallback)\n    const shouldShowStats = (media.type === 'ANIME' && media.averageScore > 0) || malData || imdbData || (media.type !== 'ANIME' && (imdbData || typeof media.averageScore === 'number'));\n    if (shouldShowStats) {\n      console.log('[Details][Stats] Building stats section', { type: media.type, hasImdb: !!imdbData, averageScore: media.averageScore });\n      const existingStats = content.querySelector('.stats-section');\n      const newStats = this.createStatisticsSection(media, malData, imdbData);\n      if (existingStats) {\n        content.replaceChild(newStats, existingStats);\n      } else {\n        // Add statistics section if it doesn't exist (for Simkl entries)\n        const synopsisSection = content.querySelector('.synopsis-section');\n        if (synopsisSection) {\n          content.insertBefore(newStats, synopsisSection);\n        } else {\n          content.appendChild(newStats);\n        }\n      }\n    }\n  }\n\n  createAiringSection(nextAiringEpisode) {\n    // Validate airing data structure\n    if (!nextAiringEpisode || !nextAiringEpisode.airingAt || !nextAiringEpisode.episode) {\n      return null;\n    }\n\n    const section = document.createElement('div');\n    section.className = 'panel-section airing-section';\n\n    const title = document.createElement('h3');\n    title.className = 'section-title';\n    title.textContent = 'Next Airing';\n    section.appendChild(title);\n\n    const airingInfo = document.createElement('div');\n    airingInfo.className = 'airing-info';\n\n    const airingTime = new Date(nextAiringEpisode.airingAt * 1000);\n\n    const episodeInfo = document.createElement('div');\n    episodeInfo.className = 'airing-episode';\n    episodeInfo.innerHTML = `<span class=\"airing-label\">Episode:</span> <span class=\"airing-value\">${nextAiringEpisode.episode}</span>`;\n    airingInfo.appendChild(episodeInfo);\n\n    const dateInfo = document.createElement('div');\n    dateInfo.className = 'airing-date';\n    dateInfo.innerHTML = `<span class=\"airing-label\">Date:</span> <span class=\"airing-value\">${this.formatAiringDate(airingTime)}</span>`;\n    airingInfo.appendChild(dateInfo);\n\n    const timeInfo = document.createElement('div');\n    timeInfo.className = 'airing-time';\n    timeInfo.innerHTML = `<span class=\"airing-label\">Time:</span> <span class=\"airing-value\">${this.formatAiringTimeOnly(airingTime)}</span>`;\n    airingInfo.appendChild(timeInfo);\n\n    if (nextAiringEpisode.timeUntilAiring > 0) {\n      const countdownInfo = document.createElement('div');\n      countdownInfo.className = 'airing-countdown';\n      countdownInfo.innerHTML = `<span class=\"airing-label\">In:</span> <span class=\"airing-value countdown-value\">${this.formatTimeUntilAiring(nextAiringEpisode.timeUntilAiring)}</span>`;\n      airingInfo.appendChild(countdownInfo);\n\n      this.startCountdown(countdownInfo.querySelector('.countdown-value'), nextAiringEpisode.timeUntilAiring);\n    }\n\n    section.appendChild(airingInfo);\n    return section;\n  }\n\n  formatAiringDate(date) {\n    const options = {\n      day: '2-digit',\n      month: 'short',\n      year: 'numeric'\n    };\n    return date.toLocaleDateString('en-GB', options);\n  }\n\n  formatAiringTimeOnly(date) {\n    const options = {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false\n    };\n    return date.toLocaleTimeString('en-GB', options);\n  }\n\n  formatTimeUntilAiring(seconds) {\n    const days = Math.floor(seconds / (24 * 3600));\n    const hours = Math.floor((seconds % (24 * 3600)) / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n\n    if (days > 0) {\n      return `${days}d ${hours}h ${minutes}m`;\n    } else if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    } else {\n      return `${minutes}m`;\n    }\n  }\n\n  startCountdown(element, initialSeconds) {\n    let remainingSeconds = initialSeconds;\n    \n    const updateCountdown = () => {\n      if (remainingSeconds <= 0) {\n        element.textContent = 'Aired!';\n        return;\n      }\n      \n      element.textContent = this.formatTimeUntilAiring(remainingSeconds);\n      remainingSeconds--;\n    };\n\n    updateCountdown();\n    const intervalId = setInterval(updateCountdown, 60000);\n    element.dataset.intervalId = intervalId;\n  }\n\n  createSynopsisSection(description) {\n    const section = document.createElement('div');\n    section.className = 'panel-section synopsis-section zoro-copy-container';\n\n    const title = document.createElement('h3');\n    title.className = 'section-title';\n    title.textContent = 'Synopsis';\n    section.appendChild(title);\n\n    const synopsis = document.createElement('div');\n    synopsis.className = 'synopsis-content';\n    \n    if (!description || typeof description !== 'string' || !description.trim()) {\n      synopsis.className += ' synopsis-placeholder';\n      synopsis.textContent = 'Synopsis not available yet.';\n      section.appendChild(synopsis);\n      return section;\n    }\n    \n    const cleanDescription = description\n      .replace(/<br\\s*\\/?>/gi, '\\n')\n      .replace(/<[^>]*>/g, '')\n      .replace(/\\n\\s*\\n/g, '\\n\\n')\n      .trim();\n\n    if (!cleanDescription) {\n      synopsis.className += ' synopsis-placeholder';\n      synopsis.textContent = 'Synopsis is empty.';\n      section.appendChild(synopsis);\n      return section;\n    }\n    \n    synopsis.textContent = cleanDescription;\n    section.appendChild(synopsis);\n\n    // Add copy button for synopsis\n    const copyBtn = this.createCopyButton('synopsis', description);\n    section.appendChild(copyBtn);\n\n    return section;\n  }\n\n  createMetadataSection(media, entry) {\n    const section = document.createElement('div');\n    section.className = 'panel-section metadata-section';\n\n    const title = document.createElement('h3');\n    title.className = 'section-title';\n    title.textContent = 'Details';\n    section.appendChild(title);\n\n    const metaGrid = document.createElement('div');\n    metaGrid.className = 'metadata-grid';\n\n    if (media.format) {\n      this.addMetadataItem(metaGrid, 'Format', this.formatDisplayName(media.format));\n    }\n    if (media.status) {\n      this.addMetadataItem(metaGrid, 'Status', this.formatDisplayName(media.status));\n    }\n\n    section.appendChild(metaGrid);\n    return section;\n  }\n\n  createStatisticsSection(media, malData = null, imdbData = null) {\n    const section = document.createElement('div');\n    section.className = 'panel-section stats-section';\n\n    const title = document.createElement('h3');\n    title.className = 'section-title';\n    title.textContent = 'Statistics';\n    section.appendChild(title);\n\n    const statsGrid = document.createElement('div');\n    statsGrid.className = 'stats-grid';\n\n    if (media.type === 'ANIME' || media.type === 'MANGA') {\n      if (media.averageScore > 0) {\n        const scoreOutOf10 = (media.averageScore / 10).toFixed(1);\n        console.log('[Details][Stats] AniList score used', scoreOutOf10);\n        this.addStatItem(statsGrid, 'AniList Score', `${scoreOutOf10}`, 'score-stat anilist-stat');\n      }\n      if (malData) {\n        if (malData.score) {\n          console.log('[Details][Stats] MAL score used', malData.score);\n          this.addStatItem(statsGrid, 'MAL Score', `${malData.score}`, 'score-stat mal-stat');\n        }\n        if (malData.scored_by) {\n          this.addStatItem(statsGrid, 'MAL Ratings', malData.scored_by.toLocaleString(), 'count-stat');\n        }\n        if (malData.rank) {\n          this.addStatItem(statsGrid, 'MAL Rank', `#${malData.rank}`, 'rank-stat');\n        }\n      }\n    } else {\n      // Movies/TV: prefer OMDb (IMDb). If missing, fallback to TMDb data on entry\n      const tmdbVoteAverage = typeof media.averageScore === 'number' ? (media.averageScore / 10) : null;\n      const tmdbVoteCount = media?._zoroMeta?.trending?.voteCount || null;\n\n      // IMDb (OMDb) stats if available\n      if (imdbData) {\n        if (imdbData.score) {\n          console.log('[Details][Stats] IMDb (OMDb) score', imdbData.score);\n          this.addStatItem(statsGrid, 'IMDB Score', `${imdbData.score}`, 'score-stat imdb-stat');\n        }\n        if (imdbData.scored_by) {\n          this.addStatItem(statsGrid, 'IMDB Ratings', imdbData.scored_by.toLocaleString(), 'count-stat');\n        }\n      }\n\n      // TMDb stats alongside IMDb when present\n      if (tmdbVoteAverage != null) {\n        console.log('[Details][Stats] TMDb score', tmdbVoteAverage, 'votes', tmdbVoteCount);\n        this.addStatItem(statsGrid, 'TMDb Score', `${tmdbVoteAverage.toFixed(1)}`, 'score-stat tmdb-stat');\n        if (tmdbVoteCount != null) {\n          this.addStatItem(statsGrid, 'TMDb Ratings', Number(tmdbVoteCount).toLocaleString(), 'count-stat');\n        }\n      }\n    }\n\n    section.appendChild(statsGrid);\n    return section;\n  }\n\n  addMetadataItem(container, label, value) {\n    const item = document.createElement('div');\n    item.className = 'metadata-item';\n    item.innerHTML = `<span class=\"metadata-label\">${label}</span><span class=\"metadata-value\">${value}</span>`;\n    container.appendChild(item);\n  }\n\n  addStatItem(container, label, value, className = '') {\n    const item = document.createElement('div');\n    item.className = `stat-item ${className}`;\n    item.innerHTML = `<span class=\"stat-label\">${label}</span><span class=\"stat-value\">${value}</span>`;\n    container.appendChild(item);\n  }\n\n  createHeaderSection(media) {\n    const header = document.createElement('div');\n    header.className = 'panel-header';\n\n    const titleSection = document.createElement('div');\n    titleSection.className = 'title-section zoro-copy-container';\n    \n    const mainTitle = media.title?.english || media.title?.romaji || 'Unknown Title';\n    titleSection.innerHTML = `<h2 class=\"main-title\">${mainTitle}</h2>`;\n\n    if (media.title?.romaji && media.title?.english && media.title.romaji !== media.title.english) {\n      titleSection.innerHTML += `<div class=\"alt-title\">${media.title.romaji}</div>`;\n    }\n    if (media.title?.native) {\n      titleSection.innerHTML += `<div class=\"native-title\">${media.title.native}</div>`;\n    }\n\n    // Add copy button for titles\n    const copyBtn = this.createCopyButton('title', media);\n    titleSection.appendChild(copyBtn);\n\n    header.appendChild(titleSection);\n\n    if (media.format || (media.season && media.seasonYear)) {\n      const formatInfo = document.createElement('div');\n      formatInfo.className = 'format-info';\n      \n      let html = '';\n      if (media.format) {\n        html += `<span class=\"format-badge-large\">${this.formatDisplayName(media.format)}</span>`;\n      }\n      if (media.season && media.seasonYear) {\n        html += `<span class=\"season-info\">${this.capitalize(media.season)} ${media.seasonYear}</span>`;\n      }\n      \n      formatInfo.innerHTML = html;\n      header.appendChild(formatInfo);\n    }\n\n    return header;\n  }\n\n  createGenresSection(genres) {\n    const section = document.createElement('div');\n    section.className = 'panel-section genres-section';\n\n    const displayGenres = Array.isArray(genres) ? genres.map(g => String(g)) : [];\n    console.log('[Details][Genres] Rendering genres (final):', displayGenres);\n\n    section.innerHTML = `\n      <h3 class=\"section-title\">Genres</h3>\n      <div class=\"genres-container\">\n        ${displayGenres.map(genre => `<span class=\"genre-tag\">${genre}</span>`).join('')}\n      </div>\n    `;\n\n    return section;\n  }\n\n  mapTmdbGenresIfNeeded(genres, mediaType) {\n    if (!Array.isArray(genres)) return [];\n    // If already strings, return as is\n    const areStrings = genres.every(g => typeof g === 'string');\n    if (areStrings) return genres;\n    // Convert numbers / numeric strings to names using TMDb maps\n    const movieMap = {\n      28: 'Action', 12: 'Adventure', 16: 'Animation', 35: 'Comedy', 80: 'Crime', 99: 'Documentary',\n      18: 'Drama', 10751: 'Family', 14: 'Fantasy', 36: 'History', 27: 'Horror', 10402: 'Music',\n      9648: 'Mystery', 10749: 'Romance', 878: 'Science Fiction', 10770: 'TV Movie', 53: 'Thriller',\n      10752: 'War', 37: 'Western'\n    };\n    const tvMap = {\n      10759: 'Action & Adventure', 16: 'Animation', 35: 'Comedy', 80: 'Crime', 99: 'Documentary', 18: 'Drama',\n      10751: 'Family', 10762: 'Kids', 9648: 'Mystery', 10763: 'News', 10764: 'Reality', 10765: 'Sci-Fi & Fantasy',\n      10766: 'Soap', 10767: 'Talk', 10768: 'War & Politics', 37: 'Western'\n    };\n    const useTv = (mediaType === 'TV');\n    const map = useTv ? tvMap : movieMap;\n    return genres.map(g => {\n      const id = typeof g === 'string' ? parseInt(g) : g;\n      return map[id] || String(g);\n    });\n  }\n\n  createLoadingSection() {\n    const section = document.createElement('div');\n    section.className = 'panel-section loading-section';\n    const title = document.createElement('h3');\n    title.className = 'section-title';\n    title.textContent = 'Loading details\u2026';\n    section.appendChild(title);\n    const body = document.createElement('div');\n    body.className = 'loading-body';\n    body.textContent = 'Fetching details from Simkl\u2026';\n    section.appendChild(body);\n    return section;\n  }\n\n  createExternalLinksSection(media) {\n    const section = document.createElement('div');\n    section.className = 'panel-section external-links-section';\n\n    const title = document.createElement('h3');\n    title.className = 'section-title';\n    title.textContent = 'External Links';\n    section.appendChild(title);\n\n    const linksContainer = document.createElement('div');\n    linksContainer.className = 'external-links-container';\n\n    // AniList button (for anime)\n    if (media.type === 'ANIME' || media.type === 'MANGA') {\n      const anilistBtn = document.createElement('button');\n      anilistBtn.className = 'external-link-btn anilist-btn';\n      anilistBtn.innerHTML = '\uD83D\uDD17 View on AniList';\n      anilistBtn.onclick = (e) => {\n        e.stopPropagation();\n        const url = this.plugin.getAniListUrl ? this.plugin.getAniListUrl(media.id, media.type) : `https://anilist.co/${media.type.toLowerCase()}/${media.id}`;\n        window.open(url, '_blank');\n      };\n      linksContainer.appendChild(anilistBtn);\n    }\n\n    // MAL button (for anime)\n    if (media.idMal) {\n      const malBtn = document.createElement('button');\n      malBtn.className = 'external-link-btn mal-btn';\n      malBtn.innerHTML = '\uD83D\uDD17 View on MAL';\n      malBtn.onclick = (e) => {\n        e.stopPropagation();\n        const type = media.type === 'MANGA' ? 'manga' : 'anime';\n        window.open(`https://myanimelist.net/${type}/${media.idMal}`, '_blank');\n      };\n      linksContainer.appendChild(malBtn);\n    }\n\n    // Simkl button (for movies and TV only, not anime or manga)\nif (media.type !== 'ANIME' && media.type !== 'MANGA') {\n  const simklId = media?.ids?.simkl || media?.id;\n  if (simklId) {\n    const simklBtn = document.createElement('button');\n    simklBtn.className = 'external-link-btn simkl-btn';\n    simklBtn.innerHTML = '\uD83D\uDD17 View on Simkl';\n    simklBtn.onclick = (e) => {\n      e.stopPropagation();\n      const mediaType = media.type === 'MOVIE' ? 'movies' : 'tv';\n      const url = `https://simkl.com/${mediaType}/${simklId}`;\n      window.open(url, '_blank');\n    };\n    linksContainer.appendChild(simklBtn);\n  }\n}\n\n    // IMDB button (for movies/TV)\n    if (media.idImdb) {\n      const imdbBtn = document.createElement('button');\n      imdbBtn.className = 'external-link-btn imdb-btn';\n      imdbBtn.innerHTML = '\uD83D\uDD17 View on IMDB';\n      imdbBtn.onclick = (e) => {\n        e.stopPropagation();\n        window.open(`https://www.imdb.com/title/${media.idImdb}/`, '_blank');\n      };\n      linksContainer.appendChild(imdbBtn);\n    }\n\n    // TMDB button (for movies/TV)\n    if (media.idTmdb || media?.ids?.tmdb) {\n      const tmdbBtn = document.createElement('button');\n      tmdbBtn.className = 'external-link-btn tmdb-btn';\n      tmdbBtn.innerHTML = '\uD83D\uDD17 View on TMDB';\n      tmdbBtn.onclick = (e) => {\n        e.stopPropagation();\n        const typeHint = (media.type || media.format || media?._zoroMeta?.mediaType || '').toString().toUpperCase();\n        const isMovie = typeHint.includes('MOVIE');\n        const mediaType = isMovie ? 'movie' : 'tv';\n        const tmdbId = media.idTmdb || media?.ids?.tmdb;\n        console.log('[Details][Links] Opening TMDb', { mediaType, tmdbId, typeHint });\n        window.open(`https://www.themoviedb.org/${mediaType}/${tmdbId}`, '_blank');\n      };\n      linksContainer.appendChild(tmdbBtn);\n    }\n\n    // NEW: Custom Search Buttons using the CustomExternalURL class\n    this.plugin.moreDetailsPanel.customExternalURL.createSearchButtons(media, linksContainer);\n\n    section.appendChild(linksContainer);\n    return section;\n  }\n  \n  extractDomainName(url) {\n    try {\n      const urlObj = new URL(url);\n      let domain = urlObj.hostname;\n      \n      // Remove common prefixes\n      domain = domain.replace(/^www\\./, '');\n      \n      // Remove common TLDs and get the main part\n      const parts = domain.split('.');\n      if (parts.length >= 2) {\n        // Take the second-to-last part (main domain name)\n        domain = parts[parts.length - 2];\n      }\n      \n      // Capitalize first letter\n      return domain.charAt(0).toUpperCase() + domain.slice(1).toLowerCase();\n    } catch (e) {\n      return 'Search';\n    }\n  }\n  \n  getBestTitle(media) {\n    return media.title?.english || \n           media.title?.romaji || \n           media.title?.native || \n           'Unknown Title';\n  }\n\n  buildSearchUrl(template, title) {\n    try {\n      const encodedTitle = encodeURIComponent(title);\n      return template + encodedTitle;\n    } catch (e) {\n      return template + title.replace(/[^a-zA-Z0-9\\s]/g, '').replace(/\\s+/g, '+');\n    }\n  }\n\n  parseSearchUrls(urlString) {\n    if (!urlString || urlString.trim() === '') {\n      return [];\n    }\n    \n    return urlString.split(',')\n      .map(url => url.trim())\n      .filter(url => url.length > 0);\n  }\n\n  formatDisplayName(str) {\n    if (!str) return '';\n    return str.replace(/_/g, ' ')\n              .split(' ')\n              .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n              .join(' ');\n  }\n\n  capitalize(str) {\n    if (!str) return '';\n    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n  }\n\n  positionPanel(panel, triggerElement) {\n    // Ensure base class is present without overwriting any existing classes (e.g., zoro-inline)\n    if (!panel.classList.contains('zoro-more-details-panel')) {\n      panel.classList.add('zoro-more-details-panel');\n    }\n  }\n\n  cleanupCountdowns(panel) {\n    const countdownElements = panel.querySelectorAll('.countdown-value[data-interval-id]');\n    countdownElements.forEach(element => {\n      const intervalId = element.dataset.intervalId;\n      if (intervalId) {\n        clearInterval(parseInt(intervalId));\n      }\n    });\n  }\n}\n\nexport { RenderDetailPanel };", "// No obsidian imports needed here\n\nclass DetailPanelSource {\n  constructor(plugin) {\n    this.plugin = plugin;\n  }\n\n  async convertMalToAnilistId(malId, malType) {\n    const cacheKey = this.plugin.cache.structuredKey('conversion', 'mal_to_anilist', `${malId}_${malType || 'unknown'}`);\n    const cached = this.plugin.cache.get(cacheKey, { scope: 'mediaData', source: 'anilist' });\n    if (cached) return cached;\n\n    const anilistType = this.convertMalTypeToAnilistType(malType);\n    let result = null;\n    if (!anilistType) {\n      for (const tryType of ['ANIME', 'MANGA']) {\n        result = await this.tryConvertWithType(malId, tryType);\n        if (result) break;\n      }\n    } else {\n      result = await this.tryConvertWithType(malId, anilistType);\n    }\n\n    if (result) {\n      this.plugin.cache.set(cacheKey, result, {\n        scope: 'mediaData',\n        source: 'anilist',\n        ttl: 30 * 24 * 60 * 60 * 1000,\n        tags: ['conversion', 'mal_to_anilist']\n      });\n    }\n    return result;\n  }\n\n  async tryConvertWithType(malId, anilistType) {\n    const query = `query($idMal: Int, $type: MediaType) { Media(idMal: $idMal, type: $type) { id type } }`;\n    const variables = { idMal: malId, type: anilistType };\n\n    try {\n      let response;\n      if (this.plugin.fetchAniListData) {\n        response = await this.plugin.fetchAniListData(query, variables);\n      } else {\n        const apiResponse = await fetch('https://graphql.anilist.co', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ query, variables })\n        });\n        response = await apiResponse.json();\n      }\n      const anilistId = response?.data?.Media?.id;\n      const anilistTypeResult = response?.data?.Media?.type;\n      if (anilistId) return { id: anilistId, type: anilistTypeResult };\n      return null;\n    } catch {\n      return null;\n    }\n  }\n\n  convertMalTypeToAnilistType(malType) {\n    if (!malType) return null;\n    const normalizedType = malType.toString().toLowerCase();\n    const typeMap = {\n      'anime': 'ANIME', 'tv': 'ANIME', 'movie': 'ANIME', 'ova': 'ANIME', 'ona': 'ANIME', 'special': 'ANIME', 'music': 'ANIME',\n      'manga': 'MANGA', 'manhwa': 'MANGA', 'manhua': 'MANGA', 'novel': 'MANGA', 'light_novel': 'MANGA', 'one_shot': 'MANGA'\n    };\n    return typeMap[normalizedType] || null;\n  }\n\n  shouldFetchDetailedData(media) {\n    const missingBasicData = !media.description || !media.genres || !media.averageScore;\n    const mediaKind = media?.type || media?.format;\n    const isAnimeWithoutAiring = mediaKind === 'ANIME' && !media.nextAiringEpisode;\n    // Force fetch for TMDb movies/TV to route through Simkl detail panel\n    const isTmdbMovieOrTv = ((media?._zoroMeta?.source || '').toLowerCase() === 'tmdb')\n      && (mediaKind === 'MOVIE' || mediaKind === 'TV');\n    return missingBasicData || isAnimeWithoutAiring || isTmdbMovieOrTv;\n  }\n\n  extractSourceFromEntry(entry) {\n    return entry?._zoroMeta?.source || this.plugin.settings.defaultApiSource || 'anilist';\n  }\n\n  extractMediaTypeFromEntry(entry) {\n    return entry?._zoroMeta?.mediaType || entry?.media?.type || null;\n  }\n\n  async fetchDetailedData(mediaId, entryOrSource = null, mediaType = null) {\n    let source, resolvedMediaType;\n    if (typeof entryOrSource === 'object' && entryOrSource !== null) {\n      source = this.extractSourceFromEntry(entryOrSource);\n      resolvedMediaType = this.extractMediaTypeFromEntry(entryOrSource);\n    } else if (typeof entryOrSource === 'string') {\n      source = entryOrSource;\n      resolvedMediaType = mediaType;\n    } else {\n      source = this.plugin.settings.defaultApiSource || 'anilist';\n      resolvedMediaType = mediaType;\n    }\n\n    let targetId = mediaId;\n    let originalMalId = null;\n\n    if (source === 'mal') {\n      originalMalId = mediaId;\n      const conversionResult = await this.convertMalToAnilistId(mediaId, resolvedMediaType);\n      if (!conversionResult || !conversionResult.id) {\n        throw new Error(`Could not convert MAL ID ${mediaId} to AniList ID`);\n      }\n      targetId = conversionResult.id;\n    } else if (source === 'simkl' && resolvedMediaType === 'ANIME') {\n      // For Simkl anime entries, use the exact same mechanism as MAL entries\n      if (typeof entryOrSource === 'object' && entryOrSource?.media?.idMal) {\n        originalMalId = entryOrSource.media.idMal;\n        const conversionResult = await this.convertMalToAnilistId(entryOrSource.media.idMal, resolvedMediaType);\n        if (!conversionResult || !conversionResult.id) {\n          throw new Error(`Could not convert MAL ID ${entryOrSource.media.idMal} to AniList ID for Simkl anime`);\n        }\n        targetId = conversionResult.id;\n              } else {\n          // If no MAL ID found, just return null without showing annoying notice\n          return null;\n        }\n    } else if (source === 'simkl' && (resolvedMediaType === 'MOVIE' || resolvedMediaType === 'TV')) {\n      // For Simkl movies and TV shows, fetch detailed data from Simkl API\n      if (typeof entryOrSource === 'object' && entryOrSource?.media?.id) {\n        const detailedSimklData = await this.fetchSimklDetailedData(entryOrSource.media.id, resolvedMediaType);\n        if (detailedSimklData) {\n          // Merge the detailed data with the original media data\n          return {\n            ...entryOrSource.media,\n            ...detailedSimklData,\n            // Ensure explicit media type for correct panel rendering\n            type: resolvedMediaType,\n            // Ensure we keep the original ID and other essential fields\n            id: entryOrSource.media.id,\n            idImdb: entryOrSource.media.idImdb || detailedSimklData.ids?.imdb || null,\n            idTmdb: entryOrSource.media.idTmdb || detailedSimklData.ids?.tmdb || null,\n            // Map Simkl overview to description\n            description: detailedSimklData.overview || entryOrSource.media.overview || null,\n            // Simkl does not provide airing data in their API\n            nextAiringEpisode: null\n          };\n        }\n        // Fallback to original media data if detailed fetch fails\n        return entryOrSource.media;\n              } else {\n          return null;\n        }\n    } else if (source === 'tmdb' && (resolvedMediaType === 'MOVIE' || resolvedMediaType === 'TV')) {\n      // Route TMDb movies/TV through Simkl detail panel by resolving Simkl ID first\n      try {\n        const mediaObj = (typeof entryOrSource === 'object' && entryOrSource?.media) ? entryOrSource.media : null;\n        const tmdbId = Number(mediaObj?.idTmdb || mediaId || mediaObj?.ids?.tmdb || 0) || 0;\n        const imdbId = mediaObj?.idImdb || mediaObj?.ids?.imdb || null;\n\n        const simklId = await this.resolveSimklIdFromExternal(tmdbId, imdbId, resolvedMediaType);\n        if (simklId) {\n          const detailedSimklData = await this.fetchSimklDetailedData(simklId, resolvedMediaType);\n          if (detailedSimklData) {\n            return {\n              ...mediaObj,\n              ...detailedSimklData,\n              // Ensure explicit media type for correct panel rendering\n              type: resolvedMediaType,\n              // Preserve original TMDb id on the media object\n              id: mediaObj?.id ?? tmdbId,\n              idImdb: mediaObj?.idImdb || detailedSimklData.ids?.imdb || imdbId || null,\n              idTmdb: mediaObj?.idTmdb || tmdbId || detailedSimklData.ids?.tmdb || null,\n              // Ensure Simkl ids are available under ids\n              ids: {\n                ...(detailedSimklData.ids || {}),\n                tmdb: mediaObj?.idTmdb || tmdbId || (detailedSimklData.ids?.tmdb ?? null),\n                imdb: mediaObj?.idImdb || imdbId || (detailedSimklData.ids?.imdb ?? null)\n              },\n              description: detailedSimklData.overview || mediaObj?.overview || mediaObj?.description || null,\n              nextAiringEpisode: null\n            };\n          }\n        }\n      } catch {}\n      // If resolution fails, just return the original media without changes\n      if (typeof entryOrSource === 'object' && entryOrSource?.media) return entryOrSource.media;\n      return null;\n    }\n\n    const stableCacheKey = this.plugin.cache.structuredKey('details', 'stable', targetId);\n    const dynamicCacheKey = this.plugin.cache.structuredKey('details', 'airing', targetId);\n\n    let stableData = this.plugin.cache.get(stableCacheKey, { scope: 'mediaDetails', source: 'anilist' });\n    let airingData = this.plugin.cache.get(dynamicCacheKey, { scope: 'mediaDetails', source: 'anilist' });\n\n    if (stableData && (stableData.type !== 'ANIME' || airingData)) {\n      const combinedData = { ...stableData };\n      if (airingData?.nextAiringEpisode) combinedData.nextAiringEpisode = airingData.nextAiringEpisode;\n      return combinedData;\n    }\n\n    const query = this.getDetailedMediaQuery();\n    const variables = { id: targetId };\n\n    let response;\n    if (this.plugin.fetchAniListData) {\n      response = await this.plugin.fetchAniListData(query, variables);\n    } else {\n      const apiResponse = await fetch('https://graphql.anilist.co', {\n        method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ query, variables })\n      });\n      response = await apiResponse.json();\n    }\n\n    if (!response?.data?.Media) throw new Error('No media data received');\n    const data = response.data.Media;\n    if (originalMalId) data.originalMalId = originalMalId;\n\n    const { nextAiringEpisode, ...stableDataOnly } = data;\n    this.plugin.cache.set(stableCacheKey, stableDataOnly, { scope: 'mediaDetails', source: 'anilist', tags: ['details', 'stable', data.type?.toLowerCase()] });\n    if (data.type === 'ANIME' && nextAiringEpisode) {\n      this.plugin.cache.set(dynamicCacheKey, { nextAiringEpisode }, { scope: 'mediaDetails', source: 'anilist', tags: ['details', 'airing', 'anime'] });\n    }\n    return data;\n  }\n\n  async fetchMALData(malId, mediaType) {\n    if (!malId) return null;\n    \n    // Use stable/dynamic caching system like AniList\n    const stableCacheKey = this.plugin.cache.structuredKey('mal', 'stable', `${malId}_${mediaType}`);\n    const dynamicCacheKey = this.plugin.cache.structuredKey('mal', 'airing', `${malId}_${mediaType}`);\n    \n    let stableData = this.plugin.cache.get(stableCacheKey, { scope: 'mediaDetails', source: 'mal' });\n    let airingData = this.plugin.cache.get(dynamicCacheKey, { scope: 'mediaDetails', source: 'mal' });\n    \n    if (stableData) {\n      const combinedData = { ...stableData };\n      if (airingData?.nextAiringEpisode) combinedData.nextAiringEpisode = airingData.nextAiringEpisode;\n      return combinedData;\n    }\n\n    try {\n      const type = mediaType === 'MANGA' ? 'manga' : 'anime';\n      const response = await fetch(`https://api.jikan.moe/v4/${type}/${malId}`);\n      if (!response.ok) throw new Error(`Jikan API error: ${response.status}`);\n      const data = (await response.json())?.data;\n      \n      if (data) {\n        // Separate stable and dynamic data\n        const { nextAiringEpisode, ...stableDataOnly } = data;\n        \n        // Cache stable data using cache class TTL\n        this.plugin.cache.set(stableCacheKey, stableDataOnly, { \n          scope: 'mediaDetails', \n          source: 'mal', \n          tags: ['mal', 'details', 'stable', type] \n        });\n        \n        // Cache airing data using cache class TTL\n        if (nextAiringEpisode) {\n          this.plugin.cache.set(dynamicCacheKey, { nextAiringEpisode }, { \n            scope: 'mediaDetails', \n            source: 'mal', \n            tags: ['mal', 'details', 'airing', type] \n          });\n        }\n        \n        return data;\n      }\n      return null;\n    } catch {\n      return null;\n    }\n  }\n\n  async fetchSimklDetailedData(simklId, mediaType) {\n    if (!simklId) return null;\n    \n    // Use stable caching system (Simkl doesn't have airing data)\n    const stableCacheKey = this.plugin.cache.structuredKey('simkl', 'stable', `${simklId}_${mediaType}`);\n    const cached = this.plugin.cache.get(stableCacheKey, { scope: 'mediaDetails', source: 'simkl' });\n    if (cached) return cached;\n\n    try {\n      // Use correct Simkl API endpoints for detailed data\n      const endpoint = mediaType === 'MOVIE' ? 'movies' : 'tv';\n      const url = `https://api.simkl.com/${endpoint}/${simklId}?extended=full&client_id=${this.plugin.settings.simklClientId}`;\n      \n      const response = await fetch(url);\n      if (!response.ok) throw new Error(`Simkl API error: ${response.status}`);\n      const data = await response.json();\n      \n      if (data) {\n        // Simkl does not provide airing data in their API\n        // Remove any next_episode field if it exists (it shouldn't)\n        if (data.next_episode) {\n          delete data.next_episode;\n        }\n        \n        // Cache stable data using cache class TTL\n        this.plugin.cache.set(stableCacheKey, data, { \n          scope: 'mediaDetails', \n          source: 'simkl', \n          tags: ['simkl', 'details', 'stable', endpoint] \n        });\n        \n        return data;\n      }\n      return null;\n    } catch {\n      return null;\n    }\n  }\n\n\n\n\n\n  async fetchIMDBData(imdbId, mediaType, simklData = null) {\n    if (!imdbId) return null;\n    \n    // First, check if Simkl already provides IMDB rating data\n    if (simklData && simklData._rawData) {\n      const rawData = simklData._rawData;\n      // Check if Simkl provides IMDB rating data directly\n      if (rawData.imdb_rating || rawData.imdb_score || rawData.imdb_votes) {\n        const imdbData = {\n          score: rawData.imdb_rating || rawData.imdb_score || null,\n          scored_by: rawData.imdb_votes || null,\n          rank: null,\n          imdbID: imdbId\n        };\n        return imdbData;\n      }\n    }\n    \n    // Fallback to OMDB API if Simkl doesn't provide IMDB rating data\n    const stableCacheKey = this.plugin.cache.structuredKey('imdb', 'stable', `${imdbId}_${mediaType}`);\n    const cached = this.plugin.cache.get(stableCacheKey, { scope: 'mediaDetails', source: 'imdb' });\n    if (cached) return cached;\n\n    try {\n      console.log('[Details][OMDb] Fetching OMDb data', { imdbId, mediaType });\n      // Use OMDB API to get IMDB data (free and reliable)\n      const response = await fetch(`https://www.omdbapi.com/?i=${imdbId}&apikey=fc1fef96`);\n      if (!response.ok) {\n        console.log('[Details][OMDb] HTTP error', response.status);\n        throw new Error(`OMDB API error: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('[Details][OMDb] Response', data?.Response, { imdbRating: data?.imdbRating, imdbVotes: data?.imdbVotes });\n      \n      if (data.Response === 'True') {\n        // Transform OMDB data to match our expected format\n        const transformedData = {\n          score: parseFloat(data.imdbRating) || null,\n          scored_by: data.imdbVotes ? parseInt(data.imdbVotes.replace(/,/g, '')) : null,\n          rank: null, // OMDB doesn't provide rank\n          title: data.Title,\n          year: data.Year,\n          plot: data.Plot,\n          director: data.Director,\n          actors: data.Actors,\n          genre: data.Genre,\n          runtime: data.Runtime,\n          awards: data.Awards,\n          imdbID: data.imdbID\n        };\n        \n        // Cache stable data using cache class TTL\n        this.plugin.cache.set(stableCacheKey, transformedData, { \n          scope: 'mediaDetails', \n          source: 'imdb', \n          tags: ['imdb', 'details', 'stable'] \n        });\n        \n        return transformedData;\n      }\n      return null;\n    } catch (e) {\n      console.log('[Details][OMDb] Fetch failed', e?.message || e);\n      return null;\n    }\n  }\n\n  async fetchAndUpdateData(mediaId, entryOrSource = null, mediaTypeOrCallback = null, onUpdate = null) {\n    let source, mediaType, callback;\n    if (typeof entryOrSource === 'object' && entryOrSource !== null) {\n      source = this.extractSourceFromEntry(entryOrSource);\n      mediaType = this.extractMediaTypeFromEntry(entryOrSource);\n      callback = mediaTypeOrCallback;\n    } else if (typeof entryOrSource === 'string') {\n      source = entryOrSource;\n      if (typeof mediaTypeOrCallback === 'function') { mediaType = null; callback = mediaTypeOrCallback; }\n      else { mediaType = mediaTypeOrCallback; callback = onUpdate; }\n    } else {\n      source = this.plugin.settings.defaultApiSource || 'anilist';\n      mediaType = null;\n      callback = mediaTypeOrCallback;\n    }\n\n    try {\n      // Check for cached detail panel data first\n      const detailPanelCacheKey = this.plugin.cache.structuredKey('detailPanel', 'combined', `${source}_${mediaId}_${mediaType}`);\n      const cachedDetailPanel = this.plugin.cache.get(detailPanelCacheKey, { scope: 'mediaDetails', source: 'detailPanel' });\n      \n      if (cachedDetailPanel) {\n        // Use cached data if available, but try to enrich with OMDb if missing\n        const { detailedMedia, malData, imdbData } = cachedDetailPanel;\n        if (this.hasMoreData(detailedMedia)) callback(detailedMedia, null, null);\n        if (malData) callback(detailedMedia, malData, null);\n        if (imdbData) {\n          callback(detailedMedia, null, imdbData);\n        } else {\n          // Attempt OMDb fetch if this is a TMDb/Simkl movie/TV and we have/ can resolve IMDb id\n          const typeUpperCached = (mediaType || detailedMedia?.type || '').toString().toUpperCase();\n          const isMovieOrTvCached = typeUpperCached.includes('MOVIE') || typeUpperCached === 'TV' || typeUpperCached.includes('SHOW');\n          const isTmdbOrSimkl = (source === 'tmdb' || source === 'simkl');\n          if (isTmdbOrSimkl && isMovieOrTvCached) {\n            let imdbIdLocal = null;\n            if (typeof entryOrSource === 'object' && entryOrSource?.media) {\n              imdbIdLocal = entryOrSource.media.idImdb || entryOrSource.media.ids?.imdb || null;\n              if (imdbIdLocal) console.log('[Details][OMDb][Cache] Using IMDb from entry.media', imdbIdLocal);\n            }\n            if (!imdbIdLocal) {\n              imdbIdLocal = detailedMedia?.idImdb || detailedMedia?.ids?.imdb || null;\n              if (imdbIdLocal) console.log('[Details][OMDb][Cache] Using IMDb from cached detailedMedia', imdbIdLocal);\n            }\n            if (!imdbIdLocal && source === 'tmdb') {\n              try {\n                const tmdbId = detailedMedia?.idTmdb || detailedMedia?.ids?.tmdb || mediaId;\n                console.log('[Details][OMDb][Cache] Resolving IMDb via TMDb external_ids', { tmdbId, mediaType });\n                imdbIdLocal = await this.fetchImdbIdFromTmdb(tmdbId, typeUpperCached);\n                if (imdbIdLocal) console.log('[Details][OMDb][Cache] Resolved IMDb via TMDb', imdbIdLocal);\n              } catch (e) { console.log('[Details][OMDb][Cache] Resolve failed', e?.message || e); }\n            }\n            if (imdbIdLocal) {\n              const imdbDataResolved = await this.fetchIMDBData(imdbIdLocal, detailedMedia?.type || typeUpperCached, detailedMedia);\n              if (imdbDataResolved) {\n                // Update cache and callback\n                const updated = { detailedMedia, malData, imdbData: imdbDataResolved };\n                this.plugin.cache.set(detailPanelCacheKey, updated, { scope: 'mediaDetails', source: 'detailPanel', tags: ['detailPanel','combined', source, mediaType] });\n                callback(detailedMedia, null, imdbDataResolved);\n              }\n            }\n          }\n        }\n        return;\n      }\n\n      const detailedMedia = await this.fetchDetailedData(mediaId, entryOrSource, mediaType);\n      \n      // Handle case where fetchDetailedData returns null (e.g., Simkl anime without MAL ID)\n      if (!detailedMedia) {\n        return;\n      }\n      \n      const malId = source === 'mal' ? (detailedMedia.originalMalId || mediaId) : detailedMedia.idMal;\n      let malDataPromise = null;\n      let imdbDataPromise = null;\n      \n      if (malId) malDataPromise = this.fetchMALData(malId, detailedMedia.type);\n      \n      // For Simkl or TMDb movies/TV, fetch IMDB data\n      const typeUpper = (mediaType || detailedMedia.type || '').toString().toUpperCase();\n      const isMovieOrTv = typeUpper.includes('MOVIE') || typeUpper === 'TV' || typeUpper.includes('SHOW');\n      if ((source === 'simkl' || source === 'tmdb') && isMovieOrTv) {\n        let imdbIdLocal = null;\n        // 1) Prefer IMDb from the original TMDb entry (entry.media)\n        if (source === 'tmdb' && typeof entryOrSource === 'object' && entryOrSource?.media) {\n          imdbIdLocal = entryOrSource.media.idImdb || entryOrSource.media.ids?.imdb || null;\n          if (imdbIdLocal) console.log('[Details][OMDb] Using IMDb from TMDb entry.media', imdbIdLocal);\n        }\n        // 2) Fallback to detailed media (merged result)\n        if (!imdbIdLocal) {\n          imdbIdLocal = detailedMedia.idImdb || detailedMedia.ids?.imdb || null;\n          if (imdbIdLocal) console.log('[Details][OMDb] Using IMDb from detailedMedia', imdbIdLocal);\n        }\n        // 3) Final fallback: resolve from TMDb external_ids\n        if (!imdbIdLocal && source === 'tmdb') {\n          try {\n            const tmdbId = detailedMedia.idTmdb || detailedMedia.ids?.tmdb || mediaId;\n            console.log('[Details][OMDb] Missing IMDb id; resolving from TMDb external_ids', { tmdbId, mediaType });\n            imdbIdLocal = await this.fetchImdbIdFromTmdb(tmdbId, typeUpper);\n            if (imdbIdLocal) {\n              detailedMedia.idImdb = imdbIdLocal;\n              console.log('[Details][OMDb] Resolved IMDb id from TMDb', imdbIdLocal);\n            }\n          } catch (e) {\n            console.log('[Details][OMDb] Failed to resolve IMDb id from TMDb', e?.message || e);\n          }\n        }\n        if (imdbIdLocal) {\n          imdbDataPromise = this.fetchIMDBData(imdbIdLocal, detailedMedia.type || typeUpper, detailedMedia);\n        } else {\n          console.log('[Details][OMDb] IMDb id not found; skipping OMDb');\n        }\n      }\n      \n      // Collect all data\n      let malData = null;\n      let imdbData = null;\n      \n      if (malDataPromise) {\n        malData = await malDataPromise;\n      }\n      \n      if (imdbDataPromise) {\n        imdbData = await imdbDataPromise;\n      }\n      \n      // Cache the combined detail panel data using cache class TTL\n      const combinedData = { detailedMedia, malData, imdbData };\n      this.plugin.cache.set(detailPanelCacheKey, combinedData, { \n        scope: 'mediaDetails', \n        source: 'detailPanel', \n        tags: ['detailPanel', 'combined', source, mediaType] \n      });\n      \n      // Call callbacks with data\n      if (this.hasMoreData(detailedMedia)) callback(detailedMedia, null, null);\n      if (malData) callback(detailedMedia, malData, null);\n      if (imdbData) callback(detailedMedia, null, imdbData);\n    } catch (error) {\n      console.error('fetchAndUpdateData failed:', error);\n    }\n  }\n\n  hasMoreData(newMedia) {\n    const hasBasicData = newMedia.description || newMedia.genres?.length > 0 || newMedia.averageScore > 0;\n    const hasAiringData = newMedia.type === 'ANIME' && newMedia.nextAiringEpisode;\n    return hasBasicData || hasAiringData;\n  }\n\n  getDetailedMediaQuery() {\n    return `query($id:Int){Media(id:$id){id type title{romaji english native}description(asHtml:false)format status season seasonYear averageScore genres nextAiringEpisode{airingAt episode timeUntilAiring}idMal}}`;\n  }\n}\n\n// Helper: resolve Simkl ID from TMDb/IMDb for MOVIE/TV\nDetailPanelSource.prototype.resolveSimklIdFromExternal = async function(tmdbId, imdbId, mediaType) {\n  if (!tmdbId && !imdbId) return null;\n  const type = (mediaType === 'MOVIE' || mediaType === 'MOVIES') ? 'movies' : 'tv';\n  const cacheKey = this.plugin.cache.structuredKey('simkl', 'resolve_external', `${type}_${tmdbId || 'none'}_${imdbId || 'none'}`);\n  const cached = this.plugin.cache.get(cacheKey, { scope: 'mediaDetails', source: 'simkl' });\n  if (cached) return cached;\n\n  try {\n    const params = {};\n    if (tmdbId) params.tmdb = String(tmdbId);\n    if (imdbId) params.imdb = String(imdbId);\n    if (this.plugin.settings.simklClientId) params.client_id = this.plugin.settings.simklClientId;\n\n    const base = 'https://api.simkl.com/search/id';\n    const url = this.plugin.simklApi?.buildFullUrl ? this.plugin.simklApi.buildFullUrl(base, params) : `${base}?${new URLSearchParams(params).toString()}`;\n    const headers = this.plugin.simklApi?.getHeaders ? this.plugin.simklApi.getHeaders({ type: 'search' }) : { 'Accept': 'application/json' };\n    const data = this.plugin.simklApi && this.plugin.simklApi.makeRequest\n      ? await this.plugin.simklApi.makeRequest({ url, method: 'GET', headers, priority: 'normal' })\n      : await (await fetch(url)).json();\n\n    // Try to extract Simkl ID from multiple possible structures\n    let simklId = null;\n    const candidates = Array.isArray(data) ? data : [data];\n    for (const item of candidates) {\n      const node = item?.movie || item?.show || item || {};\n      const ids = node.ids || item?.ids || {};\n      const candidate = Number(ids.simkl || ids.id);\n      if (Number.isFinite(candidate) && candidate > 0) { simklId = candidate; break; }\n    }\n\n    if (simklId) {\n      this.plugin.cache.set(cacheKey, simklId, { scope: 'mediaDetails', source: 'simkl', tags: ['simkl','resolve','external', type] });\n      return simklId;\n    }\n  } catch {}\n\n  // Fallback: try type-specific endpoints if available\n  try {\n    const endpoint = (mediaType === 'MOVIE' || mediaType === 'MOVIES') ? 'movie' : 'tv';\n    const idPart = tmdbId ? `tmdb/${encodeURIComponent(String(tmdbId))}` : `imdb/${encodeURIComponent(String(imdbId))}`;\n    const url = `https://api.simkl.com/${endpoint}/${idPart}${this.plugin.settings.simklClientId ? `?client_id=${this.plugin.settings.simklClientId}` : ''}`;\n    const headers = this.plugin.simklApi?.getHeaders ? this.plugin.simklApi.getHeaders({ type: 'search' }) : { 'Accept': 'application/json' };\n    const data = this.plugin.simklApi && this.plugin.simklApi.makeRequest\n      ? await this.plugin.simklApi.makeRequest({ url, method: 'GET', headers, priority: 'normal' })\n      : await (await fetch(url)).json();\n    const ids = data?.ids || {};\n    const simklId = Number(ids.simkl || ids.id);\n    if (Number.isFinite(simklId) && simklId > 0) {\n      this.plugin.cache.set(cacheKey, simklId, { scope: 'mediaDetails', source: 'simkl', tags: ['simkl','resolve','external', endpoint] });\n      return simklId;\n    }\n  } catch {}\n\n  return null;\n};\n\n// Helper: resolve IMDb id from TMDb external_ids\nDetailPanelSource.prototype.fetchImdbIdFromTmdb = async function(tmdbId, mediaType) {\n  if (!tmdbId) return null;\n  const key = this.plugin.settings.tmdbApiKey;\n  if (!key) return null;\n  const typePath = (mediaType === 'MOVIE' || mediaType === 'MOVIES') ? 'movie' : 'tv';\n  const url = `https://api.themoviedb.org/3/${typePath}/${tmdbId}/external_ids?api_key=${encodeURIComponent(key)}`;\n  try {\n    const res = await fetch(url);\n    if (!res.ok) return null;\n    const data = await res.json();\n    const imdb = data?.imdb_id || data?.imdb || null;\n    return imdb || null;\n  } catch {\n    return null;\n  }\n};\n\nexport { DetailPanelSource };", "// No obsidian imports needed\nimport { RenderDetailPanel } from './RenderDetailPanel.js';\nimport { DetailPanelSource } from './DetailPanelSource.js';\n\nclass OpenDetailPanel {\n\tconstructor(plugin) {\n\t\tthis.plugin = plugin;\n\t\tthis.currentPanel = null;\n\t\tthis.boundOutsideClickHandler = this.handleOutsideClick.bind(this);\n\t\tthis.renderer = new RenderDetailPanel(plugin);\n\t\tthis.dataSource = new DetailPanelSource(plugin);\n\t}\n\n\tasync showPanel(media, entry = null, triggerElement, mountContainer = null) {\n\t\tthis.closePanel();\n\t\t// If this is a TMDb trending MOVIE/TV item, resolve Simkl details first before rendering\n\t\ttry {\n\t\t\tconst mediaKind = media?.type || media?.format;\n\t\t\tconst hasTmdbId = (Number(media?.idTmdb) > 0) || (Number(media?.ids?.tmdb) > 0) || (Number(media?.id) > 0 && (entry?._zoroMeta?.source || '').toLowerCase() === 'tmdb');\n\t\t\tconst isMovieOrTv = mediaKind === 'MOVIE' || mediaKind === 'TV';\n\t\t\tif (hasTmdbId && isMovieOrTv) {\n\t\t\t\tconst tmdbId = Number(media?.idTmdb || media?.ids?.tmdb || media?.id);\n\t\t\t\tconst imdbId = media?.idImdb || media?.ids?.imdb || null;\n\t\t\t\tconst resolved = await this.dataSource.resolveSimklIdFromExternal(tmdbId, imdbId, mediaKind);\n\t\t\t\tif (resolved) {\n\t\t\t\t\t// Enrich media with resolved Simkl id for downstream links\n\t\t\t\t\tmedia = { ...media, ids: { ...(media.ids || {}), simkl: resolved } };\n\t\t\t\t}\n\t\t\t}\n\t\t} catch {}\n\t\tconst panel = this.renderer.createPanel(media, entry);\n\t\tthis.currentPanel = panel;\n\t\tif (mountContainer && mountContainer.appendChild) {\n\t\t\tpanel.classList.add('zoro-inline');\n\t\t\tthis.renderer.positionPanel(panel, null);\n\t\t\tconst closeBtn = panel.querySelector('.panel-close-btn');\n\t\t\tif (closeBtn) closeBtn.onclick = () => this.closePanel();\n\t\t\tmountContainer.appendChild(panel);\n\t\t} else {\n\t\t\t// Always route to Side Panel inline rendering if no mount container is provided\n\t\t\ttry {\n\t\t\t\tconst mediaType = (entry?._zoroMeta?.mediaType || media?.type || media?.format || 'ANIME');\n\t\t\t\tconst source = (entry?._zoroMeta?.source || 'anilist');\n\t\t\t\tconst view = await this.plugin.connectedNotes.openSidePanelWithContext({ media, entry, source, mediaType });\n\t\t\t\tawait view.showDetailsForMedia(media, entry);\n\t\t\t\treturn this.currentPanel;\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error('[Zoro][Details] Failed to open Side Panel for details', err);\n\t\t\t}\n\t\t}\n\t\tthis.plugin.requestQueue.showGlobalLoader();\n\n\t\tif (this.dataSource.shouldFetchDetailedData(media)) {\n\t\t\tthis.dataSource.fetchAndUpdateData(media.id, entry, (detailedMedia, malData, imdbData) => {\n\t\t\t\tif (this.currentPanel === panel) this.renderer.updatePanelContent(panel, detailedMedia, malData, imdbData);\n\t\t\t}).finally(() => this.plugin.requestQueue.hideGlobalLoader());\n\t\t} else {\n\t\t\tthis.plugin.requestQueue.hideGlobalLoader();\n\t\t}\n\t\treturn panel;\n\t}\n\n\thandleOutsideClick(event) {\n\t\tif (this.currentPanel && !this.currentPanel.contains(event.target)) this.closePanel();\n\t}\n\n\tclosePanel() {\n\t\tif (this.currentPanel) {\n\t\t\tthis.renderer.cleanupCountdowns(this.currentPanel);\n\t\t\tdocument.removeEventListener('click', this.boundOutsideClickHandler);\n\t\t\tthis.currentPanel.remove();\n\t\t\tthis.currentPanel = null;\n\t\t}\n\t}\n}\n\nexport { OpenDetailPanel };", "// No obsidian imports needed here\nimport { OpenDetailPanel } from './OpenDetailPanel.js';\nimport { CustomExternalURL } from './CustomExternalURL.js';\n\nclass MoreDetailsPanel {\n  constructor(plugin) {\n    this.plugin = plugin;\n    this.openDetailPanel = new OpenDetailPanel(plugin);\n       this.customExternalURL = new CustomExternalURL(plugin);\n  \n  }\n\n  async showPanel(media, entry = null, triggerElement, mountContainer = null) {\n    return await this.openDetailPanel.showPanel(media, entry, triggerElement, mountContainer);\n  }\n\n  closePanel() {\n    this.openDetailPanel.closePanel();\n  }\n\n  get currentPanel() {\n    return this.openDetailPanel.currentPanel;\n  }\n}\n\nexport { MoreDetailsPanel };", "import { Notice, requestUrl } from 'obsidian';\n\nclass Export {\n  constructor(plugin) {\n    this.plugin = plugin;\n  }\n\n  async ensureZoroFolder() {\n    const folderPath = 'Zoro/Export';\n    const folder = this.plugin.app.vault.getAbstractFileByPath(folderPath);\n    if (!folder) {\n      await this.plugin.app.vault.createFolder(folderPath);\n    }\n    return folderPath;\n  }\n\n  async exportUnifiedListsToCSV() {\n    let username = this.plugin.settings.authUsername;\n    if (!username) username = this.plugin.settings.defaultUsername;\n    if (!username) {\n      new Notice('Set a default username in settings first.', 3000);\n      return;\n    }\n\n    const useAuth = !!this.plugin.settings.accessToken;\n    const query = `\n      query ($userName: String) {\n        MediaListCollection(userName: $userName, type: ANIME) {\n          lists {\n            name\n            entries {\n              status progress score(format: POINT_10) repeat\n              startedAt { year month day } completedAt { year month day }\n              media {\n                id idMal type format\n                title { romaji english native }\n                episodes chapters volumes\n                startDate { year month day } endDate { year month day }\n                averageScore genres\n                studios(isMain: true) { nodes { name } }\n              }\n            }\n          }\n        }\n      }\n    `;\n\n    new Notice(`${useAuth ? '\uD83D\uDCE5 Full' : '\uD83D\uDCE5 Public'} export started\u2026`, 3000);\n    const progress = this.createProgressNotice('\uD83D\uDCCA Exporting\u2026 0 %');\n    const fetchType = async type => {\n      const headers = { 'Content-Type': 'application/json' };\n      if (useAuth) {\n        await this.plugin.auth.ensureValidToken();\n        headers['Authorization'] = `Bearer ${this.plugin.settings.accessToken}`;\n      }\n\n      const res = await this.plugin.requestQueue.add(() =>\n        requestUrl({\n          url: 'https://graphql.anilist.co',\n          method: 'POST',\n          headers,\n          body: JSON.stringify({\n            query: query.replace('type: ANIME', `type: ${type}`),\n            variables: { userName: username }\n          })\n        })\n      );\n      const percent = type === 'ANIME' ? 33 : 66;\n      this.updateProgressNotice(progress, `\uD83D\uDCCA Exporting\u2026 ${percent} %`);\n      return res.json.data?.MediaListCollection?.lists || [];\n    };\n\n    const [animeLists, mangaLists] = await Promise.all([fetchType('ANIME'), fetchType('MANGA')]);\n    \n    if (!animeLists.flatMap(l => l.entries).length && !mangaLists.flatMap(l => l.entries).length) {\n      new Notice('No lists found (private or empty).', 3000);\n      return;\n    }\n\n    this.updateProgressNotice(progress, '\uD83D\uDCCA Generating standard export files...');\n\n    const folderPath = await this.ensureZoroFolder();\n\n    await this.createAniListUnifiedCSV([...animeLists, ...mangaLists], folderPath);\n\n    if (animeLists.flatMap(l => l.entries).length > 0) {\n      await this.createAniListAnimeXML(animeLists, folderPath);\n    }\n\n    if (mangaLists.flatMap(l => l.entries).length > 0) {\n      await this.createAniListMangaXML(mangaLists, folderPath);\n    }\n\n    const totalItems = [...animeLists, ...mangaLists].flatMap(l => l.entries).length;\n    const fileCount = 1 + (animeLists.flatMap(l => l.entries).length > 0 ? 1 : 0) + (mangaLists.flatMap(l => l.entries).length > 0 ? 1 : 0);\n    \n    this.finishProgressNotice(progress, `\u2705 Exported ${totalItems} items in ${fileCount} files`);\n    new Notice(`\u2705 AniList export complete! Created ${fileCount} files`, 3000);\n  }\n\n  async createAniListUnifiedCSV(lists, folderPath) {\n    const rows = [];\n    const headers = [\n      'ListName', 'Status', 'Progress', 'Score', 'Repeat',\n      'StartedAt', 'CompletedAt', 'MediaID', 'Type', 'Format',\n      'TitleRomaji', 'TitleEnglish', 'TitleNative',\n      'Episodes', 'Chapters', 'Volumes',\n      'MediaStart', 'MediaEnd', 'AverageScore', 'Genres', 'MainStudio', 'URL','MAL_ID'\n    ];\n    rows.push(headers.join(','));\n\n    for (const list of lists) {\n      for (const e of list.entries) {\n        const m = e.media;\n        const row = [\n          list.name, e.status, e.progress ?? 0, e.score ?? '', e.repeat ?? 0,\n          this.dateToString(e.startedAt), this.dateToString(e.completedAt),\n          m.id, m.type, m.format,\n          this.csvEscape(m.title.romaji), this.csvEscape(m.title.english), this.csvEscape(m.title.native),\n          m.episodes ?? '', m.chapters ?? '', m.volumes ?? '',\n          this.dateToString(m.startDate), this.dateToString(m.endDate),\n          m.averageScore ?? '', this.csvEscape((m.genres || []).join(';')),\n          this.csvEscape(m.studios?.nodes?.[0]?.name || ''),\n          this.csvEscape(this.plugin.getAniListUrl(m.id, m.type)), m.idMal ?? ''\n        ];\n        rows.push(row.join(','));\n      }\n    }\n\n    const csv = rows.join('\\n');\n    const fileName = `${folderPath}/Zoro_AniList_Unified.csv`;\n    await this.plugin.app.vault.create(fileName, csv);\n    console.log('[AniList Export] Unified CSV created successfully');\n    await this.plugin.app.workspace.openLinkText(fileName, '', false);\n  }\n\n  async createAniListAnimeXML(animeLists, folderPath) {\n    const xmlHeader = `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<myanimelist>\n  <myinfo>\n    <user_id>0</user_id>\n    <user_name>Zoro</user_name>\n    <user_export_type>1</user_export_type>\n  </myinfo>`;\n\n    const xmlFooter = `</myanimelist>`;\n\n    let animeXml = '';\n    \n    for (const list of animeLists) {\n      for (const entry of list.entries) {\n        const media = entry.media;\n        const malStatus = this.mapAniListToMalStatus(entry.status);\n        const score = entry.score || 0;\n        const episodes = entry.progress || 0;\n        const malId = media.idMal || 0;\n        \n        const startDate = this.aniListDateToString(entry.startedAt);\n        const finishDate = entry.status === 'COMPLETED' ? this.aniListDateToString(entry.completedAt) : '';\n        \n        const animeType = this.getAniListAnimeType(media.format);\n        \n        animeXml += `\n  <anime>\n    <series_animedb_id>${malId}</series_animedb_id>\n    <series_title><![CDATA[${media.title.english || media.title.romaji || media.title.native || ''}]]></series_title>\n    <series_type>${animeType}</series_type>\n    <series_episodes>${media.episodes || 0}</series_episodes>\n    <my_id>0</my_id>\n    <my_watched_episodes>${episodes}</my_watched_episodes>\n    <my_start_date>${startDate}</my_start_date>\n    <my_finish_date>${finishDate}</my_finish_date>\n    <my_rated></my_rated>\n    <my_score>${score}</my_score>\n    <my_storage></my_storage>\n    <my_storage_value>0.00</my_storage_value>\n    <my_status>${malStatus}</my_status>\n    <my_comments><![CDATA[Imported from AniList - List: ${list.name}]]></my_comments>\n    <my_times_watched>${entry.repeat || 0}</my_times_watched>\n    <my_rewatch_value></my_rewatch_value>\n    <my_priority>LOW</my_priority>\n    <my_tags><![CDATA[${(media.genres || []).join(', ')}]]></my_tags>\n    <my_rewatching>0</my_rewatching>\n    <my_rewatching_ep>0</my_rewatching_ep>\n    <update_on_import>1</update_on_import>\n  </anime>`;\n      }\n    }\n\n    const xml = xmlHeader + animeXml + xmlFooter;\n    const fileName = `${folderPath}/Zoro_AniList_Anime.xml`;\n    \n    await this.plugin.app.vault.create(fileName, xml);\n    console.log('[AniList Export] Anime MAL XML created successfully');\n  }\n\n  async createAniListMangaXML(mangaLists, folderPath) {\n    const xmlHeader = `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<myanimelist>\n  <myinfo>\n    <user_id>0</user_id>\n    <user_name>Zoro</user_name>\n    <user_export_type>2</user_export_type>\n  </myinfo>`;\n\n    const xmlFooter = `</myanimelist>`;\n\n    let mangaXml = '';\n    \n    for (const list of mangaLists) {\n      for (const entry of list.entries) {\n        const media = entry.media;\n        const malStatus = this.mapAniListToMalStatus(entry.status);\n        const score = entry.score || 0;\n        const chapters = entry.progress || 0;\n        const malId = media.idMal || 0;\n        \n        const startDate = this.aniListDateToString(entry.startedAt);\n        const finishDate = entry.status === 'COMPLETED' ? this.aniListDateToString(entry.completedAt) : '';\n        \n        const mangaType = this.getAniListMangaType(media.format);\n        \n        mangaXml += `\n  <manga>\n    <series_mangadb_id>${malId}</series_mangadb_id>\n    <series_title><![CDATA[${media.title.english || media.title.romaji || media.title.native || ''}]]></series_title>\n    <series_type>${mangaType}</series_type>\n    <series_chapters>${media.chapters || 0}</series_chapters>\n    <series_volumes>${media.volumes || 0}</series_volumes>\n    <my_id>0</my_id>\n    <my_read_chapters>${chapters}</my_read_chapters>\n    <my_read_volumes>0</my_read_volumes>\n    <my_start_date>${startDate}</my_start_date>\n    <my_finish_date>${finishDate}</my_finish_date>\n    <my_rated></my_rated>\n    <my_score>${score}</my_score>\n    <my_storage></my_storage>\n    <my_status>${malStatus}</my_status>\n    <my_comments><![CDATA[Imported from AniList - List: ${list.name}]]></my_comments>\n    <my_times_read>${entry.repeat || 0}</my_times_read>\n    <my_reread_value></my_reread_value>\n    <my_priority>LOW</my_priority>\n    <my_tags><![CDATA[${(media.genres || []).join(', ')}]]></my_tags>\n    <my_rereading>0</my_rereading>\n    <my_rereading_chap>0</my_rereading_chap>\n    <update_on_import>1</update_on_import>\n  </manga>`;\n      }\n    }\n\n    const xml = xmlHeader + mangaXml + xmlFooter;\n    const fileName = `${folderPath}/Zoro_AniList_Manga.xml`;\n    \n    await this.plugin.app.vault.create(fileName, xml);\n    console.log('[AniList Export] Manga MAL XML created successfully');\n  }\n\n  mapAniListToMalStatus(anilistStatus) {\n    const statusMap = {\n      'CURRENT': 'Watching',\n      'READING': 'Reading',\n      'COMPLETED': 'Completed',\n      'PAUSED': 'On-Hold',\n      'DROPPED': 'Dropped',\n      'PLANNING': 'Plan to Watch',\n      'PLAN_TO_READ': 'Plan to Read'\n    };\n    return statusMap[anilistStatus] || 'Plan to Watch';\n  }\n\n  getAniListAnimeType(format) {\n    if (!format) return 'TV';\n    \n    const typeMap = {\n      'TV': 'TV',\n      'TV_SHORT': 'TV',\n      'MOVIE': 'Movie',\n      'SPECIAL': 'Special',\n      'OVA': 'OVA',\n      'ONA': 'ONA',\n      'MUSIC': 'Music'\n    };\n    \n    return typeMap[format] || 'TV';\n  }\n\n  getAniListMangaType(format) {\n    if (!format) return 'Manga';\n    \n    const typeMap = {\n      'MANGA': 'Manga',\n      'LIGHT_NOVEL': 'Light Novel',\n      'ONE_SHOT': 'One-shot',\n      'DOUJINSHI': 'Doujinshi',\n      'MANHWA': 'Manhwa',\n      'MANHUA': 'Manhua',\n      'NOVEL': 'Novel'\n    };\n    \n    return typeMap[format] || 'Manga';\n  }\n\n  aniListDateToString(dateObj) {\n    if (!dateObj || !dateObj.year) return '0000-00-00';\n    const month = String(dateObj.month || 0).padStart(2, '0');\n    const day = String(dateObj.day || 0).padStart(2, '0');\n    return `${dateObj.year}-${month}-${day}`;\n  }\n  \n  async exportMALListsToCSV() {\n    if (!this.plugin.malAuth.isLoggedIn) {\n      new Notice('\u274C Please authenticate with MyAnimeList first.', 3000);\n      return;\n    }\n\n    const username = this.plugin.settings.malUserInfo?.name;\n    if (!username) {\n      new Notice('\u274C Could not fetch MAL username.', 3000);\n      return;\n    }\n\n    new Notice('\uD83D\uDCE5 Exporting MyAnimeList\u2026', 3000);\n    const progress = this.createProgressNotice('\uD83D\uDCCA MAL export 0 %');\n\n    const fetchType = async type => {\n      const headers = this.plugin.malAuth.getAuthHeaders();\n      const apiType = type === 'ANIME' ? 'anime' : 'manga';\n      const url = `https://api.myanimelist.net/v2/users/@me/${apiType}list?fields=list_status{status,score,num_episodes_watched,num_chapters_read,is_rewatching,num_times_rewatched,rewatch_value,start_date,finish_date,priority,num_times_reread,comments,tags},node{id,title,media_type,status,num_episodes,num_chapters,num_volumes,start_season,source,rating,mean,genres}&limit=1000&nsfw=true`;\n\n      const res = await this.plugin.requestQueue.add(() =>\n        requestUrl({ url, method: 'GET', headers })\n      );\n      \n      const items = (res.json?.data || []).map(item => ({\n        ...item,\n        _type: type\n      }));\n      \n      const percent = type === 'ANIME' ? 33 : 66;\n      this.updateProgressNotice(progress, `\uD83D\uDCCA MAL export ${percent} %`);\n      return items;\n    };\n\n    const [anime, manga] = await Promise.all([\n      fetchType('ANIME'),\n      fetchType('MANGA')\n    ]);\n\n    if (anime.length === 0 && manga.length === 0) {\n      new Notice('No MAL data found.', 3000);\n      return;\n    }\n\n    this.updateProgressNotice(progress, '\uD83D\uDCCA Generating standard export files...');\n\n    const folderPath = await this.ensureZoroFolder();\n\n    await this.createMALUnifiedCSV([...anime, ...manga], folderPath);\n\n    if (anime.length > 0) {\n      await this.createMALAnimeXML(anime, folderPath);\n    }\n\n    if (manga.length > 0) {\n      await this.createMALMangaXML(manga, folderPath);\n    }\n\n    const totalItems = anime.length + manga.length;\n    const fileCount = 1 + (anime.length > 0 ? 1 : 0) + (manga.length > 0 ? 1 : 0);\n    \n    this.finishProgressNotice(progress, `\u2705 Exported ${totalItems} items in ${fileCount} files`);\n    new Notice(`\u2705 MAL export complete! Created ${fileCount} files`, 3000);\n  }\n\n  async createMALUnifiedCSV(allItems, folderPath) {\n    const rows = [];\n    const headers = [\n      'Type','Status','Progress','Score','Title','Start','End','Episodes','Chapters','Mean','MAL_ID','URL'\n    ];\n    rows.push(headers.join(','));\n\n    allItems.forEach(item => {\n      const m = item.node;\n      const s = item.list_status;\n      const type = item._type;\n      rows.push([\n        type,\n        s.status,\n        s.num_episodes_watched || s.num_chapters_read || 0,\n        s.score || '',\n        this.csvEscape(m.title),\n        this.malDateToString(s.start_date),\n        this.malDateToString(s.finish_date),\n        m.num_episodes || '',\n        m.num_chapters || '',\n        m.mean || '',\n        m.id,\n        this.csvEscape(`https://myanimelist.net/${type.toLowerCase()}/${m.id}`)\n      ].join(','));\n    });\n\n    const csv = rows.join('\\n');\n    const fileName = `${folderPath}/Zoro_MAL_Unified.csv`;\n    await this.plugin.app.vault.create(fileName, csv);\n    console.log('[MAL Export] Unified CSV created successfully');\n    await this.plugin.app.workspace.openLinkText(fileName, '', false);\n  }\n\n  async createMALAnimeXML(animeItems, folderPath) {\n    const xmlHeader = `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<myanimelist>\n  <myinfo>\n    <user_id>0</user_id>\n    <user_name>Zoro</user_name>\n    <user_export_type>1</user_export_type>\n  </myinfo>`;\n\n    const xmlFooter = `</myanimelist>`;\n\n    let animeXml = '';\n    \n    animeItems.forEach(item => {\n      const media = item.node;\n      const listStatus = item.list_status;\n      \n      const malStatus = this.mapMALStatusToXML(listStatus.status, 'anime');\n      const score = listStatus.score || 0;\n      const episodes = listStatus.num_episodes_watched || 0;\n      const malId = media.id;\n      \n      const startDate = this.malDateToString(listStatus.start_date);\n      const finishDate = this.malDateToString(listStatus.finish_date);\n      \n      const animeType = this.getMALAnimeType(media.media_type);\n      \n      animeXml += `\n  <anime>\n    <series_animedb_id>${malId}</series_animedb_id>\n    <series_title><![CDATA[${media.title || ''}]]></series_title>\n    <series_type>${animeType}</series_type>\n    <series_episodes>${media.num_episodes || 0}</series_episodes>\n    <my_id>0</my_id>\n    <my_watched_episodes>${episodes}</my_watched_episodes>\n    <my_start_date>${startDate}</my_start_date>\n    <my_finish_date>${finishDate}</my_finish_date>\n    <my_rated></my_rated>\n    <my_score>${score}</my_score>\n    <my_storage></my_storage>\n    <my_storage_value>0.00</my_storage_value>\n    <my_status>${malStatus}</my_status>\n    <my_comments><![CDATA[${listStatus.comments || ''}]]></my_comments>\n    <my_times_watched>${listStatus.num_times_rewatched || 0}</my_times_watched>\n    <my_rewatch_value>${listStatus.rewatch_value || ''}</my_rewatch_value>\n    <my_priority>${this.mapMALPriority(listStatus.priority)}</my_priority>\n    <my_tags><![CDATA[${this.formatMALTags(listStatus.tags, media.genres)}]]></my_tags>\n    <my_rewatching>${listStatus.is_rewatching ? 1 : 0}</my_rewatching>\n    <my_rewatching_ep>0</my_rewatching_ep>\n    <update_on_import>1</update_on_import>\n  </anime>`;\n    });\n\n    const xml = xmlHeader + animeXml + xmlFooter;\n    const fileName = `${folderPath}/Zoro_MAL_Anime.xml`;\n    \n    await this.plugin.app.vault.create(fileName, xml);\n    console.log('[MAL Export] Anime XML created successfully');\n  }\n\n  async createMALMangaXML(mangaItems, folderPath) {\n    const xmlHeader = `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<myanimelist>\n  <myinfo>\n    <user_id>0</user_id>\n    <user_name>Zoro</user_name>\n    <user_export_type>2</user_export_type>\n  </myinfo>`;\n\n    const xmlFooter = `</myanimelist>`;\n\n    let mangaXml = '';\n    \n    mangaItems.forEach(item => {\n      const media = item.node;\n      const listStatus = item.list_status;\n      \n      const malStatus = this.mapMALStatusToXML(listStatus.status, 'manga');\n      const score = listStatus.score || 0;\n      const chapters = listStatus.num_chapters_read || 0;\n      const malId = media.id;\n      \n      const startDate = this.malDateToString(listStatus.start_date);\n      const finishDate = this.malDateToString(listStatus.finish_date);\n      \n      const mangaType = this.getMALMangaType(media.media_type);\n      \n      mangaXml += `\n  <manga>\n    <series_mangadb_id>${malId}</series_mangadb_id>\n    <series_title><![CDATA[${media.title || ''}]]></series_title>\n    <series_type>${mangaType}</series_type>\n    <series_chapters>${media.num_chapters || 0}</series_chapters>\n    <series_volumes>${media.num_volumes || 0}</series_volumes>\n    <my_id>0</my_id>\n    <my_read_chapters>${chapters}</my_read_chapters>\n    <my_read_volumes>0</my_read_volumes>\n    <my_start_date>${startDate}</my_start_date>\n    <my_finish_date>${finishDate}</my_finish_date>\n    <my_rated></my_rated>\n    <my_score>${score}</my_score>\n    <my_storage></my_storage>\n    <my_status>${malStatus}</my_status>\n    <my_comments><![CDATA[${listStatus.comments || ''}]]></my_comments>\n    <my_times_read>${listStatus.num_times_reread || 0}</my_times_read>\n    <my_reread_value></my_reread_value>\n    <my_priority>${this.mapMALPriority(listStatus.priority)}</my_priority>\n    <my_tags><![CDATA[${this.formatMALTags(listStatus.tags, media.genres)}]]></my_tags>\n    <my_rereading>0</my_rereading>\n    <my_rereading_chap>0</my_rereading_chap>\n    <update_on_import>1</update_on_import>\n  </manga>`;\n    });\n\n    const xml = xmlHeader + mangaXml + xmlFooter;\n    const fileName = `${folderPath}/Zoro_MAL_Manga.xml`;\n    \n    await this.plugin.app.vault.create(fileName, xml);\n    console.log('[MAL Export] Manga XML created successfully');\n  }\n\n  mapMALStatusToXML(malStatus, type) {\n    const animeStatusMap = {\n      'watching': 'Watching',\n      'completed': 'Completed',\n      'on_hold': 'On-Hold',\n      'dropped': 'Dropped',\n      'plan_to_watch': 'Plan to Watch'\n    };\n\n    const mangaStatusMap = {\n      'reading': 'Reading',\n      'completed': 'Completed',\n      'on_hold': 'On-Hold',\n      'dropped': 'Dropped',\n      'plan_to_read': 'Plan to Read'\n    };\n\n    const statusMap = type === 'anime' ? animeStatusMap : mangaStatusMap;\n    return statusMap[malStatus] || (type === 'anime' ? 'Plan to Watch' : 'Plan to Read');\n  }\n\n  getMALAnimeType(mediaType) {\n    if (!mediaType) return 'TV';\n    \n    const typeMap = {\n      'tv': 'TV',\n      'movie': 'Movie',\n      'ova': 'OVA',\n      'special': 'Special',\n      'ona': 'ONA',\n      'music': 'Music'\n    };\n    \n    return typeMap[mediaType.toLowerCase()] || 'TV';\n  }\n\n  getMALMangaType(mediaType) {\n    if (!mediaType) return 'Manga';\n    \n    const typeMap = {\n      'manga': 'Manga',\n      'novel': 'Novel',\n      'light_novel': 'Light Novel',\n      'one_shot': 'One-shot',\n      'doujinshi': 'Doujinshi',\n      'manhwa': 'Manhwa',\n      'manhua': 'Manhua'\n    };\n    \n    return typeMap[mediaType.toLowerCase()] || 'Manga';\n  }\n\n  mapMALPriority(priority) {\n    const priorityMap = {\n      0: 'LOW',\n      1: 'MEDIUM', \n      2: 'HIGH'\n    };\n    return priorityMap[priority] || 'LOW';\n  }\n\n  formatMALTags(userTags, genres) {\n    const tags = [];\n    \n    if (userTags && Array.isArray(userTags)) {\n      tags.push(...userTags);\n    }\n    \n    if (genres && Array.isArray(genres)) {\n      tags.push(...genres.map(genre => genre.name || genre));\n    }\n    \n    return tags.join(', ');\n  }\n\n  malDateToString(dateStr) {\n    if (!dateStr) return '0000-00-00';\n    return dateStr;\n  }\n\n  async exportSimklListsToCSV() {\n    if (!this.plugin.simklAuth.isLoggedIn) {\n      new Notice('\u274C Please authenticate with SIMKL first.', 3000);\n      return;\n    }\n\n    const username = this.plugin.settings.simklUserInfo?.user?.name;\n    if (!username) {\n      new Notice('\u274C Could not fetch SIMKL username.', 3000);\n      return;\n    }\n\n    console.log('[SIMKL Export] Starting export for user:', username);\n    new Notice('\uD83D\uDCE5 Exporting SIMKL data\u2026', 3000);\n    const progress = this.createProgressNotice('\uD83D\uDCCA Fetching SIMKL data...');\n\n    try {\n      this.updateProgressNotice(progress, '\uD83D\uDCCA Fetching all items...');\n      \n      const allItemsUrl = 'https://api.simkl.com/sync/all-items/';\n      console.log('[SIMKL Export] Fetching from:', allItemsUrl);\n\n      const allItemsRes = await this.plugin.requestQueue.add(() =>\n        requestUrl({\n          url: allItemsUrl,\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${this.plugin.settings.simklAccessToken}`,\n            'simkl-api-key': this.plugin.settings.simklClientId,\n            'Content-Type': 'application/json'\n          },\n          throw: false\n        })\n      );\n\n      console.log('[SIMKL Export] Response status:', allItemsRes.status);\n      console.log('[SIMKL Export] Response data:', allItemsRes.json);\n\n      if (allItemsRes.status !== 200) {\n        throw new Error(`Failed to fetch data: HTTP ${allItemsRes.status}`);\n      }\n\n      const data = allItemsRes.json || {};\n      console.log('[SIMKL Export] Data keys:', Object.keys(data));\n      console.log('[SIMKL Export] Data structure:', data);\n\n      const allItems = [];\n      let totalItemsFound = 0;\n\n      Object.keys(data).forEach(category => {\n        console.log(`[SIMKL Export] Processing category: ${category}`);\n        \n        if (data[category] && Array.isArray(data[category])) {\n          console.log(`[SIMKL Export] Found ${data[category].length} items in ${category}`);\n          totalItemsFound += data[category].length;\n          \n          data[category].forEach(item => {\n            allItems.push({\n              ...item,\n              _category: category,\n              _type: this.determineItemType(item, category)\n            });\n          });\n        } else if (data[category] && typeof data[category] === 'object') {\n          console.log(`[SIMKL Export] ${category} has subcategories:`, Object.keys(data[category]));\n          \n          Object.keys(data[category]).forEach(status => {\n            if (Array.isArray(data[category][status])) {\n              console.log(`[SIMKL Export] Found ${data[category][status].length} items in ${category}.${status}`);\n              totalItemsFound += data[category][status].length;\n              \n              data[category][status].forEach(item => {\n                allItems.push({\n                  ...item,\n                  _category: category,\n                  _status: status,\n                  _type: this.determineItemType(item, category)\n                });\n              });\n            }\n          });\n        }\n      });\n\n      console.log('[SIMKL Export] Total items processed:', allItems.length);\n      console.log('[SIMKL Export] Total items found:', totalItemsFound);\n\n      if (allItems.length === 0) {\n        console.log('[SIMKL Export] No items found after processing');\n        this.finishProgressNotice(progress, '\u274C No data found');\n        new Notice('No SIMKL data found after processing.', 3000);\n        return;\n      }\n\n      const animeItems = allItems.filter(item => \n        item._category === 'anime' || \n        item._type === 'ANIME' ||\n        (item.show && item.show.type === 'anime')\n      );\n      \n      const moviesTvItems = allItems.filter(item => \n        item._category === 'movies' || \n        item._category === 'shows' ||\n        item._type === 'MOVIE' || \n        item._type === 'SHOW' ||\n        item.movie || \n        (item.show && item.show.type !== 'anime')\n      );\n\n      this.updateProgressNotice(progress, '\uD83D\uDCCA Generating standard export files...');\n\n      const folderPath = await this.ensureZoroFolder();\n\n      await this.createSimklUnifiedCSV(allItems, folderPath);\n\n      if (moviesTvItems.length > 0) {\n        await this.createSimklImdbCSV(moviesTvItems, folderPath);\n      }\n\n      if (animeItems.length > 0) {\n        await this.createSimklMalXML(animeItems, folderPath);\n      }\n\n      this.finishProgressNotice(progress, `\u2705 Exported ${allItems.length} items in multiple formats`);\n      new Notice(`\u2705 SIMKL export complete! Created ${1 + (moviesTvItems.length > 0 ? 1 : 0) + (animeItems.length > 0 ? 1 : 0)} files`, 3000);\n\n    } catch (error) {\n      console.error('[SIMKL Export] Export failed:', error);\n      this.finishProgressNotice(progress, `\u274C Export failed: ${error.message}`);\n      new Notice(`\u274C SIMKL export failed: ${error.message}`, 3000);\n    }\n  }\n\n  async createSimklUnifiedCSV(allItems, folderPath) {\n    const headers = [\n      'Category', 'Type', 'Title', 'Year', 'Status', 'Rating',\n      'SIMKL_ID', 'IMDB_ID', 'TMDB_ID', 'MAL_ID', 'Anilist_ID'\n    ];\n\n    const rows = [headers.join(',')];\n    \n    allItems.forEach((item, index) => {\n      const safeGet = (obj, path, fallback = '') => {\n        try {\n          return path.split('.').reduce((o, p) => (o && o[p]) || fallback, obj);\n        } catch {\n          return fallback;\n        }\n      };\n\n      const mediaObject = item.show || item.movie || item.anime || {};\n      \n      const row = [\n        item._category || '',\n        item._type || '',\n        this.csvEscape(mediaObject.title || mediaObject.name || ''),\n        mediaObject.year || mediaObject.aired?.year || mediaObject.released?.year || '',\n        item._status || item.status || '',\n        item.user_rating || item.rating || item.score || '',\n        safeGet(mediaObject, 'ids.simkl'),\n        safeGet(mediaObject, 'ids.imdb'),\n        safeGet(mediaObject, 'ids.tmdb'),\n        safeGet(mediaObject, 'ids.mal'),\n        safeGet(mediaObject, 'ids.anilist')\n      ];\n      \n      rows.push(row.join(','));\n    });\n\n    const csv = rows.join('\\n');\n    const fileName = `${folderPath}/Zoro_SIMKL_Unified.csv`;\n    \n    await this.plugin.app.vault.create(fileName, csv);\n    console.log('[SIMKL Export] Unified CSV created successfully');\n    await this.plugin.app.workspace.openLinkText(fileName, '', false);\n  }\n\n  async createSimklImdbCSV(moviesTvItems, folderPath) {\n    const headers = [\n      'Const', 'Your Rating', 'Date Rated', 'Title', 'URL', 'Title Type', \n      'IMDb Rating', 'Runtime (mins)', 'Year', 'Genres', 'Num Votes', \n      'Release Date', 'Directors'\n    ];\n\n    const rows = [headers.join(',')];\n    \n    moviesTvItems.forEach(item => {\n      const mediaObject = item.show || item.movie || {};\n      const safeGet = (obj, path, fallback = '') => {\n        try {\n          return path.split('.').reduce((o, p) => (o && o[p]) || fallback, obj);\n        } catch {\n          return fallback;\n        }\n      };\n\n      const dateRated = this.getDateFromStatus(item._status || item.status);\n      const imdbId = safeGet(mediaObject, 'ids.imdb');\n      const imdbUrl = imdbId ? `https://www.imdb.com/title/${imdbId}/` : '';\n      const titleType = item._category === 'movies' ? 'movie' : 'tvSeries';\n      \n      const row = [\n        imdbId || '',\n        item.user_rating || item.rating || item.score || '',\n        dateRated,\n        this.csvEscape(mediaObject.title || mediaObject.name || ''),\n        this.csvEscape(imdbUrl),\n        titleType,\n        mediaObject.rating || '',\n        mediaObject.runtime || '',\n        mediaObject.year || mediaObject.aired?.year || mediaObject.released?.year || '',\n        this.csvEscape((mediaObject.genres || []).join(', ')),\n        '',\n        this.formatReleaseDate(mediaObject.released || mediaObject.aired),\n        this.csvEscape((mediaObject.directors || []).join(', '))\n      ];\n      \n      rows.push(row.join(','));\n    });\n\n    const csv = rows.join('\\n');\n    const fileName = `${folderPath}/Zoro_SIMKL_IMDb.csv`;\n    \n    await this.plugin.app.vault.create(fileName, csv);\n    console.log('[SIMKL Export] IMDb CSV created successfully');\n  }\n\n  async createSimklMalXML(animeItems, folderPath) {\n    const xmlHeader = `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<myanimelist>\n  <myinfo>\n    <user_id>0</user_id>\n    <user_name>Zoro</user_name>\n    <user_export_type>1</user_export_type>\n  </myinfo>`;\n\n    const xmlFooter = `</myanimelist>`;\n\n    let animeXml = '';\n    \n    animeItems.forEach(item => {\n      const mediaObject = item.show || item.anime || {};\n      const safeGet = (obj, path, fallback = '') => {\n        try {\n          return path.split('.').reduce((o, p) => (o && o[p]) || fallback, obj);\n        } catch {\n          return fallback;\n        }\n      };\n\n      const malStatus = this.mapSimklToMalStatus(item._status || item.status);\n      const score = item.user_rating || item.rating || item.score || 0;\n      const episodes = this.getSimklProgress(item);\n      const malId = safeGet(mediaObject, 'ids.mal');\n      \n      const startDate = this.getDateFromStatus(item._status || item.status, 'start');\n      const finishDate = malStatus === 'Completed' ? this.getDateFromStatus(item._status || item.status, 'finish') : '';\n      \n      animeXml += `\n  <anime>\n    <series_animedb_id>${malId || 0}</series_animedb_id>\n    <series_title><![CDATA[${mediaObject.title || mediaObject.name || ''}]]></series_title>\n    <series_type>${this.getAnimeType(mediaObject)}</series_type>\n    <series_episodes>${mediaObject.episodes || 0}</series_episodes>\n    <my_id>0</my_id>\n    <my_watched_episodes>${episodes}</my_watched_episodes>\n    <my_start_date>${startDate}</my_start_date>\n    <my_finish_date>${finishDate}</my_finish_date>\n    <my_rated></my_rated>\n    <my_score>${score}</my_score>\n    <my_storage></my_storage>\n    <my_storage_value>0.00</my_storage_value>\n    <my_status>${malStatus}</my_status>\n    <my_comments><![CDATA[Imported from SIMKL]]></my_comments>\n    <my_times_watched>0</my_times_watched>\n    <my_rewatch_value></my_rewatch_value>\n    <my_priority>LOW</my_priority>\n    <my_tags><![CDATA[]]></my_tags>\n    <my_rewatching>0</my_rewatching>\n    <my_rewatching_ep>0</my_rewatching_ep>\n    <update_on_import>1</update_on_import>\n  </anime>`;\n    });\n\n    const xml = xmlHeader + animeXml + xmlFooter;\n    const fileName = `${folderPath}/Zoro_SIMKL_MAL.xml`;\n    \n    await this.plugin.app.vault.create(fileName, xml);\n    console.log('[SIMKL Export] MAL XML created successfully');\n  }\n\n  mapSimklToMalStatus(simklStatus) {\n    const statusMap = {\n      'watching': 'Watching',\n      'completed': 'Completed',\n      'plantowatch': 'Plan to Watch',\n      'hold': 'On-Hold',\n      'dropped': 'Dropped'\n    };\n    return statusMap[simklStatus?.toLowerCase()] || 'Plan to Watch';\n  }\n\n  getAnimeType(mediaObject) {\n    if (!mediaObject.type) return 'TV';\n    \n    const typeMap = {\n      'tv': 'TV',\n      'movie': 'Movie',\n      'ova': 'OVA',\n      'ona': 'ONA',\n      'special': 'Special',\n      'music': 'Music'\n    };\n    \n    return typeMap[mediaObject.type.toLowerCase()] || 'TV';\n  }\n\n  getDateFromStatus(status, type = 'rated') {\n    const now = new Date();\n    const currentYear = now.getFullYear();\n    const currentMonth = String(now.getMonth() + 1).padStart(2, '0');\n    const currentDay = String(now.getDate()).padStart(2, '0');\n    \n    if (status === 'completed' && type === 'finish') {\n      return `${currentYear}-${currentMonth}-${currentDay}`;\n    } else if (type === 'start' && (status === 'watching' || status === 'completed')) {\n      const startDate = new Date();\n      startDate.setMonth(startDate.getMonth() - 1);\n      return `${startDate.getFullYear()}-${String(startDate.getMonth() + 1).padStart(2, '0')}-${String(startDate.getDate()).padStart(2, '0')}`;\n    } else if (type === 'rated') {\n      return `${currentYear}-${currentMonth}-${currentDay}`;\n    }\n    \n    return '';\n  }\n\n  formatReleaseDate(dateObj) {\n    if (!dateObj) return '';\n    if (typeof dateObj === 'string') return dateObj;\n    if (dateObj.year) {\n      const month = String(dateObj.month || 1).padStart(2, '0');\n      const day = String(dateObj.day || 1).padStart(2, '0');\n      return `${dateObj.year}-${month}-${day}`;\n    }\n    return '';\n  }\n\n  xmlEscape(str) {\n    if (typeof str !== 'string') str = String(str);\n    return str.replace(/[<>&'\"]/g, function (c) {\n      switch (c) {\n        case '<': return '&lt;';\n        case '>': return '&gt;';\n        case '&': return '&amp;';\n        case \"'\": return '&apos;';\n        case '\"': return '&quot;';\n      }\n    });\n  }\n\n  determineItemType(item, category) {\n    if (item.type) {\n      return item.type.toUpperCase();\n    }\n    \n    if (category) {\n      return category.toUpperCase();\n    }\n    \n    return 'UNKNOWN';\n  }\n\n  mapSimklStatus(simklStatus) {\n    const statusMap = {\n      'watching': 'CURRENT',\n      'completed': 'COMPLETED', \n      'plantowatch': 'PLANNING',\n      'hold': 'PAUSED',\n      'dropped': 'DROPPED'\n    };\n    return statusMap[simklStatus] || simklStatus.toUpperCase();\n  }\n\n  getSimklProgress(item) {\n    if (!item) return 0;\n\n    const watched = (item.watched_episodes_count ?? item.watched_episodes ?? item.episodes_watched ?? item.progress);\n    if (watched !== undefined && watched !== null && watched !== '') {\n      const n = Number(watched);\n      if (!isNaN(n)) return n;\n    }\n\n    const total = (item.total_episodes_count ?? item.total_episodes ?? item.episodes);\n    if (item.seasons_watched && total) {\n      const episodesPerSeason = Number(total) / (item.seasons || 1);\n      return Math.floor(Number(item.seasons_watched) * episodesPerSeason);\n    }\n\n    const t = String(item._type || item.type || '').toLowerCase();\n    if (t === 'movie' || item.media_type === 'movie') {\n      return (String(item._status || item.status || '').toLowerCase() === 'completed') ? 1 : 0;\n    }\n\n    return Number(item.seasons_watched) || 0;\n  }\n\n  getSimklUrl(apiType, simklId, title) {\n    if (!simklId) return '';\n    \n    const baseUrl = 'https://simkl.com';\n    const urlType = apiType === 'anime' ? 'anime' : \n                   apiType === 'movies' ? 'movies' : 'tv';\n    \n    return `${baseUrl}/${urlType}/${simklId}`;\n  }\n\n  dateToString(dateObj) {\n    if (!dateObj || !dateObj.year) return '';\n    return `${dateObj.year}-${String(dateObj.month || 0).padStart(2, '0')}-${String(dateObj.day || 0).padStart(2, '0')}`;\n  }\n\n  csvEscape(str = '') {\n    if (typeof str !== 'string') str = String(str);\n    if (str.includes(',') || str.includes('\"') || str.includes('\\n')) {\n      return `\"${str.replace(/\"/g, '\"\"')}\"`;\n    }\n    return str;\n  }\n  \n  createProgressNotice(message) {\n    return new Notice(message, 0);\n  }\n\n  updateProgressNotice(notice, message) {\n    notice.hide();\n    return new Notice(message, 0);\n  }\n\n  finishProgressNotice(notice, message) {\n    notice.hide();\n    new Notice(message, 3000);\n  }\n}\n\nexport { Export };", "import { Notice } from 'obsidian';\n\nclass Sample {\n    constructor(plugin) {\n        this.plugin = plugin;\n    }\n\n    async createSampleFolders() {\n        new Notice('Creating\u2026', 3000);\n        const vault = this.plugin.app.vault;\n        const parentFolder = 'Zoro';\n        \n        const folders = [\n            {\n                name: 'Anime',\n                files: ['Watching.md', 'Planning.md', 'Re-watching .md', 'On Hold.md', 'Completed.md', 'Dropped.md',\n                'Trending.md','Stats.md'],\n                firstFile: 'Trending.md'\n            },\n            {\n                name: 'Manga', \n                files: ['Reading.md', 'Planning.md', 'Re-reading.md', 'On Hold.md', 'Completed.md', 'Dropped.md','Trending.md', 'Stats.md'],\n                firstFile: 'Trending.md'\n            },\n             {\n                name: 'Movie',\n                files: ['Planning.md', 'Completed.md', 'Dropped.md', 'Trending.md', 'Stats.md'],\n                firstFile: 'Planning.md'\n            },\n            {\n                name: 'TV',\n                files: ['Watching.md', 'Planning.md', 'On Hold.md', 'Completed.md', 'Dropped.md',\n                'Trending.md', 'Stats.md'],\n                firstFile: 'Watching.md'\n            }\n            \n        ];\n\n        if (!vault.getAbstractFileByPath(parentFolder)) {\n            await vault.createFolder(parentFolder);\n        }\n\n        for (const folder of folders) {\n            const folderPath = parentFolder + '/' + folder.name;\n            \n            if (vault.getAbstractFileByPath(folderPath)) {\n                new Notice('\u23ED\uFE0F ' + folder.name + ' already exists in ' + parentFolder);\n                continue;\n            }\n\n            const baseUrl = 'https://raw.githubusercontent.com/zara-kasi/zoro/main/Template/' + \n                           encodeURIComponent(folder.name) + '/';\n\n            await vault.createFolder(folderPath);\n            let successfulFiles = 0;\n\n            for (const templateFile of folder.files) {\n                try {\n                    const fileUrl = baseUrl + encodeURIComponent(templateFile);\n                    const response = await fetch(fileUrl);\n                    \n                    if (!response.ok) {\n                        continue;\n                    }\n\n                    const content = await response.text();\n                    const filePath = folderPath + '/' + templateFile;\n                    \n                    await vault.create(filePath, content);\n                    successfulFiles++;\n                    \n                } catch (error) {\n                    continue;\n                }\n            }\n\n            new Notice('\u2705 ' + folder.name + ' in ' + parentFolder + ' (' + successfulFiles + ' files)');\n\n            if (successfulFiles > 0) {\n                this.plugin.app.workspace.openLinkText(folder.firstFile, folderPath, false);\n            }\n        }\n    }\n}\n\nexport { Sample };", "import { Notice } from 'obsidian';\n\nclass Prompt {\n  constructor(plugin) {\n    this.plugin = plugin;\n  }\n\n  createAuthenticationPrompt() {\n    const modal = document.createElement('div');\n    modal.className = 'zoro-edit-modal zoro-inline';\n    modal.setAttribute('role', 'dialog');\n    modal.setAttribute('aria-modal', 'true');\n    modal.setAttribute('aria-label', 'Authentication Required');\n\n    const content = document.createElement('div');\n    content.className = 'zoro-modal-content auth-prompt';\n\n    const title = document.createElement('h3');\n    title.className = 'zoro-auth-title';\n    title.textContent = '\uD83D\uDD10 Authentication Required';\n\n    const message = document.createElement('p');\n    message.className = 'zoro-auth-message';\n    \n    message.textContent = 'You need to authenticate with AniList/MyAnimeList to edit your anime/manga entries. This will allow you to update your progress, scores, and status directly from Obsidian.';\n\n    const featuresDiv = document.createElement('div');\n    featuresDiv.className = 'zoro-auth-features';\n\n    const featuresTitle = document.createElement('h4');\n    featuresTitle.className = 'zoro-auth-features-title';\n    featuresTitle.textContent = 'Features after authentication:';\n\n    const featuresList = document.createElement('ul');\n    featuresList.className = 'zoro-auth-feature-list';\n\n    const features = [\n      'Edit progress, scores, and status',\n      'Access private lists and profiles',\n      'Quick progress buttons (+1, -1, Complete)',\n      'Auto-detect your username',\n      'Real-time updates'\n    ];\n\n    features.forEach(feature => {\n      const li = document.createElement('li');\n      li.textContent = feature;\n      featuresList.appendChild(li);\n    });\n\n    featuresDiv.appendChild(featuresTitle);\n    featuresDiv.appendChild(featuresList);\n\n    const buttonContainer = document.createElement('div');\n    buttonContainer.className = 'zoro-modal-buttons';\n\n    const authenticateBtn = document.createElement('button');\n    authenticateBtn.className = 'zoro-auth-button';\n    \n    authenticateBtn.textContent = '\uD83D\uDD11 Authenticate';\n    authenticateBtn.onclick = () => {\n      closeModal();\n      this.plugin.app.setting.open();\n      this.plugin.app.setting.openTabById(this.plugin.manifest.id);\n      new Notice('\uD83D\uDCDD Please use AniList/MyAnimeList to authenticate from settings. Hint: use Setup\u2192 Authentication');\n    };\n\n    buttonContainer.appendChild(authenticateBtn);\n\n    content.appendChild(title);\n    content.appendChild(message);\n    content.appendChild(featuresDiv);\n    content.appendChild(buttonContainer);\n\n    modal.appendChild(content);\n    document.body.appendChild(modal);\n\n    authenticateBtn.focus();\n    this.plugin.addGlobalListener(document, 'keydown', handleKeyDown);\n\n    function closeModal() {\n      if (modal.parentNode) modal.parentNode.removeChild(modal);\n      document.removeEventListener('keydown', handleKeyDown);\n    }\n\n    function handleKeyDown(e) {\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        closeModal();\n      }\n    }\n  }\n}\n\nexport { Prompt };", "import { Notice, setIcon } from 'obsidian';\nimport { APISourceHelper } from '../helpers/APISourceHelper.js';\nimport { FormatterHelper } from '../helpers/FormatterHelper.js';\nimport { CardRenderer } from '../renderers/CardRenderer.js';\nimport { SearchRenderer } from '../renderers/SearchRenderer.js';\nimport { TableRenderer } from '../renderers/TableRenderer.js';\nimport { MediaListRenderer } from '../renderers/MediaListRenderer.js';\nimport { StatsRenderer } from '../renderers/StatsRenderer.js';\nimport { DOMHelper } from '../helpers/DOMHelper.js';\n\n\nclass Render {\n  constructor(plugin) {\n    this.plugin = plugin;\n    \n    // Initialize utility helpers\n    this.apiHelper = new APISourceHelper(plugin);\n    this.formatter = new FormatterHelper();\n    \n    // Initialize specialized renderers\n    this.cardRenderer = new CardRenderer(this);\n    this.searchRenderer = new SearchRenderer(this);\n    this.tableRenderer = new TableRenderer(this);\n    this.mediaListRenderer = new MediaListRenderer(this);\n    this.statsRenderer = new StatsRenderer(this);\n  }\n\n  renderSearchInterface(el, config) {\n    return this.searchRenderer.render(el, config);\n  }\n\n  renderMediaList(el, entries, config) {\n    return this.mediaListRenderer.render(el, entries, config);\n  }\n\n  renderSearchResults(el, media, config) {\n    return this.searchRenderer.renderSearchResults(el, media, config);\n  }\n\n  renderTableLayout(el, entries, config) {\n    return this.tableRenderer.render(el, entries, config);\n  }\n\n  renderSingleMedia(el, mediaList, config) {\n    return this.mediaListRenderer.renderSingle(el, mediaList, config);\n  }\n\n  renderUserStats(el, user, options = {}) {\n    return this.statsRenderer.render(el, user, options);\n  }\n\n  renderMediaListChunked(el, entries, config, chunkSize = 20) {\n    return this.mediaListRenderer.renderChunked(el, entries, config, chunkSize);\n  }\n\n  createMediaCard(data, config, options = {}) {\n    return this.cardRenderer.createMediaCard(data, config, options);\n  }\n\n  // ========== SKELETON CREATION METHODS - UNCHANGED ==========\n  \n  createListSkeleton(count = 6) {\n    return DOMHelper.createListSkeleton(count);\n  }\n\n  createStatsSkeleton() {\n    return DOMHelper.createStatsSkeleton();\n  }\n\n  createSearchSkeleton() {\n    return DOMHelper.createSearchSkeleton();\n  }\n\n  // ========== EVENT HANDLING METHODS - UNCHANGED ==========\n  \n  attachEventListeners(card, entry, media, config) {\n    const statusBadge = card.querySelector('.clickable-status[data-entry-id]');\n    if (statusBadge) {\n      statusBadge.onclick = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.handleStatusClick(e, entry, statusBadge, config);\n      };\n    }\n    \n    const addBtn = card.querySelector('.clickable-status[data-media-id]');\n    if (addBtn) {\n      addBtn.onclick = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.handleAddClick(e, media, config);\n      };\n    }\n  }\n\n  handleStatusClick(e, entry, badge, config = {}) {\n    return this.cardRenderer.handleStatusClick(e, entry, badge, config);\n  }\n\n  handleAddClick(e, media, config) {\n    return this.cardRenderer.handleAddClick(e, media, config);\n  }\n\n  // ========== UTILITY METHODS - UNCHANGED ==========\n  \n  clear(el) { \n    el.empty?.(); \n  }\n\n  // Method to refresh active views (used by card renderer)\n  refreshActiveViews() {\n    // This method should trigger refresh of any active views\n    // Implementation depends on your plugin's architecture\n    if (this.plugin.refreshActiveViews) {\n      this.plugin.refreshActiveViews();\n    }\n  }\n\n  // ========== MISSING UTILITY METHODS FROM ORIGINAL ==========\n  \n  // URL generation methods that might be called from outside\n  getAniListUrl(id, mediaType) {\n    return this.plugin.getAniListUrl(id, mediaType);\n  }\n\n  getMALUrl(id, mediaType) {\n    return this.plugin.getMALUrl(id, mediaType);\n  }\n\n  getSourceSpecificUrl(id, mediaType, source) {\n    return this.apiHelper.getSourceSpecificUrl(id, mediaType, source);\n  }\n\n  // Error rendering (might be called from outside)\n  renderError(el, message) {\n    if (el.innerHTML !== undefined) {\n      el.innerHTML = DOMHelper.createErrorMessage(message);\n    } else {\n      const errorDiv = el.createDiv({ cls: 'zoro-error' });\n      errorDiv.textContent = message;\n    }\n  }\n\n  // ========== STATS RENDERING HELPER METHODS - DELEGATED ==========\n  \n  renderStatsError(el, message) {\n    return this.statsRenderer.renderError(el, message);\n  }\n\n  renderStatsHeader(fragment, user) {\n    return this.statsRenderer.renderHeader(fragment, user);\n  }\n\n  renderStatsOverview(fragment, user, options) {\n    return this.statsRenderer.renderOverview(fragment, user, options);\n  }\n\n  renderMediaTypeCard(container, type, stats, listOptions) {\n    return this.statsRenderer.renderMediaTypeCard(container, type, stats, listOptions);\n  }\n\n  renderComparisonCard(container, animeStats, mangaStats) {\n    return this.statsRenderer.renderComparisonCard(container, animeStats, mangaStats);\n  }\n\n  renderStatsBreakdowns(fragment, user, mediaType) {\n    return this.statsRenderer.renderBreakdowns(fragment, user, mediaType);\n  }\n\n  renderStatsInsights(fragment, user, mediaType) {\n    return this.statsRenderer.renderInsights(fragment, user, mediaType);\n  }\n\n  renderStatsFavorites(fragment, user, mediaType) {\n    return this.statsRenderer.renderFavorites(fragment, user, mediaType);\n  }\n\n  renderBreakdownChart(container, title, data, keyField, options = {}) {\n    return this.statsRenderer.renderBreakdownChart(container, title, data, keyField, options);\n  }\n\n  renderScoreDistribution(container, scores, listOptions) {\n    return this.statsRenderer.renderScoreDistribution(container, scores, listOptions);\n  }\n\n  renderYearlyActivity(container, yearData) {\n    return this.statsRenderer.renderYearlyActivity(container, yearData);\n  }\n\n  addSecondaryMetric(container, label, value) {\n    return DOMHelper.addSecondaryMetric(container, label, value);\n  }\n\n  formatScore(score, scoreFormat = 'POINT_10') {\n    return this.formatter.formatScore(score, scoreFormat);\n  }\n\n  formatWatchTime(minutes) {\n    return this.formatter.formatWatchTime(minutes);\n  }\n\n  generateInsights(stats, type, user) {\n    return this.statsRenderer.generateInsights(stats, type, user);\n  }\n}\n\nexport { Render };", "import { Notice } from 'obsidian';\n\nclass APISourceHelper {\n  constructor(plugin) {\n    this.plugin = plugin;\n  }\n\n  getAPI(source) {\n    const normalizedSource = source?.toLowerCase();\n    \n    switch(normalizedSource) {\n      case 'mal': return this.plugin.malApi;\n      case 'simkl': return this.plugin.simklApi;\n      case 'anilist':\n      default: return this.plugin.api;\n    }\n  }\n\n  isAuthenticated(source) {\n    const normalizedSource = source?.toLowerCase();\n    \n    switch(normalizedSource) {\n      case 'mal':\n        return !!this.plugin.settings.malAccessToken;\n      case 'simkl':\n        return !!this.plugin.settings.simklAccessToken;\n      case 'anilist':\n      default:\n        return !!this.plugin.settings.accessToken;\n    }\n  }\n\n  getSourceUrl(id, mediaType, source) {\n    const normalizedSource = source?.toLowerCase();\n    \n    switch(normalizedSource) {\n      case 'mal':\n        return this.plugin.getMALUrl?.(id, mediaType);\n      case 'simkl':\n        return this.plugin.getSimklUrl?.(id, mediaType);\n      case 'anilist':\n      default:\n        return this.plugin.getAniListUrl?.(id, mediaType);\n    }\n  }\n\n  async fetchSearchData(config, term) {\n    const normalizedSource = config.source?.toLowerCase();\n    \n    if (normalizedSource === 'mal') {\n      return await this.plugin.malApi.fetchMALData({ \n        ...config, \n        type: 'search',\n        search: term, \n        query: term,\n        page: 1, \n        perPage: 5 \n      });\n    } else if (normalizedSource === 'simkl') {\n      return await this.plugin.simklApi.fetchSimklData({ \n        ...config, \n        type: 'search',\n        search: term, \n        query: term,\n        page: 1, \n        perPage: 5 \n      });\n    } else {\n      return await this.plugin.api.fetchAniListData({ \n        ...config, \n        type: 'search',\n        search: term, \n        page: 1, \n        perPage: 5 \n      });\n    }\n  }\n\n  \n  async updateMediaListEntry(mediaId, updates, source, mediaType) {\n    const api = this.getAPI(source);\n    if ((source || '').toLowerCase() === 'simkl') {\n      return await api.updateMediaListEntry(mediaId, updates, mediaType);\n    }\n    return await api.updateMediaListEntry(mediaId, updates);\n  }\n\n  getSourceSpecificUrl(id, mediaType, source) {\n    return this.plugin.getSourceSpecificUrl(id, mediaType, source);\n  }\n\n  detectSource(entry, config) {\n    // 1. Check existing metadata first\n    if (entry?._zoroMeta?.source) {\n      return this.validateAndReturnSource(entry._zoroMeta.source);\n    }\n    \n    // 2. Try config source\n    if (config?.source) {\n      return this.validateAndReturnSource(config.source);\n    }\n    \n    // 3. Detect from data structure patterns\n    const detectedSource = this.detectFromDataStructure(entry);\n    if (detectedSource) {\n      return detectedSource;\n    }\n    \n    // 4. Fallback to best available source\n    return this.getFallbackSource();\n  }\n\n  detectFromDataStructure(entry) {\n    if (!entry || typeof entry !== 'object') return null;\n    \n    // AniList patterns\n    if (entry.media?.siteUrl?.includes('anilist.co') ||\n        entry.user?.siteUrl?.includes('anilist.co') ||\n        (entry.media?.idMal !== undefined && !entry.media?.simkl_id) ||\n        (entry.media?.id && entry.media?.title && entry.media?.type && !entry.media?.simkl_id)) {\n      return 'anilist';\n    }\n    \n    // MAL patterns  \n    if (entry.node?.main_picture ||\n        entry.ranking ||\n        entry.media?.mal_id ||\n        entry.user?.joined_at ||\n        entry.node?.id && entry.node?.title) {\n      return 'mal';\n    }\n    \n    // SIMKL patterns\n    if (entry.show?.ids?.simkl ||\n        entry.user_stats ||\n        entry.media?.simkl_id ||\n        entry.show?.title && entry.show?.year) {\n      return 'simkl';\n    }\n    \n    return null;\n  }\n\n  validateAndReturnSource(source) {\n    const normalizedSource = source?.toLowerCase();\n    const validSources = ['anilist', 'mal', 'simkl'];\n    \n    if (validSources.includes(normalizedSource)) {\n      return normalizedSource;\n    }\n    \n    return null;\n  }\n\n  getFallbackSource() {\n    // Return first available authenticated source, or default to anilist\n    if (this.isAuthenticated('mal')) return 'mal';\n    if (this.isAuthenticated('simkl')) return 'simkl'; \n    if (this.isAuthenticated('anilist')) return 'anilist';\n    return 'anilist';\n  }\n\n  detectMediaType(entry, config, media) {\n    if (entry?._zoroMeta?.mediaType) return entry._zoroMeta.mediaType;\n    if (config?.mediaType) return config.mediaType;\n    if (media?.format === 'MOVIE') return 'MOVIE';\n    \n    // Better logic for distinguishing between ANIME and TV\n    // Check if it's explicitly marked as anime or has anime-specific properties\n    if (media?.format === 'TV' || media?.type === 'TV' || \n        (media?.genres && media.genres.some(g => g.toLowerCase().includes('anime')))) {\n      return 'TV';\n    }\n    \n    // If it has episodes but no clear indication, check the source\n    if (media?.episodes) {\n      // For Simkl sources, check if it's in the anime category\n      if (entry?.show?.type === 'anime' || entry?.anime) {\n        return 'ANIME';\n      }\n      // Default to TV for shows with episodes unless explicitly anime\n      return 'TV';\n    }\n    \n    return 'TV';\n  }\n}\n\nexport { APISourceHelper };", "// No obsidian imports needed here\n\nclass FormatterHelper {\n  formatScore(score, scoreFormat = 'POINT_10') {\n  switch (scoreFormat) {\n    case 'POINT_100':\n      return `${Math.round(score * 10)}/100`;\n    case 'POINT_10':\n      // If score is already out of 10 (like TMDb), don't divide\n      if (score <= 10) {\n        return `${Math.round(score)}/10`;  // Changed from .toFixed(1) to Math.round()\n      }\n      // If score is out of 100 (like AniList), divide by 10\n      return `${Math.round(score / 10)}/10`;  // Changed from .toFixed(1) to Math.round()\n    case 'POINT_5':\n      return `${Math.round(score / 20)}/5`;\n    case 'POINT_3':\n      return score >= 70 ? '\uD83D\uDE0A' : score >= 40 ? '\uD83D\uDE10' : '\uD83D\uDE1E';\n    default:\n      return `${Math.round(score / 10)}/10`;  // Changed from .toFixed(1) to Math.round()\n  }\n}\n\n  formatWatchTime(minutes) {\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n    \n    if (days > 365) {\n      const years = (days / 365).toFixed(1);\n      return `${years} years`;\n    } else if (days > 30) {\n      const months = Math.floor(days / 30);\n      return `${months} months`;\n    } else if (days > 0) {\n      return `${days} days`;\n    } else {\n      return `${hours} hours`;\n    }\n  }\n\n  formatProgress(current, total) {\n    return `${current || 0}/${total || '?'}`;\n  }\n\n  formatRating(score, isSearch = false) {\n    if (score == null) return null;\n    \n    if (isSearch) {\n      return `\u2605 ${Math.round(score / 10)}`;\n    } else {\n      if (score > 10) {\n        return `\u2605 ${Math.round(score / 10)}`;\n      } else {\n        return `\u2605 ${Math.round(score)}`;\n      }\n    }\n  }\n\n  getStatusClass(status) {\n    return status ? status.toLowerCase() : 'unknown';\n  }\n\n  getStatusText(status) {\n    return status || 'Unknown';\n  }\n\n  formatGenres(genres, maxCount = 3) {\n    if (!genres?.length) return [];\n    return genres.slice(0, maxCount);\n  }\n\n  formatTitle(media) {\n    return media.title?.english || media.title?.romaji || 'Unknown';\n  }\n\n  formatFormat(format) {\n    return format ? format.substring(0, 2).toUpperCase() : '';\n  }\n}\n\nexport { FormatterHelper };", "import { Notice, setIcon } from 'obsidian';\nimport { DOMHelper } from '../helpers/DOMHelper.js';\n\nclass CardRenderer {\n  constructor(parentRenderer) {\n    this.parent = parentRenderer;\n    this.plugin = parentRenderer.plugin;\n    this.apiHelper = parentRenderer.apiHelper;\n    this.formatter = parentRenderer.formatter;\n  }\n\n  createMediaCard(data, config, options = {}) {\n    const isSearch = options.isSearch || false;\n    const isCompact = config.layout === 'compact';\n    const media = isSearch ? data : data.media;\n    // Ensure we have a usable numeric id for card actions\n    if (!media.id || Number.isNaN(Number(media.id))) {\n      media.id = Number(media?.id || media?.idTmdb || media?.idImdb || media?.idMal || media?.ids?.tmdb || media?.ids?.imdb || media?.ids?.simkl || media?.ids?.id || 0) || 0;\n    }\n    // For search/trending items, synthesize a lightweight entry carrying metadata for proper source/mediaType detection\n    const entry = isSearch\n      ? {\n          media,\n          _zoroMeta: data?._zoroMeta || {\n            source:\n              this.apiHelper.validateAndReturnSource(config?.source) ||\n              data?._zoroMeta?.source ||\n              this.apiHelper.detectFromDataStructure({ media }) ||\n              this.apiHelper.getFallbackSource(),\n            mediaType: (() => {\n              if (config?.mediaType) return config.mediaType;\n              const fmt = String(media?.format || '').toUpperCase();\n              if (fmt === 'MOVIE') return 'MOVIE';\n              if (fmt === 'MANGA' || fmt === 'NOVEL' || fmt === 'ONE_SHOT') return 'MANGA';\n              return 'ANIME';\n            })()\n          }\n        }\n      : data;\n    const source = this.apiHelper.detectSource(entry, config);\n    const mediaType = this.apiHelper.detectMediaType(entry, config, media);\n    \n    const card = document.createElement('div');\n    card.className = `zoro-card ${isCompact ? 'compact' : ''}`;\n    card.dataset.mediaId = String(Number(media.id) || 0);\n\n    // Create cover image if enabled\n    if (this.plugin.settings.showCoverImages && media.coverImage?.large) {\n      const coverContainer = this.createCoverContainer(media, entry, isSearch, isCompact, config);\n      card.appendChild(coverContainer);\n    }\n\n    // Create media info section\n    const info = this.createMediaInfo(media, entry, config, isSearch, isCompact);\n    card.appendChild(info);\n    \n    // Add heart for favorites\n    const heart = document.createElement('span');\n    heart.className = 'zoro-heart';\n    if (!media.isFavourite) heart.style.display = 'none';\n    card.appendChild(heart);\n\n    return card;\n  }\n\n  createCoverContainer(media, entry, isSearch, isCompact, config) {\n    const coverContainer = document.createElement('div');\n    coverContainer.className = 'cover-container';\n    \n    const img = document.createElement('img');\n    img.src = media.coverImage.large;\n    img.alt = media.title.english || media.title.romaji;\n    img.className = 'media-cover pressable-cover';\n    img.loading = 'lazy';\n\n    \n    let pressTimer = null;\n    let isPressed = false;\n    const pressHoldDuration = 400;\n    \n    img.onmousedown = (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      isPressed = true;\n      img.classList.add('pressed');\n      \n      pressTimer = setTimeout(() => {\n        if (isPressed) {\n          (async () => {\n            try {\n              const source = this.apiHelper.detectSource(entry, config);\n              const mediaType = this.apiHelper.detectMediaType(entry, config, media);\n              const view = await this.plugin.connectedNotes.openSidePanelWithContext({ media, entry, source, mediaType });\n              await view.showDetailsForMedia(media, entry);\n            } catch (err) {\n              console.error('[Zoro] Failed to open inline details', err);\n            }\n          })();\n          img.classList.remove('pressed');\n          isPressed = false;\n        }\n      }, pressHoldDuration);\n    };\n\n    img.onmouseup = img.onmouseleave = (e) => {\n      if (pressTimer) {\n        clearTimeout(pressTimer);\n        pressTimer = null;\n      }\n      img.classList.remove('pressed');\n      isPressed = false;\n    };\n    \n    img.onclick = (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      return false;\n    };\n    \n    img.oncontextmenu = (e) => {\n      e.preventDefault();\n      return false;\n    };\n    \n    img.ondragstart = (e) => {\n      e.preventDefault();\n      return false;\n    };\n    \n    img.ontouchstart = (e) => {\n      isPressed = true;\n      img.classList.add('pressed');\n      \n      pressTimer = setTimeout(() => {\n        if (isPressed) {\n          e.preventDefault();\n          (async () => {\n            try {\n              const source = this.apiHelper.detectSource(entry, config);\n              const mediaType = this.apiHelper.detectMediaType(entry, config, media);\n              const view = await this.plugin.connectedNotes.openSidePanelWithContext({ media, entry, source, mediaType });\n              await view.showDetailsForMedia(media, entry);\n            } catch (err) {\n              console.error('[Zoro] Failed to open inline details (touch)', err);\n            }\n          })();\n          img.classList.remove('pressed');\n          isPressed = false;\n        }\n      }, pressHoldDuration);\n    };\n\n    img.ontouchend = img.ontouchcancel = img.ontouchmove = (e) => {\n      if (pressTimer) {\n        clearTimeout(pressTimer);\n        pressTimer = null;\n      }\n      img.classList.remove('pressed');\n      isPressed = false;\n    };\n    \n    img.title = 'Press and hold for more details';\n    \n    coverContainer.appendChild(img);\n    \n    // Add format badge to cover if available\n    if (media.format) {\n      const formatBadge = this.createFormatBadgeForCover(media);\n      coverContainer.appendChild(formatBadge);\n    }\n    if (isSearch) {\n  // For search and trending cards, show both Add and Edit\n  const addBtn = this.createAddButton(media, entry, config);\n  coverContainer.appendChild(addBtn);\n}\n    \n    const needsOverlay = (!isSearch && entry && this.plugin.settings.showProgress) || \n                       (this.plugin.settings.showRatings && (\n                          (isSearch && (media.averageScore != null || media._rawData?.rating != null || media.rating != null)) ||\n                          (!isSearch && entry?.score != null)\n                        ));\n                        \n    if (needsOverlay) {\n      const overlay = this.createCoverOverlay(media, entry, isSearch);\n      coverContainer.appendChild(overlay);\n    }\n    \n    return coverContainer;\n  }\n\n  createFormatBadgeForCover(media) {\n    const formatBadge = document.createElement('div');\n    formatBadge.className = 'zoro-format-badge-cover';\n    formatBadge.textContent = this.formatter.formatFormat(media.format);\n    return formatBadge;\n  }\n\n  createCoverOverlay(media, entry, isSearch) {\n    const overlay = document.createElement('div');\n    overlay.className = 'cover-overlay';\n    \n    // Progress indicator\n    if (!isSearch && entry && this.plugin.settings.showProgress) {\n      const progress = document.createElement('span');\n      progress.className = 'progress';\n      const total = media.episodes || media.chapters || '?';\n      progress.textContent = this.formatter.formatProgress(entry.progress, total);\n      overlay.appendChild(progress);\n    } else {\n      overlay.appendChild(document.createElement('span'));\n    }\n    \n    // Rating indicator\n    if (this.plugin.settings.showRatings) {\n      const publicScore = isSearch ? (media.averageScore ?? media._rawData?.rating ?? media.rating ?? null) : null;\n      const score = isSearch ? publicScore : entry?.score;\n      if (score != null) {\n        const rating = document.createElement('span');\n        rating.className = 'score';\n        rating.textContent = this.formatter.formatRating(score, isSearch);\n        overlay.appendChild(rating);\n      } else {\n        overlay.appendChild(document.createElement('span'));\n      }\n    }\n    \n    return overlay;\n  }\n\n  createMediaInfo(media, entry, config, isSearch, isCompact) {\n    const info = document.createElement('div');\n    info.className = 'media-info';\n\n    // Title\n    const title = this.createTitle(media, entry, config);\n    info.appendChild(title);\n\n    // Details (status, edit button - format badge removed)\n    if (!isCompact) {\n      const details = this.createMediaDetails(media, entry, config, isSearch);\n      info.appendChild(details);\n    }\n\n    // Genres\n    if (!isCompact && this.plugin.settings.showGenres && media.genres?.length) {\n      const genres = this.createGenres(media);\n      info.appendChild(genres);\n    }\n\n    return info;\n  }\n\n  createTitle(media, entry, config) {\n    const title = document.createElement('h4');\n\n    if (this.plugin.settings.hideUrlsInTitles) {\n      title.textContent = this.formatter.formatTitle(media);\n    } else {\n      const titleLink = document.createElement('a');\n      const source = this.apiHelper.detectSource(entry, config);\n      const mediaType = this.apiHelper.detectMediaType(entry, config, media);\n      \n      // Use the proper URL method based on available plugin methods\n      const safeId = Number(media.id) || 0;\n      if (source === 'simkl' && safeId <= 0) {\n        // Fallback: open Simkl on-site search when we lack a stable id from search results\n        const q = encodeURIComponent(this.formatter.formatTitle(media));\n        titleLink.href = `https://simkl.com/search/?q=${q}`;\n      } else {\n        titleLink.href = this.plugin.getSourceSpecificUrl \n          ? this.apiHelper.getSourceSpecificUrl(safeId, mediaType, source)\n          : this.apiHelper.getSourceUrl(safeId, mediaType, source);\n      }\n      \n      titleLink.target = '_blank';\n      titleLink.textContent = this.formatter.formatTitle(media);\n      titleLink.className = 'media-title-link';\n      title.appendChild(titleLink);\n    }\n\n    return title;\n  }\n  \n  createMediaDetails(media, entry, config, isSearch) {\n    const details = document.createElement('div');\n    details.className = 'media-details';\n\n    // Format badge removed from here - now on cover image\n\n    // Status badge or edit button\n    if (!isSearch && entry && entry.status) {\n      const statusBadge = this.createStatusBadge(entry, config);\n      details.appendChild(statusBadge);\n    }\n\n    // CONNECTED NOTES BUTTON - hide for trending movies/TV\n    const mt = String(config?.mediaType || '').toUpperCase();\n    const isMovieOrTv = mt === 'MOVIE' || mt === 'MOVIES' || mt === 'TV' || mt === 'SHOW' || mt === 'SHOWS';\n    const isTrending = String(config?.type || '').toLowerCase() === 'trending';\n    if (!(isTrending && isMovieOrTv)) {\n      const connectedNotesBtn = this.plugin.connectedNotes.createConnectedNotesButton(media, entry, config);\n      details.appendChild(connectedNotesBtn);\n    }\n\n    return details;\n  }\n  \n  createStatusBadge(entry, config) {\n    const statusBadge = document.createElement('span');\n    const statusClass = this.formatter.getStatusClass(entry.status);\n    const statusText = this.formatter.getStatusText(entry.status);\n    \n    statusBadge.className = `status-badge status-${statusClass} clickable-status`;\n    statusBadge.createEl('span', { text: '\u2611\uFE0F' });\n    statusBadge.onclick = (e) => this.handleStatusClick(e, entry, statusBadge, config);\n    \n    return statusBadge;\n  }\n\n    createEditButton(media, entry, config) {\n    const editBtn = document.createElement('span');\n    editBtn.className = 'status-badge status-edit clickable-status';\n    editBtn.textContent = 'Edit';\n    editBtn.dataset.loading = 'false';\n    editBtn.onclick = (e) => this.handleEditClick(e, media, entry, config, editBtn);\n    \n    return editBtn;\n  }\n\n  createAddButton(media, entry, config) {\n  const addBtn = document.createElement('span');\n  addBtn.classList.add('zoro-add-button-cover');\n  addBtn.createEl('span', { text: '\uD83D\uDD16' });\n  addBtn.dataset.loading = 'false';\n  addBtn.onclick = (e) => this.handleAddClick(e, media, entry, config, addBtn);\n  \n\n  return addBtn;\n}\n\n\n  createGenres(media) {\n    const genres = document.createElement('div');\n    genres.className = 'genres';\n    \n    const genreList = this.formatter.formatGenres(media.genres);\n    genreList.forEach(g => {\n      const tag = document.createElement('span');\n      tag.className = 'genre-tag';\n      tag.textContent = g || 'Unknown';\n      genres.appendChild(tag);\n    });\n    \n    return genres;\n  }\n\n  handleStatusClick(e, entry, badge, config) {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const source = this.apiHelper.detectSource(entry, config);\n    const mediaType = this.apiHelper.detectMediaType(entry, config);\n    \n    if (!this.apiHelper.isAuthenticated(source)) {\n      this.plugin.prompt.createAuthenticationPrompt(source);\n      return;\n    }\n    \n    // Prefer Side Panel inline edit; fallback is handled inside handleEditClick\n    this.plugin.handleEditClick(e, entry, badge, { source, mediaType });\n  }\n\n  async handleAddClick(e, media, entry, config, addBtn) {\n    e.preventDefault(); e.stopPropagation();\n\n    let entrySource = this.apiHelper.detectSource(entry, config);\n    const entryMediaType = this.apiHelper.detectMediaType(entry, config, media);\n\n    const isTmdbItem = ((entry?._zoroMeta?.source || '').toLowerCase() === 'tmdb') || !!(media?.idTmdb || media?.ids?.tmdb);\n    if (isTmdbItem) {\n      entrySource = 'simkl';\n      try {\n        const numericId = Number(media.id) || Number(media.idTmdb) || 0;\n        if (numericId > 0) {\n          this.plugin.cache.set(String(numericId), { media }, { scope: 'mediaData' });\n        }\n      } catch {}\n    }\n\n    if (!this.apiHelper.isAuthenticated(entrySource)) {\n      console.log(`[Zoro] Not authenticated with ${entrySource}`);\n      this.plugin.prompt.createAuthenticationPrompt(entrySource);\n      return;\n    }\n\n    // show spinner\n    addBtn.dataset.loading = 'true';\n    addBtn.innerHTML = DOMHelper.createLoadingSpinner();\n    addBtn.style.pointerEvents = 'none';\n\n    try {\n      const typeUpper = String(entryMediaType || '').toUpperCase();\n      const isMovieOrTv = typeUpper === 'MOVIE' || typeUpper === 'MOVIES' || typeUpper === 'TV' || typeUpper.includes('SHOW');\n\n      const updates = { status: 'PLANNING' };\n\n      // For TMDb movie/TV routed to Simkl, call the explicit ID update path\n      if (entrySource === 'simkl' && isTmdbItem && isMovieOrTv) {\n        const ids = { tmdb: Number(media.idTmdb || media.id) || undefined, imdb: media.idImdb || undefined };\n        if (typeof this.plugin?.simklApi?.updateMediaListEntryWithIds === 'function') {\n          await this.plugin.simklApi.updateMediaListEntryWithIds(ids, updates, entryMediaType);\n        } else {\n          const idFallback = Number(media.idTmdb || media.id) || 0;\n          await this.apiHelper.updateMediaListEntry(idFallback, updates, entrySource, entryMediaType);\n        }\n      } else {\n        await this.apiHelper.updateMediaListEntry(media.id, updates, entrySource, entryMediaType);\n      }\n\n      // Success feedback\n      new Notice('\u2705 Added to planning!', 3000);\n      console.log(`[Zoro] Added ${media.id} to planning via add button`);\n\n      // ---- STOP SPINNER & SHOW SUCCESS ICON ----\n      addBtn.dataset.loading = 'false';\n\n      // remove spinner and all children (this is the key step)\n      if (typeof addBtn.replaceChildren === 'function') {\n        addBtn.replaceChildren();\n      } else {\n        addBtn.innerHTML = '';\n      }\n\n      // Add success icon via mapper/createEl/fallback\n      const mapper = globalThis.__emojiIconMapper;\n      if (mapper) {\n        const frag = mapper.parseToFragment('\uD83D\uDCD1');\n        if (frag) {\n          addBtn.appendChild(frag);\n        } else if (typeof addBtn.createEl === 'function') {\n          addBtn.createEl('span', { text: '\uD83D\uDCD1' });\n        } else {\n          addBtn.textContent = '\uD83D\uDCD1';\n        }\n      } else if (typeof setIcon === 'function') {\n        const span = document.createElement('span');\n        setIcon(span, 'bookmark');\n        addBtn.appendChild(span);\n      } else {\n        addBtn.textContent = '\uD83D\uDCD1';\n      }\n\n      // update classes cleanly\n      addBtn.classList.remove('zoro-add-button-cover');\n      addBtn.classList.add('zoro-add-button-cover');\n\n      // leave pointer events disabled so user can't re-add; change to 'auto' if you want clickable\n      addBtn.style.pointerEvents = 'none';\n\n      // Refresh UI\n      this.parent.refreshActiveViews();\n\n    } catch (error) {\n      console.error('[Zoro] Add failed:', error);\n\n      // Reset button on error\n      addBtn.dataset.loading = 'false';\n      addBtn.innerHTML = '';\n      addBtn.classList.remove('zoro-add-button-cover');\n      addBtn.classList.add('zoro-add-button-cover');\n      addBtn.textContent = 'Add';\n      addBtn.style.pointerEvents = 'auto';\n\n      new Notice(`\u274C Failed to add: ${error.message}`, 5000);\n    }\n  }\n\n  async handleEditClick(e, media, entry, config, editBtn) {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const entrySource = this.apiHelper.detectSource(entry, config);\n    const entryMediaType = this.apiHelper.detectMediaType(entry, config, media);\n\n    if (!this.apiHelper.isAuthenticated(entrySource)) {\n      console.log(`[Zoro] Not authenticated with ${entrySource}`);\n      this.plugin.prompt.createAuthenticationPrompt(entrySource);\n      return;\n    }\n\n    editBtn.dataset.loading = 'true';\n    editBtn.innerHTML = DOMHelper.createLoadingSpinner();\n    editBtn.style.pointerEvents = 'none';\n\n    try {\n      const numericId = Number(media.id) || 0;\n          const normalizedId = entrySource === 'simkl' ? this.plugin.simklApi.normalizeSimklId(numericId) : numericId;\n    console.log('[Zoro][Edit] entrySource', entrySource, 'entryMediaType', entryMediaType);\n    console.log('[Zoro][Edit] mediaTitle', this.formatter.formatTitle(media));\n    console.log(`[Zoro] Checking user entry for media ${normalizedId} via ${entrySource}`);\n    \n    let existingEntry = null;\n      if (normalizedId > 0) {\n      } else if (entrySource === 'simkl') {\n        // Attempt to resolve a Simkl ID by title before editing\n        const guessId = await this.plugin.simklApi.resolveSimklIdByTitle(this.formatter.formatTitle(media), entryMediaType);\n        if (guessId > 0) {\n          media.id = guessId;\n        }\n      }\n      console.log(`[Zoro] User entry result:`, existingEntry ? 'Found existing entry' : 'Not in user list');\n      \n      const entryToEdit = existingEntry || {\n        media: media,\n        status: 'PLANNING',\n        progress: 0,\n        score: null,\n        id: null,\n        _zoroMeta: {\n          source: entrySource,\n          mediaType: entryMediaType\n        }\n      };\n\n      const isNewEntry = !existingEntry;\n      editBtn.textContent = isNewEntry ? 'Add' : 'Edit';\n      editBtn.className = `status-badge ${isNewEntry ? 'status-add' : 'status-edit'} clickable-status`;\n      editBtn.dataset.loading = 'false';\n      editBtn.style.pointerEvents = 'auto';\n\n      console.log(`[Zoro] Opening edit in Side Panel for ${isNewEntry ? 'new' : 'existing'} entry`);\n      try {\n        const view = await this.plugin.connectedNotes.openSidePanelWithContext({ media, entry: entryToEdit, source: entrySource, mediaType: entryMediaType });\n        await view.showEditForEntry(entryToEdit, { source: entrySource });\n      } catch (err) {\n        console.error('[Zoro] Failed to open inline edit in Side Panel from card', err);\n      }\n\n    } catch (error) {\n      console.error('[Zoro] User entry check failed:', error);\n      \n      editBtn.textContent = 'Edit';\n      editBtn.dataset.loading = 'false';\n      editBtn.style.pointerEvents = 'auto';\n      \n      new Notice('\u26A0\uFE0F Could not check list status, assuming new entry', 3000);\n      \n      const defaultEntry = {\n        media: media,\n        status: 'PLANNING',\n        progress: 0,\n        score: null,\n        id: null\n      };\n\n      const view = await this.plugin.connectedNotes.openSidePanelWithContext({ media, entry: defaultEntry, source: entrySource, mediaType: entryMediaType });\n      await view.showEditForEntry(defaultEntry, { source: entrySource });\n    }\n  }\n}\n\nexport { CardRenderer };", "import { setIcon } from 'obsidian';\nimport { DOMHelper } from '../helpers/DOMHelper.js';\nimport { GRID_COLUMN_OPTIONS } from '../../core/constants.js';\n\nclass SearchRenderer {\n  constructor(parentRenderer) {\n    this.parent = parentRenderer;\n    this.plugin = parentRenderer.plugin;\n    this.apiHelper = parentRenderer.apiHelper;\n    this.cardRenderer = parentRenderer.cardRenderer;\n  }\n\n  render(el, config) {\n  el.empty();\n  el.className = 'zoro-search-container';\n\n  const mt = String(config.mediaType || 'ANIME').toUpperCase();\n  const src = String(config.source || '').toLowerCase();\n\n\n\n  // wrapper with positioning\n  const searchWrapper = el.createDiv({ cls: 'zoro-search-input-container' });\n\n  // icon element positioned absolutely inside the input\n  const iconSpan = searchWrapper.createEl('span', { cls: 'zoro-search-icon' });\n\n  // Use Obsidian's setIcon with Lucide 'search' icon\n  setIcon(iconSpan, 'search');\n\n  // create the input with left padding for the icon\n  const input = document.createElement('input');\n  input.type = 'text';\n  input.className = 'zoro-search-input';\n\n  if (src === 'simkl') {\n    if (mt === 'ANIME') input.placeholder = 'Search anime\u2026';\n    else if (mt === 'MOVIE' || mt === 'MOVIES') input.placeholder = 'Search movies\u2026';\n    else input.placeholder = 'Search TV shows\u2026';\n  } else {\n    input.placeholder = mt === 'ANIME' ? 'Search anime\u2026' : 'Search manga\u2026';\n  }\n\n  searchWrapper.appendChild(input);\n\n  // results container\n  const resultsDiv = el.createDiv({ cls: 'zoro-search-results' });\n  let timeout;\n\n  const doSearch = async () => {\n    const term = input.value.trim();\n    if (term.length < 3) {\n      resultsDiv.innerHTML = DOMHelper.createErrorMessage('Type at least 3 characters\u2026');\n      return;\n    }\n\n    try {\n      resultsDiv.innerHTML = '';\n      resultsDiv.appendChild(DOMHelper.createListSkeleton(5));\n\n      const data = await this.apiHelper.fetchSearchData(config, term);\n\n      resultsDiv.innerHTML = '';\n      this.renderSearchResults(resultsDiv, data.Page.media, config);\n    } catch (e) {\n      this.plugin.renderError(resultsDiv, e.message);\n    }\n  };\n\n  input.addEventListener('input', () => {\n    clearTimeout(timeout);\n    timeout = setTimeout(doSearch, 300);\n  });\n\n  input.addEventListener('keypress', e => {\n    if (e.key === 'Enter') doSearch();\n  });\n}\n\n  renderSearchResults(el, media, config) {\n    el.empty();\n    if (media.length === 0) {\n      el.innerHTML = DOMHelper.createErrorMessage('No results found.');\n      return;\n    }\n\n    const grid = el.createDiv({ cls: 'zoro-cards-grid' });\n    try {\n      const gridSetting = this.plugin.settings.gridColumns || GRID_COLUMN_OPTIONS.DEFAULT;\n      if (gridSetting === GRID_COLUMN_OPTIONS.DEFAULT) {\n        // For \"Default\", let CSS handle responsive behavior\n        grid.style.setProperty('--zoro-grid-gap', 'var(--size-4-4)');\n      } else {\n        // For fixed column values, set the CSS variables\n        grid.style.setProperty('--zoro-grid-columns', String(gridSetting));\n        grid.style.setProperty('--grid-cols', String(gridSetting));\n        grid.style.setProperty('--zoro-grid-gap', 'var(--size-4-4)');\n        // Also set grid-template-columns directly to ensure it takes precedence\n        grid.style.setProperty('grid-template-columns', `repeat(${gridSetting}, minmax(0, 1fr))`, 'important');\n      }\n    } catch {}\n    const fragment = document.createDocumentFragment();\n    \n    media.forEach(item => {\n      fragment.appendChild(this.cardRenderer.createMediaCard(item, config, { isSearch: true }));\n    });\n    \n    grid.appendChild(fragment);\n  }\n}\n\nexport { SearchRenderer };", "// No obsidian import needed here\n\nclass TableRenderer {\n  constructor(parentRenderer) {\n    this.parent = parentRenderer;\n    this.plugin = parentRenderer.plugin;\n    this.apiHelper = parentRenderer.apiHelper;\n    this.formatter = parentRenderer.formatter;\n  }\n\n  render(el, entries, config) {\n    const table = el.createEl('table', { cls: 'zoro-table' });\n    const headers = ['Title', 'Format', 'Status'];\n    if (this.plugin.settings.showProgress) headers.push('Progress');\n    if (this.plugin.settings.showRatings) headers.push('Score');\n    if (this.plugin.settings.showGenres) headers.push('Genres');\n\n    table.createTHead().createEl('tr', null, tr =>\n      headers.forEach(h => tr.createEl('th', { text: h }))\n    );\n\n    const tbody = table.createTBody();\n    const fragment = document.createDocumentFragment();\n\n    entries.forEach(entry => {\n      const m = entry.media;\n      const tr = fragment.createEl('tr');\n      tr.createEl('td', null, td =>\n        td.createEl('a', {\n          text: m.title.english || m.title.romaji,\n          href: config.source === 'mal' \n            ? this.plugin.getMALUrl(m.id, config.mediaType)\n            : this.plugin.getAniListUrl(m.id, config.mediaType),\n          cls: 'zoro-title-link',\n          target: '_blank'\n        })\n      );\n      tr.createEl('td', { text: m.format || '-' });\n      tr.createEl('td', null, td => {\n        const s = td.createEl('span', {\n          text: entry.status,\n          cls: `status-badge status-${entry.status.toLowerCase()} clickable-status`\n        });\n        s.onclick = e => {\n          e.preventDefault();\n          e.stopPropagation();\n          \n          // Check authentication based on source\n          const isAuthenticated = config.source === 'mal' \n            ? this.plugin.settings.malAccessToken \n            : this.plugin.settings.accessToken;\n            \n          if (!isAuthenticated) {\n            this.plugin.prompt.createAuthenticationPrompt();\n            return;\n          }\n          this.plugin.handleEditClick(e, entry, s, config);\n        };\n      });\n      if (this.plugin.settings.showProgress)\n        tr.createEl('td', {\n          text: `${entry.progress ?? 0}/${m.episodes ?? m.chapters ?? '?'}`\n        });\n      if (this.plugin.settings.showRatings)\n        tr.createEl('td', { text: entry.score != null ? `\u2605 ${entry.score}` : '-' });\n      if (this.plugin.settings.showGenres)\n        tr.createEl('td', {\n          text: (m.genres || []).slice(0, 3).join(', ') || '-'\n        });\n    });\n\n    tbody.appendChild(fragment);\n  }\n}\n\nexport { TableRenderer };", "// No obsidian imports needed here\nimport { GRID_COLUMN_OPTIONS } from '../../core/constants.js';\n\nclass MediaListRenderer {\n  constructor(parentRenderer) {\n    this.parent = parentRenderer;\n    this.plugin = parentRenderer.plugin;\n    this.cardRenderer = parentRenderer.cardRenderer;\n    this.tableRenderer = parentRenderer.tableRenderer;\n  }\n\n  render(el, entries, config) {\n    el.empty();\n    el.className = 'zoro-container';\n    \n    if (config.layout === 'table') {\n      this.tableRenderer.render(el, entries, config);\n      return;\n    }\n\n    const grid = el.createDiv({ cls: 'zoro-cards-grid' });\n    try {\n      const gridSetting = this.plugin.settings.gridColumns || GRID_COLUMN_OPTIONS.DEFAULT;\n      if (gridSetting === GRID_COLUMN_OPTIONS.DEFAULT) {\n        // For \"Default\", let CSS handle responsive behavior\n        grid.style.setProperty('--zoro-grid-gap', 'var(--size-4-4)');\n      } else {\n        // For fixed column values, set the CSS variables\n        grid.style.setProperty('--zoro-grid-columns', String(gridSetting));\n        grid.style.setProperty('--grid-cols', String(gridSetting));\n        grid.style.setProperty('--zoro-grid-gap', 'var(--size-4-4)');\n        // Also set grid-template-columns directly to ensure it takes precedence\n        grid.style.setProperty('grid-template-columns', `repeat(${gridSetting}, minmax(0, 1fr))`, 'important');\n      }\n    } catch {}\n    const fragment = document.createDocumentFragment();\n    \n    entries.forEach(entry => {\n      fragment.appendChild(this.cardRenderer.createMediaCard(entry, config));\n    });\n    \n    grid.appendChild(fragment);\n  }\n\n  renderChunked(el, entries, config, chunkSize = 20) {\n    el.empty();\n    el.className = 'zoro-container';\n    \n    const grid = el.createDiv({ cls: 'zoro-cards-grid' });\n    try {\n      const gridSetting = this.plugin.settings.gridColumns || GRID_COLUMN_OPTIONS.DEFAULT;\n      if (gridSetting === GRID_COLUMN_OPTIONS.DEFAULT) {\n        // For \"Default\", let CSS handle responsive behavior\n        grid.style.setProperty('--zoro-grid-gap', 'var(--size-4-4)');\n      } else {\n        // For fixed column values, set the CSS variables\n        grid.style.setProperty('--zoro-grid-columns', String(gridSetting));\n        grid.style.setProperty('--grid-cols', String(gridSetting));\n        grid.style.setProperty('--zoro-grid-gap', 'var(--size-4-4)');\n        // Also set grid-template-columns directly to ensure it takes precedence\n        grid.style.setProperty('grid-template-columns', `repeat(${gridSetting}, minmax(0, 1fr))`, 'important');\n      }\n    } catch {}\n    let index = 0;\n    \n    const renderChunk = () => {\n      const fragment = document.createDocumentFragment();\n      const end = Math.min(index + chunkSize, entries.length);\n      \n      for (; index < end; index++) {\n        fragment.appendChild(this.cardRenderer.createMediaCard(entries[index], config));\n      }\n      \n      grid.appendChild(fragment);\n      \n      if (index < entries.length) {\n        requestAnimationFrame(renderChunk);\n      }\n    };\n    \n    renderChunk();\n  }\n\n  renderSingle(el, mediaList, config) {\n    const media = mediaList && mediaList.media;\n    if (!media) {\n      el.empty();\n      el.className = 'zoro-container';\n      const box = el.createDiv({ cls: 'zoro-error-box' });\n      box.createEl('strong', { text: '\u274C Single media' });\n      box.createEl('pre', { text: 'Media not found. Ensure the mediaId is correct and exists on the selected source.' });\n      return;\n    }\n\n    el.empty();\n    el.className = 'zoro-container';\n\n    // Render like a search card: shows Edit button, no progress, shows ratings\n    const grid = el.createDiv({ cls: 'zoro-cards-grid' });\n    try {\n      const gridSetting = this.plugin.settings.gridColumns || GRID_COLUMN_OPTIONS.DEFAULT;\n      if (gridSetting === GRID_COLUMN_OPTIONS.DEFAULT) {\n        // For \"Default\", let CSS handle responsive behavior\n        grid.style.setProperty('--zoro-grid-gap', 'var(--size-4-4)');\n      } else {\n        // For fixed column values, set the CSS variables\n        grid.style.setProperty('--zoro-grid-columns', String(gridSetting));\n        grid.style.setProperty('--grid-cols', String(gridSetting));\n        grid.style.setProperty('--zoro-grid-gap', 'var(--size-4-4)');\n        // Also set grid-template-columns directly to ensure it takes precedence\n        grid.style.setProperty('grid-template-columns', `repeat(${gridSetting}, minmax(0, 1fr))`, 'important');\n      }\n    } catch {}\n\n    const card = this.cardRenderer.createMediaCard(media, config, { isSearch: true });\n    grid.appendChild(card);\n  }\n}\n\nexport { MediaListRenderer };", "// No direct obsidian dependency except DOM APIs\nimport { DOMHelper } from '../helpers/DOMHelper.js';\n\nclass StatsRenderer {\n  constructor(parentRenderer) {\n    this.parent = parentRenderer;\n    this.plugin = parentRenderer.plugin;\n    this.formatter = parentRenderer.formatter;\n  }\n\n  render(el, user, options = {}) {\n    const {\n      layout = 'standard',\n      mediaType = 'ANIME',\n      showComparisons = true,\n      showTrends = true\n    } = options;\n\n    el.empty();\n    el.className = `zoro-container zoro-stats-container zoro-stats-${layout}`;\n\n    if (!user || !user.statistics) {\n      this.renderError(el, 'No statistics available for this user');\n      return;\n    }\n\n    const fragment = DOMHelper.createFragment();\n\n    // User header with key info\n    this.renderHeader(fragment, user);\n\n    // Main overview cards\n    this.renderOverview(fragment, user, { showComparisons, mediaType });\n\n    // Detailed breakdowns based on layout\n    if (layout !== 'minimal') {\n      this.renderBreakdowns(fragment, user, mediaType);\n    }\n\n    // Activity insights\n    if (layout === 'detailed' && showTrends) {\n      this.renderInsights(fragment, user, mediaType);\n    }\n\n    // Favorites showcase\n    this.renderFavorites(fragment, user, mediaType);\n\n    el.appendChild(fragment);\n  }\n\n  renderError(el, message) {\n    const errorDiv = el.createDiv({ cls: 'zoro-stats-error' });\n    errorDiv.createEl('div', { \n      cls: 'zoro-error-icon',\n      text: '\uD83D\uDCCA' \n    });\n    errorDiv.createEl('h3', { \n      text: 'Stats Unavailable',\n      cls: 'zoro-error-title'\n    });\n    errorDiv.createEl('p', { \n      text: message,\n      cls: 'zoro-error-message'\n    });\n  }\n\n  renderHeader(fragment, user) {\n    const header = fragment.createDiv({ cls: 'zoro-stats-header' });\n    \n    const userInfo = header.createDiv({ cls: 'zoro-user-info' });\n    \n    if (user.avatar?.medium) {\n      userInfo.createEl('img', {\n        cls: 'zoro-user-avatar',\n        attr: { \n          src: user.avatar.medium,\n          alt: `${user.name}'s avatar`\n        }\n      });\n    }\n\n    const userDetails = userInfo.createDiv({ cls: 'zoro-user-details' });\n    const userName = userDetails.createEl('h2', { \n      text: user.name,\n      cls: 'zoro-user-name zoro-user-name-clickable'\n    });\n\n    // Make the user name clickable\n    userName.style.cursor = 'pointer';\n    userName.addEventListener('click', () => {\n  const source = user?._zoroMeta?.source || 'anilist';\n  let url = '';\n  if (source === 'mal') {\n    url = `https://myanimelist.net/profile/${encodeURIComponent(user.name)}`;\n  } else if (source === 'simkl') {\n    const simklId = this.plugin.settings?.simklUserInfo?.account?.id;\n    url = simklId ? `https://simkl.com/${encodeURIComponent(simklId)}/` : `https://simkl.com/`;\n  } else {\n    url = `https://anilist.co/user/${encodeURIComponent(user.name)}`;\n  }\n  window.open(url, '_blank');\n});\n    userName.addEventListener('mouseenter', () => {\n      userName.style.textDecoration = 'underline';\n    });\n\n    userName.addEventListener('mouseleave', () => {\n      userName.style.textDecoration = 'none';\n    });\n  }\n\n  renderOverview(fragment, user, options) {\n    const { showComparisons, mediaType = 'ANIME' } = options;\n    const overview = fragment.createDiv({ cls: 'zoro-stats-overview' });\n    \n    const statsGrid = overview.createDiv({ cls: 'zoro-stats-grid' });\n\n    // Anime stats\n    const animeStats = user.statistics.anime;\n       // Extended: Simkl TV and Movie stats\n    const tvStats = user.statistics.tv;\n    const movieStats = user.statistics.movie;\n\n    // Manga stats (AniList/MAL)\n   \n    const mangaStats = user.statistics.manga;\n   const upperType = String(mediaType).toUpperCase();\n    const showAnime = upperType === 'ANIME';\n    const showManga = upperType === 'MANGA';\n    const showTv = upperType === 'TV';\n    const showMovie = upperType === 'MOVIE' || upperType === 'MOVIES';\n\n    if (showAnime && animeStats && animeStats.count > 0) {\n      this.renderMediaTypeCard(statsGrid, 'anime', animeStats, user.mediaListOptions);\n    }\n    if (showManga && mangaStats && mangaStats.count > 0) {\n      this.renderMediaTypeCard(statsGrid, 'manga', mangaStats, user.mediaListOptions);\n    }\n    if (showTv && tvStats && tvStats.count > 0) {\n      this.renderMediaTypeCard(statsGrid, 'tv', tvStats, user.mediaListOptions);\n    }\n    if (showMovie && movieStats && movieStats.count > 0) {\n      this.renderMediaTypeCard(statsGrid, 'movie', movieStats, user.mediaListOptions);\n    }\n\n    if (showAnime && showManga && animeStats?.count > 0 && mangaStats?.count > 0 && showComparisons) {\n      this.renderComparisonCard(statsGrid, animeStats, mangaStats);\n    }\n  }\n\n  renderMediaTypeCard(container, type, stats, listOptions) {\n    const card = container.createDiv({ \n      cls: `zoro-stat-card zoro-${type}-card`,\n      attr: { 'data-type': type }\n    });\n\n    // Header\n    const header = card.createDiv({ cls: 'zoro-card-header' });\n    header.createEl('h3', { \n      text: type.charAt(0).toUpperCase() + type.slice(1),\n      cls: 'zoro-card-title'\n    });\n\n    // Primary metrics\n    const metrics = card.createDiv({ cls: 'zoro-primary-metrics' });\n    \n    // Total count - most important metric\n    const totalMetric = metrics.createDiv({ cls: 'zoro-metric zoro-metric-primary' });\n    totalMetric.createEl('div', { \n      text: stats.count.toLocaleString(),\n      cls: 'zoro-metric-value'\n    });\n    totalMetric.createEl('div', { \n      text: 'Total',\n      cls: 'zoro-metric-label'\n    });\n\n    // Mean score if available\n    if (stats.meanScore > 0) {\n      const scoreMetric = metrics.createDiv({ cls: 'zoro-metric' });\n      const scoreFormat = listOptions?.scoreFormat || 'POINT_10';\n      const displayScore = this.formatter.formatScore(stats.meanScore, scoreFormat);\n      \n      scoreMetric.createEl('div', { \n        text: displayScore,\n        cls: 'zoro-metric-value zoro-score-value'\n      });\n      scoreMetric.createEl('div', { \n        text: 'Avg Score',\n        cls: 'zoro-metric-label'\n      });\n    }\n\n    // Secondary metrics\n    const secondaryMetrics = card.createDiv({ cls: 'zoro-secondary-metrics' });\n    \n    if (type === 'anime') {\n      if (stats.episodesWatched) {\n        DOMHelper.addSecondaryMetric(secondaryMetrics, 'Episodes', stats.episodesWatched.toLocaleString());\n      }\n      if (stats.minutesWatched) {\n        const timeFormatted = this.formatter.formatWatchTime(stats.minutesWatched);\n        DOMHelper.addSecondaryMetric(secondaryMetrics, 'Time Watched', timeFormatted);\n      }\n    } else {\n      if (stats.chaptersRead) {\n        DOMHelper.addSecondaryMetric(secondaryMetrics, 'Chapters', stats.chaptersRead.toLocaleString());\n      }\n      if (stats.volumesRead) {\n        DOMHelper.addSecondaryMetric(secondaryMetrics, 'Volumes', stats.volumesRead.toLocaleString());\n      }\n    }\n\n    if (stats.standardDeviation) {\n      DOMHelper.addSecondaryMetric(secondaryMetrics, 'Score Deviation', stats.standardDeviation.toFixed(1));\n    }\n  }\n\n  renderComparisonCard(container, animeStats, mangaStats) {\n    const card = container.createDiv({ cls: 'zoro-stat-card zoro-comparison-card' });\n\n    const header = card.createDiv({ cls: 'zoro-card-header' });\n    header.createEl('h3', { \n      text: 'At a Glance',\n      cls: 'zoro-card-title'\n    });\n\n    const comparisons = card.createDiv({ cls: 'zoro-comparisons' });\n\n    // Total entries\n    const totalAnime = animeStats.count || 0;\n    const totalManga = mangaStats.count || 0;\n    const totalCombined = totalAnime + totalManga;\n    \n    const totalComp = comparisons.createDiv({ cls: 'zoro-comparison' });\n    totalComp.createEl('div', { \n      text: totalCombined.toLocaleString(),\n      cls: 'zoro-comparison-value'\n    });\n    totalComp.createEl('div', { \n      text: 'Total Entries',\n      cls: 'zoro-comparison-label'\n    });\n\n    // Preference indicator\n    if (totalAnime > 0 && totalManga > 0) {\n      const preference = totalAnime > totalManga ? 'Anime' : \n                       totalManga > totalAnime ? 'Manga' : 'Balanced';\n      const ratio = totalAnime > totalManga ? \n                    (totalAnime / totalManga).toFixed(1) : \n                    (totalManga / totalAnime).toFixed(1);\n      \n      const prefComp = comparisons.createDiv({ cls: 'zoro-comparison' });\n      prefComp.createEl('div', { \n        text: preference,\n        cls: 'zoro-comparison-value'\n      });\n      prefComp.createEl('div', { \n        text: preference === 'Balanced' ? 'Preference' : `${ratio}:1 Ratio`,\n        cls: 'zoro-comparison-label'\n      });\n    }\n\n    // Score comparison\n    const animeScore = animeStats.meanScore || 0;\n    const mangaScore = mangaStats.meanScore || 0;\n    if (animeScore > 0 && mangaScore > 0) {\n      const scoreDiff = Math.abs(animeScore - mangaScore);\n      const higherType = animeScore > mangaScore ? 'Anime' : 'Manga';\n      \n      const scoreComp = comparisons.createDiv({ cls: 'zoro-comparison' });\n      scoreComp.createEl('div', { \n        text: scoreDiff < 0.5 ? 'Similar' : higherType,\n        cls: 'zoro-comparison-value'\n      });\n      scoreComp.createEl('div', { \n        text: 'Higher Rated',\n        cls: 'zoro-comparison-label'\n      });\n    }\n  }\n\n  renderBreakdowns(fragment, user, mediaType) {\n    const type = mediaType.toLowerCase();\n    const normalizedType = (type === 'movies') ? 'movie' : type;\n    const stats = user.statistics[normalizedType];\n    \n    if (!stats || stats.count === 0) return;\n\n    const section = fragment.createDiv({ cls: 'zoro-stats-breakdowns' });\n    section.createEl('h3', { \n      text: `${mediaType} Breakdown`,\n      cls: 'zoro-section-title'\n    });\n\n    const breakdownGrid = section.createDiv({ cls: 'zoro-breakdown-grid' });\n\n    // Status distribution (most useful)\n    if (stats.statuses?.length) {\n      this.renderBreakdownChart(breakdownGrid, 'Status Distribution', stats.statuses, 'status', {\n        showPercentages: true,\n        maxItems: 6\n      });\n    }\n\n    // Score distribution (if user rates)\n    if (stats.scores?.length) {\n      const validScores = stats.scores.filter(s => s.score > 0 && s.count > 0);\n      if (validScores.length >= 3) {\n        this.renderScoreDistribution(breakdownGrid, validScores, user.mediaListOptions);\n      }\n    }\n\n    // Format breakdown\n    if (stats.formats?.length) {\n      const topFormats = stats.formats.slice(0, 6);\n      this.renderBreakdownChart(breakdownGrid, 'Format Distribution', topFormats, 'format', {\n        showPercentages: true\n      });\n    }\n\n    // Release years (activity timeline)\n    if (stats.releaseYears?.length) {\n      this.renderYearlyActivity(breakdownGrid, stats.releaseYears);\n    }\n  }\n\n  renderInsights(fragment, user, mediaType) {\n    const type = mediaType.toLowerCase();\n    const normalizedType = (type === 'movies') ? 'movie' : type;\n    const stats = user.statistics[normalizedType];\n    \n    if (!stats) return;\n\n    const insights = fragment.createDiv({ cls: 'zoro-stats-insights' });\n    insights.createEl('h3', { \n      text: 'Insights',\n      cls: 'zoro-section-title'\n    });\n\n    const insightsList = insights.createDiv({ cls: 'zoro-insights-list' });\n\n    // Generate meaningful insights\n    const insightData = this.generateInsights(stats, type, user);\n    insightData.forEach(insight => {\n      const item = insightsList.createDiv({ cls: 'zoro-insight-item' });\n      item.createEl('div', { \n        text: insight.icon,\n        cls: 'zoro-insight-icon'\n      });\n      item.createEl('div', { \n        text: insight.text,\n        cls: 'zoro-insight-text'\n      });\n    });\n  }\n\n  renderFavorites(fragment, user, mediaType) {\n    const type = mediaType.toLowerCase();\n    const favorites = user.favourites?.[type]?.nodes;\n    \n    if (!favorites?.length) return;\n\n    const section = fragment.createDiv({ cls: 'zoro-stats-favorites' });\n    section.createEl('h3', { \n      text: `Favorite ${mediaType}`,\n      cls: 'zoro-section-title'\n    });\n\n    const favGrid = section.createDiv({ cls: 'zoro-favorites-grid' });\n    \n    favorites.slice(0, 6).forEach(item => {\n      const favItem = favGrid.createDiv({ cls: 'zoro-favorite-item' });\n      \n      if (item.coverImage?.medium) {\n        favItem.createEl('img', {\n          cls: 'zoro-favorite-cover',\n          attr: {\n            src: item.coverImage.medium,\n            alt: this.formatter.formatTitle(item)\n          }\n        });\n      }\n      \n      const info = favItem.createDiv({ cls: 'zoro-favorite-info' });\n      info.createEl('div', { \n        text: this.formatter.formatTitle(item),\n        cls: 'zoro-favorite-title'\n      });\n      \n      if (item.meanScore) {\n        info.createEl('div', { \n          text: `\u2605 ${(item.meanScore / 10).toFixed(1)}`,\n          cls: 'zoro-favorite-score'\n        });\n      }\n    });\n  }\n\n  renderBreakdownChart(container, title, data, keyField, options = {}) {\n    const { showPercentages = false, maxItems = 8 } = options;\n    \n    const chartContainer = container.createDiv({ cls: 'zoro-breakdown-chart' });\n    chartContainer.createEl('h4', { \n      text: title,\n      cls: 'zoro-breakdown-title'\n    });\n\n    const chartData = data.slice(0, maxItems);\n    const total = chartData.reduce((sum, item) => sum + item.count, 0);\n    const maxCount = Math.max(...chartData.map(item => item.count));\n\n    const chart = chartContainer.createDiv({ cls: 'zoro-chart' });\n    \n    chartData.forEach((item, index) => {\n      const barContainer = chart.createDiv({ cls: 'zoro-chart-bar-container' });\n      \n      const label = barContainer.createDiv({ cls: 'zoro-chart-label' });\n      label.textContent = item[keyField] || item.status || item.genre || item.format;\n      \n      const barSection = barContainer.createDiv({ cls: 'zoro-chart-bar-section' });\n      const bar = barSection.createDiv({ cls: 'zoro-chart-bar' });\n      \n      const percentage = (item.count / maxCount) * 100;\n      bar.style.setProperty('--bar-width', `${percentage}%`);\n      bar.style.animationDelay = `${index * 0.1}s`;\n      \n      const value = barSection.createDiv({ cls: 'zoro-chart-value' });\n      if (showPercentages && total > 0) {\n        const percent = ((item.count / total) * 100).toFixed(1);\n        value.textContent = `${item.count} (${percent}%)`;\n      } else {\n        value.textContent = item.count.toLocaleString();\n      }\n    });\n  }\n\n  renderScoreDistribution(container, scores, listOptions) {\n  const chartContainer = container.createDiv({ cls: 'zoro-breakdown-chart' });\n  chartContainer.createEl('h4', { \n    text: 'Score Distribution',\n    cls: 'zoro-breakdown-title'\n  });\n\n  const chart = chartContainer.createDiv({ cls: 'zoro-score-chart' });\n  const maxCount = Math.max(...scores.map(s => s.count));\n\n  scores.forEach((scoreData, index) => {\n    const barContainer = chart.createDiv({ cls: 'zoro-score-bar-container' });\n    \n    const label = barContainer.createDiv({ cls: 'zoro-score-label' });\n    const scoreFormat = listOptions?.scoreFormat || 'POINT_10';\n    let scoreValue = scoreData.score;\n    if (scoreFormat === 'POINT_10' && typeof scoreValue === 'number' && scoreValue <= 10) {\n      scoreValue = scoreValue * 10;\n    }\n    label.textContent = this.formatter.formatScore(scoreValue, scoreFormat);\n    \n    const bar = barContainer.createDiv({ cls: 'zoro-score-bar' });\n    const percentage = (scoreData.count / maxCount) * 100;\n    // Fix: Set --bar-height instead of --bar-width for vertical bars\n    bar.style.setProperty('--bar-height', `${percentage}%`);\n    bar.style.animationDelay = `${index * 0.1}s`;\n    \n    const value = barContainer.createDiv({ cls: 'zoro-score-value' });\n    value.textContent = scoreData.count;\n  });\n}\n\n  renderYearlyActivity(container, yearData) {\n    const chartContainer = container.createDiv({ cls: 'zoro-breakdown-chart' });\n    chartContainer.createEl('h4', { \n      text: 'Activity by Year',\n      cls: 'zoro-breakdown-title'\n    });\n\n    const recentYears = yearData\n      .filter(y => y.releaseYear >= new Date().getFullYear() - 15)\n      .slice(0, 8);\n\n    if (recentYears.length === 0) return;\n\n    const timeline = chartContainer.createDiv({ cls: 'zoro-year-timeline' });\n    const maxCount = Math.max(...recentYears.map(y => y.count));\n\n    recentYears.forEach((yearData, index) => {\n      const yearItem = timeline.createDiv({ cls: 'zoro-year-item' });\n      \n      yearItem.createEl('div', { \n        text: yearData.releaseYear,\n        cls: 'zoro-year-label'\n      });\n      \n      const bar = yearItem.createDiv({ cls: 'zoro-year-bar' });\n      const percentage = (yearData.count / maxCount) * 100;\n      bar.style.setProperty('--bar-width', `${percentage}%`);\n      bar.style.animationDelay = `${index * 0.1}s`;\n      \n      yearItem.createEl('div', { \n        text: yearData.count,\n        cls: 'zoro-year-count'\n      });\n    });\n  }\n\n  generateInsights(stats, type, user) {\n    const insights = [];\n    \n    // Completion rate insight\n    if (stats.statuses) {\n      const completed = stats.statuses.find(s => s.status === 'COMPLETED')?.count || 0;\n      const total = stats.count;\n      const completionRate = (completed / total * 100).toFixed(0);\n      \n      if (completionRate >= 80) {\n        insights.push({\n          icon: '\uD83C\uDFC6',\n          text: `High completion rate: ${completionRate}% of your ${type} are completed`\n        });\n      } else if (completionRate <= 30) {\n        insights.push({\n          icon: '\uD83D\uDCDA',\n          text: `Lots to explore: Only ${completionRate}% completed, plenty of ${type} to discover!`\n        });\n      }\n    }\n\n    // Score distribution insight\n    if (stats.meanScore > 0) {\n      if (stats.meanScore >= 80) {\n        insights.push({\n          icon: '\u2B50',\n          text: `You're generous with ratings! Average score: ${(stats.meanScore/10).toFixed(1)}/10`\n        });\n      } else if (stats.meanScore <= 60) {\n        insights.push({\n          icon: '\uD83D\uDD0D',\n          text: `Selective taste: You rate ${type} conservatively with ${(stats.meanScore/10).toFixed(1)}/10 average`\n        });\n      }\n    }\n\n    // Volume insight for anime\n    if (type === 'anime' && stats.episodesWatched) {\n      if (stats.episodesWatched >= 5000) {\n        insights.push({\n          icon: '\uD83C\uDFAD',\n          text: `Anime veteran: ${stats.episodesWatched.toLocaleString()} episodes watched!`\n        });\n      }\n      \n      if (stats.minutesWatched >= 100000) { // ~69 days\n        const days = Math.floor(stats.minutesWatched / (60 * 24));\n        insights.push({\n          icon: '\u23F0',\n          text: `Time investment: ${days} days worth of anime watched`\n        });\n      }\n    }\n\n    // Genre diversity (if available)\n    if (stats.genres && stats.genres.length >= 15) {\n      insights.push({\n        icon: '\uD83C\uDF08',\n        text: `Diverse taste: You enjoy ${stats.genres.length} different genres`\n      });\n    }\n\n    return insights.slice(0, 4); // Limit to 4 insights\n  }\n}\n\nexport { StatsRenderer };", "import { Setting, Notice, setIcon } from 'obsidian';\n\nclass EmojiIconMapper {\n  constructor(opts = {}) {\n    this.map = new Map(Object.entries({\n      '\uD83D\uDC64': 'user',\n      '\uD83E\uDDED': 'compass',\n      '\uD83D\uDCFA': 'monitor',\n      '\uD83C\uDF0C': 'palette',\n      '\u2728': 'sparkles',\n      '\uD83D\uDCE4': 'upload',\n      '\uD83D\uDD01': 'refresh-cw',\n      '\uD83D\uDEA7': 'construction',\n      '\u2139\uFE0F': 'info',\n      '\uD83C\uDD94': 'id-card',\n      '\u2733\uFE0F': 'shell',\n      '\uD83D\uDDFE': 'origami',\n      '\u26A1': 'zap',\n      '\uD83D\uDDDD\uFE0F': 'key',\n      '\uD83E\uDDCA': 'layout-grid',\n      '\uD83D\uDD32': 'columns-3',\n      '\u23F3': 'loader',\n      '\uD83D\uDD17': 'link',\n      '\uD83C\uDF06': 'image',\n      '\u2B50': 'star',\n      '\uD83D\uDCC8': 'trending-up',\n      '\uD83C\uDFAD': 'tag',\n      '\uD83E\uDDEE': 'calculator',\n      '\uD83E\uDDFE': 'file-text',\n      '\uD83C\uDFA8': 'palette',\n      '\uD83D\uDCE5': 'download',\n      '\uD83D\uDDD1': 'trash',\n      '\uD83D\uDCCA': 'bar-chart',\n      '\uD83E\uDDF9': 'trash-2',\n      '\uD83C\uDFAC': 'film',\n      '\uD83D\uDDDD': 'key',\n      '\uD83D\uDD11': 'key',\n      '\uD83D\uDD12': 'lock',\n      '\uD83D\uDD0D': 'search',\n      '\uD83C\uDF10': 'globe',\n      '\uD83D\uDEF0\uFE0F': 'globe',\n      '\uD83C\uDF00': 'refresh-cw',\n      '\uD83C\uDF1F': 'star',\n      '\uD83D\uDDD1\uFE0F': 'trash-2',\n      '\u231B': 'hourglass',\n      '\uD83D\uDCC3': 'file-text',\n      '\uD83D\uDCC9': 'trending-down',\n      '\uD83E\uDDFF': 'list',\n      '\uD83E\uDDE8': 'zap',\n      '\u2139': 'info',\n      '\u2795': 'circle-plus',\n      '\uD83D\uDCDD': 'square-pen',\n      '\u26D3\uFE0F': 'workflow',\n      '\uD83D\uDCBE': 'database-backup',\n      '\uD83C\uDF13': 'swatch-book',\n      '\uD83D\uDDD2\uFE0F': 'notebook-pen', \n      '\uD83D\uDDC2\uFE0F': 'folder-open',\n      '\uD83D\uDD2E': 'align-right',\n      '\uD83C\uDFB4': 'file-input',\n      '\uD83D\uDEAA': 'door-open',\n      '\uD83D\uDCD6': 'square-arrow-out-up-right',\n      '\u2705': 'check',\n      '\uD83D\uDCCB': 'clipboard-list',\n      '\uD83D\uDD16': 'bookmark',\n      '\uD83D\uDCD1': 'bookmark-check',\n      '\u26A0\uFE0F': 'triangle-alert',\n      '\uD83D\uDD79\uFE0F': 'settings-2',\n      '\u2611\uFE0F': 'list-checks',\n      ...Object.fromEntries(opts.map || [])\n    }));\n    \n    this._sortedKeys = [...this.map.keys()].sort((a, b) => b.length - a.length);\n    this._emojiRegex = new RegExp(`(${this._sortedKeys.map(k => k.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')).join('|')})`, 'g');\n    this._iconRegex = /\\[icon:([a-z0-9-]+)\\]/gi;\n    this._colonRegex = /:([a-z0-9-]+):/gi;\n    this._patches = new Map();\n    this._patched = false;\n    this.iconSize = opts.iconSize ?? 30;\n    this.gap = opts.gap ?? 6;\n    this._iconStyle = `display:inline-flex;align-items:center;justify-content:center;width:${this.iconSize}px;height:${this.iconSize}px;vertical-align:middle`;\n  }\n\n  init(opts = {}) {\n    const { patchSettings = true, patchCreateEl = true, patchNotice = false } = opts;\n    \n    if (this._patched) return this;\n    \n    this._injectStyles();\n    patchSettings && this._patchSettings();\n    patchCreateEl && this._patchCreateEl();\n    patchNotice && this._patchNotice();\n    \n    this._patched = true;\n    globalThis.__emojiIconMapper = this;\n    return this;\n  }\n\n  unpatch() {\n    if (!this._patched) return this;\n    \n    for (const [target, original] of this._patches) {\n      try { Object.assign(target, original); } catch {}\n    }\n    \n    this._patches.clear();\n    this._patched = false;\n    return this;\n  }\n\n  parseToFragment(text) {\n    if (!text?.trim?.()) return null;\n    \n    if (!this._hasTokens(text)) return null;\n    \n    const fragment = document.createDocumentFragment();\n    let lastIndex = 0;\n    \n    const matches = this._getAllMatches(text);\n    if (!matches.length) return null;\n    \n    matches.forEach(({ start, end, iconName }) => {\n      if (start > lastIndex) {\n        fragment.appendChild(document.createTextNode(text.slice(lastIndex, start)));\n      }\n      \n      fragment.appendChild(this._createIcon(iconName));\n      lastIndex = end;\n    });\n    \n    if (lastIndex < text.length) {\n      fragment.appendChild(document.createTextNode(text.slice(lastIndex)));\n    }\n    \n    return fragment;\n  }\n\n  _hasTokens(text) {\n    this._emojiRegex.lastIndex = 0;\n    return text.includes('[icon:') || text.includes(':') || this._emojiRegex.test(text);\n  }\n\n  _getAllMatches(text) {\n    const matches = [];\n    \n    this._iconRegex.lastIndex = 0;\n    for (const match of text.matchAll(this._iconRegex)) {\n      matches.push({\n        start: match.index,\n        end: match.index + match[0].length,\n        iconName: match[1]\n      });\n    }\n    \n    this._colonRegex.lastIndex = 0;\n    for (const match of text.matchAll(this._colonRegex)) {\n      matches.push({\n        start: match.index,\n        end: match.index + match[0].length,\n        iconName: match[1]\n      });\n    }\n    \n    this._emojiRegex.lastIndex = 0;\n    for (const match of text.matchAll(this._emojiRegex)) {\n      const iconName = this.map.get(match[0]);\n      if (iconName) {\n        matches.push({\n          start: match.index,\n          end: match.index + match[0].length,\n          iconName\n        });\n      }\n    }\n    \n    return matches\n      .sort((a, b) => a.start - b.start)\n      .filter((match, i, arr) => \n        i === 0 || match.start >= arr[i - 1].end\n      );\n  }\n\n  _createIcon(name) {\n    const span = document.createElement('span');\n    span.style.cssText = this._iconStyle;\n    \n    try {\n      if (typeof setIcon === 'function' && name) {\n        setIcon(span, name);\n      } else {\n        span.textContent = name ? `[${name}]` : '';\n      }\n    } catch {\n      span.textContent = '';\n    }\n    \n    return span;\n  }\n\n  _injectStyles() {\n    const styleId = 'emoji-icon-mapper-styles';\n    if (document.getElementById(styleId)) return;\n    \n    const style = document.createElement('style');\n    style.id = styleId;\n    style.textContent = `.eim-inline{display:inline-flex;gap:${this.gap}px;align-items:center;line-height:1}`;\n    document.head.appendChild(style);\n  }\n\n  _createPatchedMethod(original, processor) {\n    const self = this;\n    return function(value) {\n      if (typeof value === 'string') {\n        const fragment = self.parseToFragment(value);\n        if (fragment) {\n          const wrapper = document.createElement('span');\n          wrapper.className = 'eim-inline';\n          wrapper.appendChild(fragment);\n          return original.call(this, wrapper);\n        }\n      }\n      return original.call(this, value);\n    };\n  }\n\n  _patchSettings() {\n    if (typeof Setting === 'undefined') return;\n    \n    const proto = Setting.prototype;\n    const original = {\n      setName: proto.setName,\n      setDesc: proto.setDesc\n    };\n    \n    proto.setName = this._createPatchedMethod(original.setName);\n    proto.setDesc = this._createPatchedMethod(original.setDesc);\n    \n    this._patches.set(proto, original);\n  }\n\n  _patchCreateEl() {\n    if (!Element.prototype.createEl) return;\n    \n    const proto = Element.prototype;\n    const original = { createEl: proto.createEl };\n    const self = this;\n    \n    proto.createEl = function(tag, attrs, options) {\n      if (attrs?.text != null) {\n        const { text, ...restAttrs } = attrs;\n        const element = original.createEl.call(this, tag, restAttrs, options);\n        \n        if (typeof text === 'string') {\n          const fragment = self.parseToFragment(text);\n          element.appendChild(fragment || document.createTextNode(text));\n        } else {\n          element.appendChild(document.createTextNode(String(text)));\n        }\n        \n        return element;\n      }\n      return original.createEl.apply(this, arguments);\n    };\n    \n    this._patches.set(proto, original);\n  }\n\n  _patchNotice() {\n    if (typeof Notice === 'undefined') return;\n    \n    const OriginalNotice = Notice;\n    const self = this;\n    \n    function PatchedNotice(text, duration) {\n      const instance = new OriginalNotice('', duration);\n      const element = instance.noticeEl || instance.containerEl;\n      \n      if (element && typeof text === 'string') {\n        const fragment = self.parseToFragment(text);\n        element.appendChild(fragment || document.createTextNode(text));\n      }\n      \n      return instance;\n    }\n    \n    Object.setPrototypeOf(PatchedNotice, OriginalNotice);\n    PatchedNotice.prototype = OriginalNotice.prototype;\n    \n    globalThis.Notice = PatchedNotice;\n    this._patches.set(globalThis, { Notice: OriginalNotice });\n  }\n\n  addMap(mappings) {\n    const entries = mappings instanceof Map ? mappings : Object.entries(mappings);\n    \n    for (const [key, value] of entries) {\n      this.map.set(key, value);\n    }\n    \n    this._sortedKeys = [...this.map.keys()].sort((a, b) => b.length - a.length);\n    this._emojiRegex = new RegExp(\n      `(${this._sortedKeys.map(k => k.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')).join('|')})`, \n      'g'\n    );\n    this._iconRegex = /\\[icon:([a-z0-9-]+)\\]/gi;\n    this._colonRegex = /:([a-z0-9-]+):/gi;\n    \n    return this;\n  }\n\n  getStats() {\n    return {\n      totalMappings: this.map.size,\n      patched: this._patched,\n      patchCount: this._patches.size\n    };\n  }\n}\n\nexport { EmojiIconMapper };", "import { Notice } from 'obsidian';\nimport { EmojiIconMapper } from '../rendering/helpers/EmojiIconMapper.js';\n\n\nclass ConnectedNotes {\n  constructor(plugin) {\n    this.plugin = plugin;\n    this.app = plugin.app;\n    this.currentMedia = null; // Store current media for filename generation\n    this.currentUrls = null; // Store current URLs as array for matching\n    this.currentSource = null; // Store current source for code block generation\n    this.currentMediaType = null; // Store current media type for code block generation\n  }\n\n   /**\n * Extract search IDs from media entry based on API source\n */\nextractSearchIds(media, entry, source) {\n  const ids = {};\n  \n  // mal_id is STANDARD for all anime/manga regardless of source\n  if (source === 'mal') {\n    ids.mal_id = media.id;\n  } else if (source === 'anilist') {\n    // Primary: use idMal if available, Fallback: use anilist id\n    if (media.idMal) {\n      ids.mal_id = media.idMal;\n    }\n    // Always add anilist_id as backup\n    ids.anilist_id = media.id;\n  } else if (source === 'simkl') {\n    ids.simkl_id = media.id;\n    \n    const mediaType = this.plugin.apiHelper ? \n      this.plugin.apiHelper.detectMediaType(entry, {}, media) : \n      (entry?._zoroMeta?.mediaType || 'ANIME');\n    \n    if (mediaType === 'ANIME' && media.idMal) {\n      ids.mal_id = media.idMal;\n    }\n    \n    if (mediaType !== 'ANIME' && media.idImdb) {\n      ids.imdb_id = media.idImdb;\n    }\n    if (mediaType !== 'ANIME' && media.idTmdb) {\n      ids.tmdb_id = media.idTmdb;\n    }\n  } else if (source === 'tmdb') {\n    if (media.idTmdb || media.id) ids.tmdb_id = media.idTmdb || media.id;\n    if (media.idImdb) ids.imdb_id = media.idImdb;\n  }\n  \n  return ids;\n}\n\n/**\n * Build URLs array for current media to match against\n */\nbuildCurrentUrls(media, mediaType, source) {\n  const urls = [];\n  \n  // Build source-specific URL first\n  if (source === 'simkl') {\n    // Build SIMKL URL\n    const simklMediaType = (mediaType === 'ANIME' || mediaType.toLowerCase() === 'anime') ? 'anime' : \n                      (mediaType.toLowerCase() === 'movie') ? 'movies' :  // Note: \"movies\" not \"movie\"\n                      mediaType.toLowerCase();\nurls.push(`https://simkl.com/${simklMediaType}/${media.id}`);\n    \n    // For ANIME: Add MAL URL as backup\n    if (mediaType === 'ANIME' && media.idMal) {\n      const malMediaType = (mediaType.toLowerCase() === 'movie') ? 'anime' : mediaType.toLowerCase();\nurls.push(`https://myanimelist.net/${malMediaType}/${media.idMal}`);\n    }\n    \n    // For Movies/TV/other: Add IMDB and TMDB URLs as backup\n    if (mediaType !== 'ANIME' && media.idImdb) {\n      urls.push(`https://www.imdb.com/title/${media.idImdb}/`);\n    }\n    if (mediaType !== 'ANIME' && media.idTmdb) {\n      const isMovie = (mediaType || '').toString().toUpperCase().includes('MOVIE');\n      urls.push(`https://www.themoviedb.org/${isMovie ? 'movie' : 'tv'}/${media.idTmdb}`);\n    }\n    \n  } else if (source === 'tmdb') {\n    const isMovie = (mediaType || '').toString().toUpperCase().includes('MOVIE');\n    urls.push(`https://www.themoviedb.org/${isMovie ? 'movie' : 'tv'}/${media.idTmdb || media.id}`);\n    if (media.idImdb) urls.push(`https://www.imdb.com/title/${media.idImdb}/`);\n  } else {\n    // Build MAL URL if MAL ID exists\n    if (media.idMal) {\n      const malMediaType = (mediaType.toLowerCase() === 'movie') ? 'anime' : mediaType.toLowerCase();\nurls.push(`https://myanimelist.net/${malMediaType}/${media.idMal}`);\n    }\n    \n    // Build AniList URL for non-SIMKL sources\n    if (source !== 'simkl') {\n      urls.push(`https://anilist.co/${mediaType.toLowerCase()}/${media.id}`);\n    }\n  }\n  \n  return urls;\n}\n  /**\n   * Check if any URL in the array matches the current media URLs\n   */\n  hasMatchingUrl(frontmatterUrls, currentUrls) {\n    if (!frontmatterUrls || !currentUrls) return false;\n    \n    // Ensure frontmatterUrls is an array\n    const urlArray = Array.isArray(frontmatterUrls) ? frontmatterUrls : [frontmatterUrls];\n    \n    // Check if any URL in frontmatter matches any current URL\n    return urlArray.some(url => currentUrls.includes(url));\n  }\n\n  /**\n   * Search vault for notes with matching properties\n   */\n  async searchConnectedNotes(searchIds, mediaType) {\n    const connectedNotes = [];\n    const markdownFiles = this.app.vault.getMarkdownFiles();\n\n    for (const file of markdownFiles) {\n      const metadata = this.app.metadataCache.getFileCache(file);\n      const frontmatter = metadata?.frontmatter;\n      \n      if (!frontmatter) continue;\n\n      let hasMatchingId = false;\n\n      // Priority 1: Check MAL ID + media type\n      if (searchIds.mal_id && frontmatter.mal_id == searchIds.mal_id && frontmatter.media_type === mediaType) {\n        hasMatchingId = true;\n      }\n      \n      // Priority 2: Check AniList ID + media type (if MAL didn't match)\n      if (!hasMatchingId && searchIds.anilist_id && frontmatter.anilist_id == searchIds.anilist_id && frontmatter.media_type === mediaType) {\n        hasMatchingId = true;\n      }\n      \n      // Priority 3: Check other IDs + media type (if still no match)\n      if (!hasMatchingId) {\n        for (const [idType, idValue] of Object.entries(searchIds)) {\n          if (idType !== 'mal_id' && idType !== 'anilist_id' && frontmatter[idType] == idValue && frontmatter.media_type === mediaType) {\n            hasMatchingId = true;\n            break;\n          }\n        }\n      }\n\n      // Priority 4: Check URL array matching (fallback option)\n      if (!hasMatchingId && this.currentUrls) {\n        if (this.hasMatchingUrl(frontmatter.urls, this.currentUrls)) {\n          hasMatchingId = true;\n        }\n      }\n\n      // Also check for #Zoro tag\n      const hasZoroTag = metadata?.tags?.some(tag => tag.tag === '#Zoro') || false;\n      \n      if (hasMatchingId || hasZoroTag) {\n        connectedNotes.push({\n          file: file,\n          title: file.basename,\n          path: file.path,\n          frontmatter: frontmatter,\n          hasMatchingId: hasMatchingId,\n          hasZoroTag: hasZoroTag\n        });\n      }\n    }\n\n    return connectedNotes;\n  }\n\n  /**\n   * Search vault for existing notes to connect (excludes already connected ones)\n   */\n  async findNotesToConnect(searchQuery, searchIds, mediaType) {\n    const allFiles = this.app.vault.getMarkdownFiles();\n    const searchResults = [];\n    \n    if (!searchQuery || searchQuery.trim().length < 2) {\n      return searchResults;\n    }\n    \n    const query = searchQuery.toLowerCase().trim();\n    \n    for (const file of allFiles) {\n      // Skip files that already have matching IDs or URLs\n      const metadata = this.app.metadataCache.getFileCache(file);\n      const frontmatter = metadata?.frontmatter;\n      \n      if (frontmatter) {\n        let alreadyConnected = false;\n        \n        // Check ID matching\n        for (const [idType, idValue] of Object.entries(searchIds)) {\n          if (frontmatter[idType] == idValue && frontmatter.media_type === mediaType) {\n            alreadyConnected = true;\n            break;\n          }\n        }\n        \n        // Check URL array matching if not already connected\n        if (!alreadyConnected && this.currentUrls) {\n          if (this.hasMatchingUrl(frontmatter.urls, this.currentUrls)) {\n            alreadyConnected = true;\n          }\n        }\n        \n        if (alreadyConnected) continue;\n      }\n      \n      // Search in filename\n      if (file.basename.toLowerCase().includes(query)) {\n        searchResults.push({\n          file: file,\n          title: file.basename,\n          path: file.path,\n          matchType: 'title'\n        });\n        continue;\n      }\n      \n      // Search in content (first 500 chars for performance)\n      try {\n        const content = await this.app.vault.cachedRead(file);\n        const contentPreview = content.slice(0, 500).toLowerCase();\n        if (contentPreview.includes(query)) {\n          searchResults.push({\n            file: file,\n            title: file.basename,\n            path: file.path,\n            matchType: 'content'\n          });\n        }\n      } catch (error) {\n        // Skip files that can't be read\n        continue;\n      }\n    }\n    \n    // Sort by relevance (title matches first, then alphabetically)\n    return searchResults.sort((a, b) => {\n      if (a.matchType !== b.matchType) {\n        return a.matchType === 'title' ? -1 : 1;\n      }\n      return a.title.localeCompare(b.title);\n    }).slice(0, 20); // Limit to 20 results for performance\n  }\n\n  /**\n   * Merge URL arrays, avoiding duplicates\n   */\n  mergeUrlArrays(existingUrls, newUrls) {\n    if (!newUrls || newUrls.length === 0) {\n      return existingUrls || [];\n    }\n    \n    if (!existingUrls) {\n      return [...newUrls];\n    }\n    \n    // Ensure existing is an array\n    const existingArray = Array.isArray(existingUrls) ? existingUrls : [existingUrls];\n    \n    // Create new array with existing URLs plus new ones (no duplicates)\n    const mergedUrls = [...existingArray];\n    \n    newUrls.forEach(url => {\n      if (!mergedUrls.includes(url)) {\n        mergedUrls.push(url);\n      }\n    });\n    \n    return mergedUrls;\n  }\n\n  /**\n   * Generate code block content based on current media entry\n   */\n  generateCodeBlockContent() {\n    if (!this.plugin.settings.insertCodeBlockOnNote) {\n      return ''; // Return empty if setting is disabled\n    }\n    if (!this.currentMedia || !this.currentSource || !this.currentMediaType) {\n      return ''; // Return empty if missing required data\n    }\n    // Disable code block for TMDb trending (movies/TV) since single render is not supported\n    const src = String(this.currentSource || '').toLowerCase();\n    const typeUpper = String(this.currentMediaType || '').toUpperCase();\n    if (src === 'tmdb' && (typeUpper === 'MOVIE' || typeUpper === 'MOVIES' || typeUpper === 'TV' || typeUpper === 'SHOW' || typeUpper === 'SHOWS')) {\n      return '';\n    }\n\n    const lines = ['```zoro', 'type: single'];\n\n    lines.push(`source: ${this.currentSource}`);\n    lines.push(`mediaType: ${this.currentMediaType}`);\n    lines.push(`mediaId: ${this.currentMedia.id}`);\n\n    lines.push('```');\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * Add metadata to existing note\n   */\n   async connectExistingNote(file, searchIds, mediaType) {\n  try {\n    const content = await this.app.vault.read(file);\n    const metadata = this.app.metadataCache.getFileCache(file);\n    const existingFrontmatter = metadata?.frontmatter || {};\n    \n    // Parse existing frontmatter\n    let frontmatterEnd = 0;\n    let bodyContent = content;\n    \n    if (content.startsWith('---\\n')) {\n      const secondDelimiter = content.indexOf('\\n---\\n', 4);\n      if (secondDelimiter !== -1) {\n        frontmatterEnd = secondDelimiter + 5;\n        bodyContent = content.slice(frontmatterEnd);\n      }\n    }\n    \n    // Check if note is already connected to Zoro (has Zoro tag and some metadata)\n    const hasZoroTag = metadata?.tags?.some(tag => tag.tag === '#Zoro') || \n                      (Array.isArray(existingFrontmatter.tags) && existingFrontmatter.tags.includes('Zoro'));\n    \n    const hasExistingIds = existingFrontmatter.mal_id || \n                          existingFrontmatter.anilist_id || \n                          existingFrontmatter.simkl_id ||\n                          existingFrontmatter.imdb_id ||\n                          existingFrontmatter.tmdb_id ||\n                          existingFrontmatter.media_type ||\n                          existingFrontmatter.urls;\n    \n    const isAlreadyConnected = hasZoroTag && hasExistingIds;\n    \n    // Start with existing frontmatter\n    const updatedFrontmatter = { ...existingFrontmatter };\n    \n    if (isAlreadyConnected) {\n      // Note is already connected - only merge URLs, don't overwrite other metadata\n      console.log(`[ConnectedNotes] Note \"${file.basename}\" is already connected, only adding URLs`);\n      \n      // Only merge URL arrays\n      if (this.currentUrls && this.currentUrls.length > 0) {\n        updatedFrontmatter.urls = this.mergeUrlArrays(existingFrontmatter.urls, this.currentUrls);\n      }\n      \n      // Ensure Zoro tag is present (in case it was removed)\n      if (!updatedFrontmatter.tags) {\n        updatedFrontmatter.tags = ['Zoro'];\n      } else if (Array.isArray(updatedFrontmatter.tags)) {\n        if (!updatedFrontmatter.tags.includes('Zoro')) {\n          updatedFrontmatter.tags.push('Zoro');\n        }\n      }\n      \n    } else {\n      // Note is not connected yet - add full metadata\n      console.log(`[ConnectedNotes] Note \"${file.basename}\" is not connected, adding full metadata`);\n      \n      // Add new search IDs\n      Object.entries(searchIds).forEach(([key, value]) => {\n        updatedFrontmatter[key] = value;\n      });\n      \n      // Merge URL arrays\n      if (this.currentUrls && this.currentUrls.length > 0) {\n        updatedFrontmatter.urls = this.mergeUrlArrays(existingFrontmatter.urls, this.currentUrls);\n      }\n      \n      // Add media type\n      updatedFrontmatter.media_type = mediaType;\n      \n      // Add Zoro tag if not present\n      if (!updatedFrontmatter.tags) {\n        updatedFrontmatter.tags = ['Zoro'];\n      } else if (Array.isArray(updatedFrontmatter.tags)) {\n        if (!updatedFrontmatter.tags.includes('Zoro')) {\n          updatedFrontmatter.tags.push('Zoro');\n        }\n      }\n    }\n    \n    // Build new frontmatter\n    const frontmatterLines = ['---'];\n    Object.entries(updatedFrontmatter).forEach(([key, value]) => {\n      if (key === 'tags' && Array.isArray(value)) {\n        frontmatterLines.push('tags:');\n        value.forEach(tag => {\n          frontmatterLines.push(`  - ${tag}`);\n        });\n      } else if (key === 'urls' && Array.isArray(value)) {\n        frontmatterLines.push('urls:');\n        value.forEach(url => {\n          frontmatterLines.push(`  - \"${url}\"`);\n        });\n      } else {\n        frontmatterLines.push(`${key}: \"${value}\"`);\n      }\n    });\n    frontmatterLines.push('---', '');\n    \n    // Handle code block generation\n    let finalBodyContent = bodyContent;\n    \n    if (!isAlreadyConnected) {\n      // Only add code block for new connections (not for URL-only updates)\n      const codeBlockContent = this.generateCodeBlockContent();\n      \n      // Check if a zoro code block already exists in the body\n      const zoroCodeBlockRegex = /```zoro[\\s\\S]*?```/;\n      if (codeBlockContent && !zoroCodeBlockRegex.test(bodyContent)) {\n        // Add code block after frontmatter with proper spacing\n        finalBodyContent = codeBlockContent + '\\n\\n' + bodyContent;\n      }\n    }\n    \n    const newContent = frontmatterLines.join('\\n') + finalBodyContent;\n    \n    // Write updated content\n    await this.app.vault.modify(file, newContent);\n    \n    // Show appropriate success message\n    if (isAlreadyConnected) {\n      new Notice(`Updated URLs for: ${file.basename}`);\n    } else {\n      new Notice(`Connected note: ${file.basename}`);\n    }\n    \n    return true;\n    \n  } catch (error) {\n    console.error('[ConnectedNotes] Error connecting existing note:', error);\n    new Notice(`Failed to connect note: ${file.basename}`);\n    return false;\n  }\n}\n\n\n  /**\n   * Show connected notes in the permanent SidePanel\n   */\n  async showConnectedNotes(searchIds, mediaType, media = null, entry = null, source = null) {\n    try {\n      const context = { searchIds, mediaType, media, entry, source };\n      await this.openSidePanelWithContext(context);\n    } catch (error) {\n      console.error('[ConnectedNotes] Error showing connected notes:', error);\n      new Notice('Failed to load connected notes');\n    }\n  }\n\n  /**\n   * Safely close the Zoro side panel by swapping the view to empty\n   */\n  closePanelSafely(view) {\n    try {\n      const leaf = view?.leaf;\n      if (leaf && typeof leaf.setViewState === 'function') {\n        leaf.setViewState({ type: 'empty' });\n        return true;\n      }\n    } catch {}\n    return false;\n  }\n\n  /**\n   * Render the connect existing notes interface\n   */\n  renderConnectExistingInterface(container, searchIds, mediaType) {\n  // Create search interface container\n  const connectInterface = container.createEl('div', { cls: 'zoro-note-connect-interface' });\n\n  // Use the same input container classes as your other search bar so CSS matches\n  const searchWrapper = connectInterface.createEl('div', { cls: 'zoro-search-input-container' });\n\n  // Create icon element (mapper will convert this emoji -> icon)\n  const iconSpan = searchWrapper.createEl('span', { cls: 'zoro-search-icon' });\n\n  // Ensure emoji mapper is initialized (idempotent)\n  try {\n    if (!globalThis.__emojiIconMapper) {\n      // If EmojiIconMapper is available in scope\n      if (typeof EmojiIconMapper === 'function') {\n        new EmojiIconMapper().init({ patchCreateEl: true });\n      }\n    } else {\n      // make sure it's patched (safe to call)\n      globalThis.__emojiIconMapper.init?.({ patchCreateEl: true });\n    }\n  } catch (e) {\n    // swallow \u2014 we'll fallback to raw emoji below\n  }\n\n  // Render the icon via mapper if available, otherwise fallback to raw emoji\n  const mapper = globalThis.__emojiIconMapper;\n  if (mapper) {\n    const frag = mapper.parseToFragment('\uD83D\uDD0D');\n    if (frag) iconSpan.appendChild(frag);\n    else iconSpan.textContent = '\uD83D\uDD0D';\n  } else if (typeof iconSpan.createEl === 'function') {\n    // if createEl is patched but mapper not present, let patched createEl handle it\n    iconSpan.createEl('span', { text: '\uD83D\uDD0D' });\n  } else {\n    iconSpan.textContent = '\uD83D\uDD0D';\n  }\n\n  // Create actual input (reuse same class as other search bar)\n  const searchInput = searchWrapper.createEl('input', { cls: 'zoro-search-input' });\n  searchInput.type = 'text';\n  // plain-text placeholder (no emoji)\n  searchInput.placeholder = ' Search notes to connect...';\n\n  // Search results container\n  const resultsContainer = connectInterface.createEl('div', { cls: 'zoro-note-search-results' });\n\n  // Search functionality with debounce\n  let searchTimeout;\n  searchInput.addEventListener('input', () => {\n    clearTimeout(searchTimeout);\n    searchTimeout = setTimeout(async () => {\n      const query = searchInput.value;\n      resultsContainer.empty();\n\n      if (query.trim().length >= 2) {\n        const results = await this.findNotesToConnect(query, searchIds, mediaType);\n\n        if (results.length === 0) {\n          resultsContainer.createEl('div', { text: 'No notes found', cls: 'zoro-note-no-results' });\n        } else {\n          results.forEach(result => {\n            const resultItem = resultsContainer.createEl('div', { cls: 'zoro-note-search-result' });\n\n            resultItem.createEl('span', { text: result.title, cls: 'zoro-note-result-title' });\n\n            const connectBtn = resultItem.createEl('button', { text: '\u2795', cls: 'zoro-note-connect-btn' });\n            connectBtn.title = 'Connect this note';\n\n            connectBtn.onclick = async (e) => {\n              e.stopPropagation();\n              const success = await this.connectExistingNote(result.file, searchIds, mediaType);\n              if (success) {\n                const connectedNotes = await this.searchConnectedNotes(searchIds, mediaType);\n                this.refreshConnectedNotesList(container.querySelector('.zoro-note-panel-content'), connectedNotes);\n                connectInterface.classList.add('zoro-note-hidden');\n                searchInput.value = '';\n                resultsContainer.empty();\n              }\n            };\n\n            // Click on item to preview\n            resultItem.onclick = (e) => {\n              if (e.target !== connectBtn) {\n                const mainLeaf = this.app.workspace.getLeaf('tab');\n                mainLeaf.openFile(result.file);\n              }\n            };\n          });\n        }\n      }\n    }, 300); // 300ms debounce\n  });\n\n  return connectInterface;\n}\n\n\n\n  /**\n   * Refresh the connected notes list without full re-render\n   */\n  refreshConnectedNotesList(mainContent, connectedNotes) {\n    const notesList = mainContent.querySelector('.zoro-note-notes-list');\n    const emptyState = mainContent.querySelector('.zoro-note-empty-state');\n    \n    if (connectedNotes.length === 0) {\n      if (notesList) notesList.remove();\n      if (!emptyState) {\n        const newEmptyState = mainContent.createEl('div', { cls: 'zoro-note-empty-state' });\n        newEmptyState.createEl('div', { text: 'No notes', cls: 'zoro-note-empty-message' });\n      }\n    } else {\n      if (emptyState) emptyState.remove();\n      if (notesList) notesList.remove();\n      \n      // Recreate notes list\n      const newNotesList = mainContent.createEl('div', { cls: 'zoro-note-notes-list' });\n      \n      connectedNotes.forEach(note => {\n        const noteItem = newNotesList.createEl('div', { cls: 'zoro-note-item' });\n        \n        // Note title\n        const noteTitle = noteItem.createEl('div', { text: note.title, cls: 'zoro-note-title' });\n        \n        // Click handler for the entire item\n        noteItem.onclick = (e) => {\n          e.preventDefault();\n          const mainLeaf = this.app.workspace.getLeaf('tab');\n          mainLeaf.openFile(note.file);\n          this.app.workspace.setActiveLeaf(mainLeaf);\n        };\n\n        // Show matching indicators\n        const indicators = noteItem.createEl('div', { cls: 'zoro-note-indicators' });\n        \n        if (note.hasMatchingId) {\n          const idIndicator = indicators.createEl('span', { text: '\uD83D\uDD17', cls: 'zoro-note-id-indicator', title: 'Has matching ID' });\n        }\n        if (note.hasZoroTag) {\n          const tagIndicator = indicators.createEl('span', { text: '\uD83C\uDFF7\uFE0F', cls: 'zoro-note-tag-indicator', title: 'Has #Zoro tag' });\n        }\n      });\n    }\n  }\n\n  /**\n   * Render connected notes in the dedicated Zoro view\n   */\n  renderConnectedNotesInView(view, connectedNotes, searchIds, mediaType) {\n    const container = view.containerEl;\n    container.empty();\n    container.className = 'zoro-note-container';\n\n    // Set multiple title properties to ensure \"Zoro\" appears everywhere\n    if (view.titleEl) {\n      view.titleEl.setText('Zoro');\n    }\n    \n    // Set the view's display name\n    if (view.getDisplayText) {\n      view.getDisplayText = () => 'Zoro';\n    } else {\n      view.getDisplayText = () => 'Zoro';\n    }\n    \n    // Set view type if available\n    if (view.getViewType) {\n      view.getViewType = () => 'zoro-panel';\n    } else {\n      view.getViewType = () => 'zoro-panel';\n    }\n    \n    // Force update the leaf's tab header\n    if (view.leaf) {\n      const leaf = view.leaf;\n      setTimeout(() => {\n        if (leaf.tabHeaderEl) {\n          const titleEl = leaf.tabHeaderEl.querySelector('.workspace-tab-header-inner-title');\n          if (titleEl) {\n            titleEl.textContent = 'Zoro';\n          }\n        }\n        leaf.updateHeader();\n      }, 10);\n    }\n\n    // Connect existing notes interface (initially hidden)\n    const connectInterface = this.renderConnectExistingInterface(container, searchIds, mediaType);\n    connectInterface.classList.add('zoro-note-hidden'); // Initially hidden\n\n    // Main content area\n    const mainContent = container.createEl('div', { cls: 'zoro-note-panel-content' });\n\n    // Notes list or empty state\n    if (connectedNotes.length === 0) {\n      const emptyState = mainContent.createEl('div', { cls: 'zoro-note-empty-state' });\n      emptyState.createEl('div', { text: 'No notes linked yet ', cls: 'zoro-note-empty-message' });\n    } else {\n      // Notes list\n      const notesList = mainContent.createEl('div', { cls: 'zoro-note-notes-list' });\n      \n      connectedNotes.forEach(note => {\n        const noteItem = notesList.createEl('div', { cls: 'zoro-note-item' });\n        \n        // Note title\n        const noteTitle = noteItem.createEl('div', { text: note.title, cls: 'zoro-note-title' });\n        \n        // Click handler for the entire item\n        noteItem.onclick = (e) => {\n          e.preventDefault();\n          const mainLeaf = this.app.workspace.getLeaf('tab');\n          mainLeaf.openFile(note.file);\n          this.app.workspace.setActiveLeaf(mainLeaf);\n        };\n\n        // Show matching indicators\n        const indicators = noteItem.createEl('div', { cls: 'zoro-note-indicators' });\n        \n        if (note.hasMatchingId) {\n          const idIndicator = indicators.createEl('span', { text: '\uD83D\uDD17', cls: 'zoro-note-id-indicator', title: 'Has matching ID' });\n        }\n        if (note.hasZoroTag) {\n          const tagIndicator = indicators.createEl('span', { text: '\uD83C\uDFF7\uFE0F', cls: 'zoro-note-tag-indicator', title: 'Has #Zoro tag' });\n        }\n      });\n    }\n\n    // Footer section at bottom\n    const footer = container.createEl('div', { cls: 'zoro-note-panel-footer' });\n    \n    const createButton = footer.createEl('button', { text: '\uD83D\uDCDD', cls: 'zoro-note-create-btn' });\n    createButton.onclick = () => this.createNewConnectedNote(searchIds, mediaType);\n    \n    // New connect existing button\n    const connectButton = footer.createEl('button', { text: '\u26D3\uFE0F', cls: 'zoro-note-connect-existing-btn' });\n    \n    connectButton.onclick = () => {\n      connectInterface.classList.toggle('zoro-note-hidden');\n      \n      if (!connectInterface.classList.contains('zoro-note-hidden')) {\n        // Focus on search input when opened\n        const searchInput = connectInterface.querySelector('.zoro-note-search-input');\n        setTimeout(() => searchInput.focus(), 100);\n      } else {\n        // Clear search when closed\n        const searchInput = connectInterface.querySelector('.zoro-note-search-input');\n        const resultsContainer = connectInterface.querySelector('.zoro-note-search-results');\n        searchInput.value = '';\n        resultsContainer.empty();\n      }\n    };\n  }\n\n  /**\n   * Extract media title for filename (prefers English, falls back to romaji)\n   */\n  getMediaTitleForFilename() {\n    if (!this.currentMedia) {\n      return 'Untitled'; // Fallback if no media stored\n    }\n    \n    // Prefer English title, fall back to romaji, then native, then 'Untitled'\n    const title = this.currentMedia.title?.english || \n                  this.currentMedia.title?.romaji || \n                  this.currentMedia.title?.native || \n                  'Untitled';\n    \n    // Clean the title for filename (remove invalid characters)\n    return title.replace(/[<>:\"/\\\\|?*]/g, '').trim();\n  }\n\n  /**\n   * Get the configured note path from settings\n   */\n  getConfiguredNotePath() {\n    // Get the note path from plugin settings\n    const notePath = this.plugin.settings?.notePath || '';\n    \n    // Ensure path ends with '/' if it's not empty\n    if (notePath && !notePath.endsWith('/')) {\n      return notePath + '/';\n    }\n    \n    return notePath;\n  }\n\n  /**\n   * Generate unique filename with path like Obsidian does (Title, Title 1, Title 2, etc.)\n   */\n  generateUniqueFilename(baseName = null) {\n    // Use media title if available, otherwise fallback to 'Untitled'\n    const preferredBaseName = baseName || this.getMediaTitleForFilename();\n    \n    // Get configured path\n    const notePath = this.getConfiguredNotePath();\n    \n    // Generate full path with filename\n    const baseFileName = `${notePath}${preferredBaseName}.md`;\n    \n    // Check if base filename exists\n    if (!this.app.vault.getAbstractFileByPath(baseFileName)) {\n      return baseFileName;\n    }\n    \n    // Generate numbered variants until we find one that doesn't exist\n    let counter = 1;\n    let uniqueFileName;\n    do {\n      uniqueFileName = `${notePath}${preferredBaseName} ${counter}.md`;\n      counter++;\n    } while (this.app.vault.getAbstractFileByPath(uniqueFileName));\n    \n    return uniqueFileName;\n  }\n\n  /**\n   * Ensure the configured path exists in the vault\n   */\n  async ensurePathExists(filePath) {\n    // Extract directory path from file path\n    const pathParts = filePath.split('/');\n    pathParts.pop(); // Remove filename\n    const dirPath = pathParts.join('/');\n    \n    if (!dirPath) return; // No directory to create\n    \n    // Check if directory exists and create if it doesn't\n    const abstractFile = this.app.vault.getAbstractFileByPath(dirPath);\n    if (!abstractFile) {\n      try {\n        await this.app.vault.createFolder(dirPath);\n      } catch (error) {\n        // Folder might already exist, or there might be another issue\n        console.warn('[ConnectedNotes] Could not create folder:', dirPath, error);\n      }\n    }\n  }\n\n  /**\n   * Create a new note with unique filename and add metadata\n   */\n  async createNewConnectedNote(searchIds, mediaType) {\n    try {\n      // Generate unique filename using media title with configured path\n      const uniqueFileName = this.generateUniqueFilename();\n      \n      // Ensure the directory path exists\n      await this.ensurePathExists(uniqueFileName);\n      \n      // Create frontmatter content\n      const frontmatterLines = [\n        '---',\n        ...Object.entries(searchIds).map(([key, value]) => `${key}: \"${value}\"`),\n        `media_type: \"${mediaType}\"`,\n      ];\n      \n      // Add URL array to frontmatter\n      if (this.currentUrls && this.currentUrls.length > 0) {\n        frontmatterLines.push('urls:');\n        this.currentUrls.forEach(url => {\n          frontmatterLines.push(`  - \"${url}\"`);\n        });\n      }\n      \n      frontmatterLines.push('tags:', '  - Zoro', '---', '');\n      \n      const frontmatter = frontmatterLines.join('\\n');\n\n      // Generate code block content\n      const codeBlockContent = this.generateCodeBlockContent();\n      \n      // Combine frontmatter with code block and additional spacing\n      let noteContent = frontmatter;\n      if (codeBlockContent) {\n        noteContent += codeBlockContent + '\\n\\n';\n      }\n\n      // Create the file with unique name, frontmatter, and code block\n      const file = await this.app.vault.create(uniqueFileName, noteContent);\n      \n      // Open in main workspace\n      const mainLeaf = this.app.workspace.getLeaf('tab');\n      await mainLeaf.openFile(file);\n      this.app.workspace.setActiveLeaf(mainLeaf);\n      \n      new Notice('Created new connected note!');\n      \n    } catch (error) {\n      console.error('[ConnectedNotes] Error creating new note:', error);\n      new Notice('Failed to create new note');\n    }\n  }\n\n  /**\n   * Create the connected notes button for media cards\n   */\n  createConnectedNotesButton(media, entry, config) {\n    const notesBtn = document.createElement('span');\n    notesBtn.className = 'zoro-note-obsidian';\n    notesBtn.createEl('span', { text: '\uD83D\uDD2E' });\n    notesBtn.title = 'View connected notes';\n    \n    notesBtn.onclick = (e) => this.handleConnectedNotesClick(e, media, entry, config);\n    \n    return notesBtn;\n  }\n  /**\n * Handle connected notes button click\n */\nasync handleConnectedNotesClick(e, media, entry, config) {\n  e.preventDefault();\n  e.stopPropagation();\n  \n  try {\n    // Extract source and media type\n    const source = this.plugin.apiHelper ? \n      this.plugin.apiHelper.detectSource(entry, config) : \n      (entry?._zoroMeta?.source || config?.source || 'anilist');\n    \n    const mediaType = this.plugin.apiHelper ? \n      this.plugin.apiHelper.detectMediaType(entry, config, media) : \n      (entry?._zoroMeta?.mediaType || config?.mediaType || 'ANIME');\n    \n    // Store current media for filename generation (PREFER ENGLISH TITLE)\n    this.currentMedia = media;\n    \n    // Store current source and media type for code block generation\n    this.currentSource = source;\n    this.currentMediaType = mediaType;\n    \n    // Build URLs array for current media (NOW PASSES SOURCE)\n    this.currentUrls = this.buildCurrentUrls(media, mediaType, source);\n    \n    // Extract search IDs\n    const searchIds = this.extractSearchIds(media, entry, source);\n    \n    // Show connected notes and pass media/entry/source for Side Panel inline actions\n    await this.showConnectedNotes(searchIds, mediaType, media, entry, source);\n    \n  } catch (error) {\n    console.error('[ConnectedNotes] Button click error:', error);\n    new Notice('Failed to open connected notes');\n  }\n}\n\n  async openSidePanelWithContext(context) {\n    // Reuse existing zoro-panel leaf if present; detach extras\n    const leaves = this.app.workspace.getLeavesOfType?.('zoro-panel') || [];\n    let leaf = leaves[0] || this.app.workspace.getRightLeaf(true);\n    // Detach duplicate zoro-panel leaves (keep only one)\n    if (leaves.length > 1) {\n      for (let i = 1; i < leaves.length; i++) {\n        try { leaves[i].detach(); } catch {}\n      }\n    }\n\n    await leaf.setViewState({ type: 'zoro-panel', active: true });\n    const view = leaf.view;\n    if (view && typeof view.setContext === 'function') {\n      view.setContext(context);\n    }\n    this.app.workspace.revealLeaf(leaf);\n    return view;\n  }\n}\n\nexport { ConnectedNotes };", "import { ItemView, Notice } from 'obsidian';\n\nconst ZORO_VIEW_TYPE = 'zoro-panel';\n\nclass SidePanel extends ItemView {\n\tconstructor(leaf, plugin) {\n\t\tsuper(leaf);\n\t\tthis.plugin = plugin;\n\t\tthis.currentCleanup = null;\n\t\tthis.context = null; // { media, entry, source, mediaType, searchIds }\n\t\tthis.embedEl = null;\n\t\tthis.detailsBtn = null;\n\t\tthis.editInlineBtn = null;\n\t\tthis.currentMode = null; // 'details' | 'edit' | null\n\t}\n\n\tgetViewType() {\n\t\treturn ZORO_VIEW_TYPE;\n\t}\n\n\tgetDisplayText() {\n\t\treturn 'Zoro';\n\t}\n\n\tgetIcon() {\n\t\treturn 'book-open';\n\t}\n\n\tasync onOpen() {\n\t\tthis.renderLayout();\n\t\tthis.resetToBlank();\n\t}\n\n\tasync onClose() {\n\t\tthis.teardownUI();\n\t}\n\n\tsetContext(context) {\n\t\tthis.context = context || null;\n\t\tif (this.context && this.context.mediaType && this.context.searchIds) {\n\t\t\tthis.renderContextualUI(this.context);\n\t\t} else {\n\t\t\tthis.resetToBlank();\n\t\t}\n\t}\n\n\trenderLayout() {\n\t\tconst root = this.containerEl;\n\t\troot.empty();\n\t\troot.addClass('zoro-side-panel');\n\n\t\t// Toolbar (top) - with flexible button container\n\t\tthis.toolbarEl = root.createDiv({ cls: 'zoro-panel-toolbar' });\n\t\tthis.buttonContainerEl = this.toolbarEl.createDiv({ cls: 'zoro-panel-button-container' });\n\t\t\n\t\tthis.createBtn = this.buttonContainerEl.createEl('button', { \n\t\t\ttext: '\uD83D\uDCDD', \n\t\t\tcls: 'zoro-panel-btn' \n\t\t});\n\t\tthis.connectBtn = this.buttonContainerEl.createEl('button', { \n\t\t\ttext: '\u26D3\uFE0F', \n\t\t\tcls: 'zoro-panel-btn' \n\t\t});\n\n\t\t// New inline Details and Edit buttons\n\t\tthis.detailsBtn = this.buttonContainerEl.createEl('button', {\n\t\t\ttext: '\u2139\uFE0F',\n\t\t\tcls: 'zoro-panel-btn'\n\t\t});\n\t\tthis.editInlineBtn = this.buttonContainerEl.createEl('button', {\n\t\t\ttext: '\u270F\uFE0F',\n\t\t\tcls: 'zoro-panel-btn'\n\t\t});\n\n\t\t// Search interface container (fixed position below toolbar)\n\t\tthis.searchContainerEl = root.createDiv({ cls: 'zoro-panel-search-container' });\n\n\t\t// Inline embed container for details/edit UIs (rendered BELOW the buttons, inside the search container area)\n\t\tthis.embedEl = this.searchContainerEl.createDiv({ cls: 'zoro-panel-embed is-hidden' });\n\n\t\t// Content (center - for notes list)\n\t\tthis.contentEl = root.createDiv({ cls: 'zoro-panel-content' });\n\t}\n\n\tshowToolbar(show) {\n\t\tif (!this.toolbarEl) return;\n\t\tif (show) this.toolbarEl.removeClass('is-hidden');\n\t\telse this.toolbarEl.addClass('is-hidden');\n\t}\n\n\tshowSearchContainer(show) {\n\t\tif (!this.searchContainerEl) return;\n\t\tif (show) this.searchContainerEl.removeClass('is-hidden');\n\t\telse this.searchContainerEl.addClass('is-hidden');\n\t}\n\n\tshowContentContainer(show) {\n\t\tif (!this.contentEl) return;\n\t\tif (show) this.contentEl.removeClass('is-hidden');\n\t\telse this.contentEl.addClass('is-hidden');\n\t}\n\n\tshowEmbedContainer(show) {\n\t\tif (!this.embedEl) return;\n\t\tif (show) {\n\t\t\tthis.embedEl.removeClass('is-hidden');\n\t\t\t// Ensure search container is visible when showing embeds (to render directly below toolbar)\n\t\t\tthis.showSearchContainer(true);\n\t\t} else {\n\t\t\tthis.embedEl.addClass('is-hidden');\n\t\t}\n\t}\n\n\tclearEmbed() {\n\t\tif (this.embedEl) this.embedEl.empty();\n\t\tthis.currentMode = null;\n\t\tthis.showEmbedContainer(false);\n\t\tthis.showContentContainer(true);\n\t\tthis.showSearchContainer(false);\n\t}\n\n\tteardownUI() {\n\t\ttry {\n\t\t\tif (typeof this.currentCleanup === 'function') {\n\t\t\t\tthis.currentCleanup();\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.currentCleanup = null;\n\t\t\tif (this.contentEl) this.contentEl.empty();\n\t\t\t// Do not empty searchContainerEl to preserve the persistent embed container\n\t\t\tif (this.embedEl) this.embedEl.empty();\n\t\t}\n\t}\n\n\tresetToBlank() {\n\t\tthis.teardownUI();\n\t\tthis.showToolbar(false);\n\t\tthis.showSearchContainer(false);\n\t\tthis.showEmbedContainer(false);\n\t\tthis.showContentContainer(true);\n\t\tconst c = this.contentEl.createDiv({ cls: 'zoro-panel-blank' });\n\t\tc.createEl('div', { text: 'Open this panel from a media card to use actions.' });\n\t}\n\n\trenderContextualUI(ctx) {\n\t\tthis.teardownUI();\n\t\tthis.showToolbar(true);\n\t\tthis.showSearchContainer(false); // Initially hidden\n\t\tthis.showEmbedContainer(false);\n\t\tthis.showContentContainer(true);\n\n\t\t// Hook up actions\n\t\tthis.createBtn.onclick = async () => {\n\t\t\tawait this.plugin.connectedNotes.createNewConnectedNote(ctx.searchIds, ctx.mediaType);\n\t\t\tnew Notice('Created connected note');\n\t\t\tawait this.reloadNotesList(ctx);\n\t\t};\n\t\t\n\t\t// Build list area in content\n\t\tconst listWrap = this.contentEl.createDiv({ cls: 'zoro-note-panel-content' });\n\t\tconst emptyState = listWrap.createDiv({ cls: 'zoro-note-empty-state' });\n\t\temptyState.createEl('div', { text: 'Loading\u2026', cls: 'zoro-note-empty-message' });\n\t\t\n\t\t// Build connect interface in the fixed search container\n\t\tconst connectInterface = this.plugin.connectedNotes.renderConnectExistingInterface(this.searchContainerEl, ctx.searchIds, ctx.mediaType);\n\t\tconnectInterface.classList.add('zoro-note-hidden');\n\n\t\tthis.connectBtn.onclick = () => {\n\t\t\tconst isCurrentlyHidden = connectInterface.classList.contains('zoro-note-hidden');\n\t\t\tconnectInterface.classList.toggle('zoro-note-hidden');\n\t\t\t\n\t\t\t// Show/hide the search container based on interface visibility\n\t\t\tthis.showSearchContainer(!isCurrentlyHidden);\n\t\t\t\n\t\t\tif (!connectInterface.classList.contains('zoro-note-hidden')) {\n\t\t\t\tconst inp = connectInterface.querySelector('.zoro-note-search-input');\n\t\t\t\tsetTimeout(() => inp?.focus(), 100);\n\t\t\t}\n\t\t};\n\n\t\t// Wire inline Details and Edit buttons if media/entry context is available\n\t\tthis.detailsBtn.onclick = async () => {\n\t\t\ttry {\n\t\t\t\tif (this.currentMode === 'details') {\n\t\t\t\t\tthis.clearEmbed();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst media = ctx?.media || ctx?.entry?.media || null;\n\t\t\t\tif (!media) {\n\t\t\t\t\tnew Notice('No media selected');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tawait this.showDetailsForMedia(media, ctx?.entry || null);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('[Zoro][SidePanel] Failed to show details inline', e);\n\t\t\t}\n\t\t};\n\n\t\tthis.editInlineBtn.onclick = async () => {\n\t\t\ttry {\n\t\t\t\tif (this.currentMode === 'edit') {\n\t\t\t\t\tthis.clearEmbed();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet entry = ctx?.entry || null;\n\t\t\t\tlet source = (ctx?.entry?._zoroMeta?.source || ctx?.source || this.plugin?.settings?.defaultApiSource || 'anilist');\n\t\t\t\tif (!entry) {\n\t\t\t\t\tconst media = ctx?.media || null;\n\t\t\t\t\tif (!media) {\n\t\t\t\t\t\tnew Notice('No entry to edit');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// Create a minimal entry object compatible with edit form\n\t\t\t\t\tentry = {\n\t\t\t\t\t\tmedia,\n\t\t\t\t\t\tstatus: 'PLANNING',\n\t\t\t\t\t\tprogress: 0,\n\t\t\t\t\t\tscore: null,\n\t\t\t\t\t\tid: null,\n\t\t\t\t\t\t_zoroMeta: { source: source, mediaType: (media.type || media.format || ctx?.mediaType || 'ANIME') }\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tawait this.showEditForEntry(entry, { source });\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('[Zoro][SidePanel] Failed to show edit inline', e);\n\t\t\t}\n\t\t};\n\n\t\tlet disposed = false;\n\t\tconst load = async () => {\n\t\t\tconst found = await this.plugin.connectedNotes.searchConnectedNotes(ctx.searchIds, ctx.mediaType);\n\t\t\tif (disposed) return;\n\t\t\tlistWrap.empty();\n\t\t\tif (!found.length) {\n\t\t\t\tconst es = listWrap.createDiv({ cls: 'zoro-note-empty-state' });\n\t\t\t\tes.createEl('div', { text: 'No notes linked yet', cls: 'zoro-note-empty-message' });\n\t\t\t} else {\n\t\t\t\tconst frag = document.createDocumentFragment();\n\t\t\t\tfound.forEach(note => {\n\t\t\t\t\tconst item = document.createElement('div');\n\t\t\t\t\titem.className = 'zoro-note-item';\n\t\t\t\t\titem.createEl('div', { text: note.title, cls: 'zoro-note-title' });\n\t\t\t\t\titem.onclick = () => {\n\t\t\t\t\t\tconst mainLeaf = this.app.workspace.getLeaf('tab');\n\t\t\t\t\t\tmainLeaf.openFile(note.file);\n\t\t\t\t\t\tthis.app.workspace.setActiveLeaf(mainLeaf);\n\t\t\t\t\t};\n\t\t\t\t\tfrag.appendChild(item);\n\t\t\t\t});\n\t\t\t\tlistWrap.appendChild(frag);\n\t\t\t}\n\t\t};\n\t\tload();\n\n\t\tthis.currentCleanup = () => {\n\t\t\tdisposed = true;\n\t\t\tconnectInterface?.remove?.();\n\t\t\tlistWrap?.remove?.();\n\t\t};\n\t}\n\n\tasync showDetailsForMedia(media, entry = null) {\n\t\tif (!this.embedEl) return;\n\t\tthis.embedEl.empty();\n\t\tthis.showContentContainer(false);\n\t\tthis.showEmbedContainer(true);\n\t\ttry {\n\t\t\tawait this.plugin.moreDetailsPanel.showPanel(media, entry, null, this.embedEl);\n\t\t\tthis.currentMode = 'details';\n\t\t} catch (e) {\n\t\t\tconsole.error('[Zoro][SidePanel] Inline details failed', e);\n\t\t\tnew Notice('Failed to load details');\n\t\t}\n\t}\n\n\tasync showEditForEntry(entry, config = {}) {\n\t\tif (!this.embedEl) return;\n\t\tthis.embedEl.empty();\n\t\tthis.showContentContainer(false);\n\t\tthis.showEmbedContainer(true);\n\t\ttry {\n\t\t\tconst source = config?.source || entry?._zoroMeta?.source || this.plugin?.settings?.defaultApiSource || 'anilist';\n\t\t\tawait this.plugin.edit.createInlineEdit(\n\t\t\t\tentry,\n\t\t\t\tasync (updates) => {\n\t\t\t\t\t// Route update to appropriate API\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (source === 'mal') {\n\t\t\t\t\t\t\tawait this.plugin.malApi.updateMediaListEntry(entry.media.id, updates);\n\t\t\t\t\t\t} else if (source === 'simkl') {\n\t\t\t\t\t\t\tawait this.plugin.simklApi.updateMediaListEntry(entry.media.id, updates, entry?._zoroMeta?.mediaType);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tawait this.plugin.api.updateMediaListEntry(entry.media.id, updates);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tconsole.error('[Zoro][SidePanel] Update failed', err);\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t() => {},\n\t\t\t\tsource,\n\t\t\t\tthis.embedEl\n\t\t\t);\n\t\t\tthis.currentMode = 'edit';\n\t\t} catch (e) {\n\t\t\tconsole.error('[Zoro][SidePanel] Inline edit failed', e);\n\t\t\tnew Notice('Failed to open edit form');\n\t\t}\n\t}\n\n\tasync reloadNotesList(ctx) {\n\t\tif (!ctx) return;\n\t\tthis.setContext(ctx); // simple re-render\n\t}\n}\n\nexport { SidePanel, ZORO_VIEW_TYPE };", "import { PluginSettingTab, Setting, Notice, setIcon } from 'obsidian';\nimport { AuthModal } from '../auth/AuthModal.js';\nimport { GRID_COLUMN_OPTIONS, GRID_COLUMN_LABELS } from '../core/constants.js';\n\nclass ZoroSettingTab extends PluginSettingTab {\n  constructor(app, plugin) {\n    super(app, plugin);\n    this.plugin = plugin;\n  }\n\n  display() {\n    const { containerEl } = this;\n    containerEl.empty()\n\n    const section = (title, startOpen = false) => {\n      const head = containerEl.createEl('h2', { text: title });\n      head.style.cursor = 'pointer';\n      head.style.userSelect = 'none';\n      head.style.margin = '1.2em 0 0.4em 0';\n      const body = containerEl.createDiv();\n      body.style.marginLeft = '1em';\n      body.style.display = startOpen ? 'block' : 'none';\n      head.addEventListener('click', () => {\n        body.style.display = body.style.display === 'none' ? 'block' : 'none';\n      });\n      return body;\n    };\n\n    const Account = section('\uD83D\uDC64 Account');\n    const Setup = section('\uD83E\uDDED Setup');\n    const Note = section('\uD83D\uDDD2\uFE0F Note');\n    const Display = section('\uD83D\uDCFA Display');\n    const More = section('\u2728  More');\n    const Shortcut = section('\uD83D\uDEAA Shortcut');\n    const Data = section('\uD83D\uDCBE Data');\n    const Cache = section('\uD83D\uDD01 Cache');\n    const Exp = section('\u26A0\uFE0F Beta');\n    const About = section('\u2139\uFE0F About');\n\n    new Setting(Account)\n      .setName('\uD83C\uDD94 Public profile')\n      .setDesc(\"View your AniList profile and stats \u2014 no login needed.\")\n      .addText(text => text\n        .setPlaceholder('AniList username')\n        .setValue(this.plugin.settings.defaultUsername)\n        .onChange(async (value) => {\n          this.plugin.settings.defaultUsername = value.trim();\n          await this.plugin.saveSettings();\n        }));\n\n    const authSetting = new Setting(Account)\n  .setName('\u2733\uFE0F AniList')\n  .setDesc('Connect your AniList account to manage your anime and manga lists. (Recommended)');\n\nconst authDescEl = authSetting.descEl;\nauthDescEl.createEl('br');\nconst authLinkEl = authDescEl.createEl('a', {\n  text: 'Guide \uD83D\uDCD6',\n  href: 'https://github.com/zara-kasi/zoro/blob/main/Docs/anilist-auth-setup.md'\n});\nauthLinkEl.setAttr('target', '_blank');\nauthLinkEl.setAttr('rel', 'noopener noreferrer');\nauthLinkEl.style.textDecoration = 'none';\n\nauthSetting.addButton(button => {\n  this.authButton = button;\n  this.updateAuthButton();\n  button.onClick(async () => {\n    await this.handleAuthButtonClick();\n  });\n});\n   \n   \n   const simklAuthSetting = new Setting(Account)\n  .setName('\uD83C\uDFAC SIMKL')\n  .setDesc('Connect your SIMKL account to manage your anime, movies, and TV shows. (Recommended)');\n\n// Add the documentation link after the description\nconst simklDescEl = simklAuthSetting.descEl;\nsimklDescEl.createEl('br');\nconst simklLinkEl = simklDescEl.createEl('a', {\n  text: 'Guide \uD83D\uDCD6',\n  href: 'https://github.com/zara-kasi/zoro/blob/main/Docs/simkl-auth-setup.md'\n});\nsimklLinkEl.setAttr('target', '_blank');\nsimklLinkEl.setAttr('rel', 'noopener noreferrer');\nsimklLinkEl.style.textDecoration = 'none';\n\nsimklAuthSetting.addButton(btn => {\n  this.simklAuthButton = btn;\n  this.updateSimklAuthButton();\n  btn.onClick(async () => {\n    await this.handleSimklAuthButtonClick();\n  });\n});\n    \n    const malAuthSetting = new Setting(Account)\n  .setName('\uD83D\uDDFE MyAnimeList')\n  .setDesc('Connect your MAL account to manage your anime and manga lists');\n\n// Add the documentation link after the description\nconst descEl = malAuthSetting.descEl;\ndescEl.createEl('br');\nconst linkEl = descEl.createEl('a', {\n  text: 'Guide \uD83D\uDCD6',\n  href: 'https://github.com/zara-kasi/zoro/blob/main/Docs/mal-auth-setup.md'\n});\nlinkEl.setAttr('target', '_blank');\nlinkEl.setAttr('rel', 'noopener noreferrer');\nlinkEl.style.textDecoration = 'none';\n\nmalAuthSetting.addButton(btn => {  \n  this.malAuthButton = btn;  \n  this.updateMALAuthButton();  \n  btn.onClick(async () => {  \n    await this.handleMALAuthButtonClick();  \n  });  \n}); \n    \n    \n    new Setting(Setup)\n      .setName('\u26A1 Sample Folder')\n      .setDesc('Builds a complete Zoro folder structure with notes, no manual setup needed. (Recommended)')\n      .addButton(button =>\n        button\n          .setButtonText('Create')\n          .onClick(async () => {\n            await this.plugin.sample.createSampleFolders();\n          })\n      );\n      \n      new Setting(Setup)\n      .setName('\uD83D\uDD79\uFE0F Default Source')\n      .setDesc(\n  \"Choose which service to use by default when none is specified.\\n\" +\n  \"Anime \u2014 AniList, MAL, or SIMKL\\n\" +\n  \"Manga \u2014 AniList or MAL\\n\" +\n  \"Movies & TV \u2014 Always SIMKL\\n\" +\n  \"Recommended: AniList\"\n)\n      .addDropdown(dropdown => dropdown\n        .addOption('anilist', 'AniList')\n        .addOption('mal', 'MyAnimeList')\n        .addOption('simkl', 'SIMKL')\n        .setValue(this.plugin.settings.defaultApiSource)\n        .onChange(async (value) => {\n          this.plugin.settings.defaultApiSource = value;\n          this.plugin.settings.defaultApiUserOverride = true;\n          await this.plugin.saveSettings();\n        }));\n        \n        new Setting(Note)\n      .setName('\uD83D\uDDC2\uFE0F Note path')\n      .setDesc('Folder path where new connected notes will be created')\n      .addText(text => text\n        .setPlaceholder('folder/subfolder')\n        .setValue(this.plugin.settings.notePath || '')\n        .onChange(async (value) => {\n          let cleanPath = value.trim();\n          if (cleanPath.startsWith('/')) {\n            cleanPath = cleanPath.substring(1);\n          }\n          if (cleanPath.endsWith('/')) {\n            cleanPath = cleanPath.substring(0, cleanPath.length - 1);\n          }\n          \n          this.plugin.settings.notePath = cleanPath;\n          await this.plugin.saveSettings();\n        }));\n        \n        new Setting(Note)\n  .setName('\uD83C\uDFB4 Media block')\n.setDesc('Auto-insert a code block to show cover, rating, and details in new notes')\n  .addToggle(toggle => toggle\n    .setValue(this.plugin.settings.insertCodeBlockOnNote)\n    .onChange(async (value) => {\n      this.plugin.settings.insertCodeBlockOnNote = value;\n      await this.plugin.saveSettings();\n    }));\n        \n\n    new Setting(Display)\n      .setName('\uD83E\uDDCA Layout')\n      .setDesc('Choose the default layout for media lists')\n      .addDropdown(dropdown => dropdown\n        .addOption('card', 'Card Layout')\n        .addOption('table', 'Table Layout')\n        .setValue(this.plugin.settings.defaultLayout)\n        .onChange(async (value) => {\n          this.plugin.settings.defaultLayout = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(Display)\n      .setName('\uD83D\uDD32 Grid Columns')\n      .setDesc('Choose grid layout: Default uses responsive columns, or force a specific number of columns')\n      .addDropdown(dropdown => {\n        // Add all options to the dropdown\n        Object.entries(GRID_COLUMN_LABELS).forEach(([value, label]) => {\n          dropdown.addOption(value, label);\n        });\n        \n        // Set current value, with fallback for legacy numeric values\n        const currentValue = this.plugin.settings.gridColumns;\n        if (typeof currentValue === 'number') {\n          // Migrate from old numeric system to new string system\n          dropdown.setValue(String(currentValue));\n        } else {\n          dropdown.setValue(currentValue || GRID_COLUMN_OPTIONS.DEFAULT);\n        }\n        \n        dropdown.onChange(async (value) => {\n          this.plugin.settings.gridColumns = value;\n          await this.plugin.saveSettings();\n          this.updateGridColumns(value);\n        });\n      });\n        \n        \n        new Setting(More)\n      .setName('\u23F3 Loading Icon')\n      .setDesc('Show loading animation during API requests')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.showLoadingIcon)\n        .onChange(async (value) => {\n          this.plugin.settings.showLoadingIcon = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(More)\n      .setName('\uD83D\uDD17 Plain Titles')\n      .setDesc('Show titles as plain text instead of clickable links.')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.hideUrlsInTitles)\n        .onChange(async (value) => {\n          this.plugin.settings.hideUrlsInTitles = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(More)\n      .setName('\uD83C\uDF06 Cover')\n      .setDesc('Display cover images for anime/manga')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.showCoverImages)\n        .onChange(async (value) => {\n          this.plugin.settings.showCoverImages = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(More)\n      .setName('\u2B50 Ratings')\n      .setDesc('Display user ratings/scores')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.showRatings)\n        .onChange(async (value) => {\n          this.plugin.settings.showRatings = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(More)\n      .setName('\uD83D\uDCC8 Progress')\n      .setDesc('Display progress information')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.showProgress)\n        .onChange(async (value) => {\n          this.plugin.settings.showProgress = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(More)\n      .setName('\uD83C\uDFAD Genres')\n      .setDesc('Display genre tags')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.showGenres)\n        .onChange(async (value) => {\n          this.plugin.settings.showGenres = value;\n          await this.plugin.saveSettings();\n        }));\n        \n    new Setting(More)\n      .setName('\uD83E\uDDEE Score Scale')\n      .setDesc('Ensures all ratings use the 0\u201310 point scale.')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.forceScoreFormat)\n        .onChange(async (value) => {\n          this.plugin.settings.forceScoreFormat = value;\n          await this.plugin.saveSettings();\n          if (value && this.plugin.auth.isLoggedIn) {\n            await this.plugin.auth.forceScoreFormat();\n          }\n        }));\n        \n        new Setting(Shortcut)\n  .setName(' Open on site')\n  .setDesc('Adds a customizable external-link button to the More Details panel that opens a site-specific search for the current title.')\n  .addButton(button => button\n    .setButtonText('Add Anime URL')\n    .setClass('mod-cta')\n    .onClick(async () => {\n      await this.plugin.moreDetailsPanel.customExternalURL.addUrl('ANIME');\n      this.refreshCustomUrlSettings();\n    }));\n\n// Create container for anime URLs\nconst animeUrlContainer = Shortcut.createDiv('custom-url-container');\nanimeUrlContainer.setAttribute('data-media-type', 'ANIME');\nthis.renderCustomUrls(animeUrlContainer, 'ANIME');\n\nnew Setting(Shortcut)\n  .addButton(button => button\n    .setButtonText('Add Manga URL')\n    .setClass('mod-cta')\n    .onClick(async () => {\n      await this.plugin.moreDetailsPanel.customExternalURL.addUrl('MANGA');\n      this.refreshCustomUrlSettings();\n    }));\n\n// Create container for manga URLs\nconst mangaUrlContainer = Shortcut.createDiv('custom-url-container');\nmangaUrlContainer.setAttribute('data-media-type', 'MANGA');\nthis.renderCustomUrls(mangaUrlContainer, 'MANGA');\n\nnew Setting(Shortcut)\n  .addButton(button => button\n    .setButtonText('Add Movie/TV URL')\n    .setClass('mod-cta')\n    .onClick(async () => {\n      await this.plugin.moreDetailsPanel.customExternalURL.addUrl('MOVIE_TV');\n      this.refreshCustomUrlSettings();\n    }));\n\n// Create container for movie/TV URLs\nconst movieTvUrlContainer = Shortcut.createDiv('custom-url-container');\nmovieTvUrlContainer.setAttribute('data-media-type', 'MOVIE_TV');\nthis.renderCustomUrls(movieTvUrlContainer, 'MOVIE_TV');\n\nnew Setting(Shortcut)\n  .setName('\uD83D\uDD27 Auto-Format Search URLs')\n  .setDesc('Automatically format URLs to search format. When disabled, URLs will be used exactly as entered.')\n  .addToggle(toggle => toggle\n    .setValue(this.plugin.settings.autoFormatSearchUrls)\n    .onChange(async (value) => {\n      this.plugin.settings.autoFormatSearchUrls = value;\n      await this.plugin.saveSettings();\n    }));\n    \n    const exportSetting = new Setting(Data)\n  .setName('\uD83D\uDCE5 Export your data')\n  .setDesc(\"Everything you've watched, rated, and maybe ghosted \u2014 neatly exported into a CSV & standard export format from AniList, MAL and Simkl.\")\n  .addButton(btn => btn\n    .setButtonText('AniList')\n    .setClass('mod-cta')\n    .onClick(async () => {\n      try {\n        await this.plugin.export.exportUnifiedListsToCSV();\n      } catch (err) {\n        new Notice(`\u274C Export failed: ${err.message}`, 6000);\n      }\n    })\n  );\n\nconst exportDescEl = exportSetting.descEl;\nexportDescEl.createEl('br');\nconst exportLinkEl = exportDescEl.createEl('a', {\n  text: 'Guide \uD83D\uDCD6',\n  href: 'https://github.com/zara-kasi/zoro/blob/main/Docs/export-doc.md'\n});\nexportLinkEl.setAttr('target', '_blank');\nexportLinkEl.setAttr('rel', 'noopener noreferrer');\nexportLinkEl.style.textDecoration = 'none';\n  \nnew Setting(Data)\n  .addButton(btn => btn\n    .setButtonText('MAL')\n    .setClass('mod-cta')\n    .onClick(async () => {\n      try {\n        await this.plugin.export.exportMALListsToCSV();\n      } catch (err) {\n        new Notice(`\u274C MAL export failed: ${err.message}`, 6000);\n      }\n    })\n  );\n\nnew Setting(Data)\n  .addButton(btn => btn\n    .setButtonText('SIMKL')\n    .setClass('mod-cta')\n    .onClick(async () => {\n      if (!this.plugin.simklAuth.isLoggedIn) {\n        new Notice('\u274C Please authenticate with SIMKL first.', 4000);\n        return;\n      }\n      \n      btn.setDisabled(true);\n      btn.setButtonText('Exporting...');\n      \n      try {\n        await this.plugin.export.exportSimklListsToCSV();\n      } catch (err) {\n        new Notice(`\u274C SIMKL export failed: ${err.message}`, 6000);\n      } finally {\n        btn.setDisabled(false);\n        btn.setButtonText('SIMKL');\n      }\n    })\n  );\n      \n      new Setting(Cache)\n      .setName('\uD83D\uDCCA Cache Stats')\n      .setDesc('Show live cache usage and hit-rate in a pop-up.')\n      .addButton(btn => btn\n        .setButtonText('Show Stats')\n        .onClick(() => {\n          const s = this.plugin.cache.getStats();\n          new Notice(\n            `Cache: ${s.hitRate} | ${s.cacheSize} entries | Hits ${s.hits} | Misses ${s.misses}`,\n            8000\n          );\n          console.table(s);\n        })\n      );\n\n    new Setting(Cache)\n  .setName('\uD83E\uDDF9 Clear Cache')\n  .setDesc('Delete all cached data (user, media, search results).')\n  .addButton(btn => btn\n    .setButtonText('Clear All Cache')\n    .setWarning()\n    .onClick(async () => {\n      const cleared = await this.plugin.cache.clearAll();\n      new Notice(`\u2705 Cache cleared (${cleared} entries)`, 3000);\n    })\n  );\n      \n        \n         \n    new Setting(Exp)\n    .setName('TMDb API Key')\n    .setDesc(\n      createFragment((frag) => {\n        frag.appendText('Your The Movie Database (TMDb) API key for trending movies & TV shows. ');\n        const link = frag.createEl('a', {\n          text: 'Get one free at TMDb',\n          href: 'https://www.themoviedb.org/settings/api'\n        });\n        link.setAttr('target', '_blank');\n        frag.appendText('.');\n      })\n    )\n    .addText(text => text\n      .setPlaceholder('Enter your TMDb API key...')\n      .setValue(this.plugin.settings.tmdbApiKey)\n      .onChange(async (value) => {\n        this.plugin.settings.tmdbApiKey = value.trim();\n        await this.plugin.saveSettings();\n      })\n    );\n   \n   /**\n    * new Setting(Theme)\n      .setName('\uD83C\uDFA8 Apply')\n      .setDesc('Choose from available themes')\n      .addDropdown(async dropdown => {\n        dropdown.addOption('', 'Default');\n        const localThemes = await this.plugin.theme.getAvailableThemes();\n        localThemes.forEach(t => dropdown.addOption(t, t));\n        dropdown.setValue(this.plugin.settings.theme || '');\n        dropdown.onChange(async name => {\n          this.plugin.settings.theme = name;\n          await this.plugin.saveSettings();\n          await this.plugin.theme.applyTheme(name);\n        });\n      });\n\n    new Setting(Theme)\n  .setName('\uD83D\uDCE5 Download')\n  .setDesc('Download themes from GitHub repository')\n  .addDropdown(dropdown => {\n    dropdown.addOption('', 'Select');\n    \n    this.plugin.theme.fetchRemoteThemes().then(remoteThemes => {\n      remoteThemes.forEach(t => dropdown.addOption(t, t));\n    });\n    \n    dropdown.onChange(async name => {\n      if (!name) return;\n      \n      const success = await this.plugin.theme.downloadTheme(name);\n      if (success) {\n        // Auto-apply the downloaded theme\n        this.plugin.settings.theme = name;\n        await this.plugin.saveSettings();\n        await this.plugin.theme.applyTheme(name);\n        \n        // Refresh the Apply dropdown to show the new theme\n        this.display();\n      }\n      dropdown.setValue('');\n    });\n  });\n\n    new Setting(Theme)\n      .setName('\uD83D\uDDD1 Delete')\n      .setDesc('Remove downloaded themes from local storage')\n      .addDropdown(async dropdown => {\n        dropdown.addOption('', 'Select');\n        const localThemes = await this.plugin.theme.getAvailableThemes();\n        localThemes.forEach(t => dropdown.addOption(t, t));\n        \n        dropdown.onChange(async name => {\n          if (!name) return;\n          \n          const success = await this.plugin.theme.deleteTheme(name);\n          if (success) {\n            // If deleted theme was currently active, remove it\n            if (this.plugin.settings.theme === name) {\n              this.plugin.settings.theme = '';\n              await this.plugin.saveSettings();\n              await this.plugin.theme.applyTheme('');\n            }\n          }\n          dropdown.setValue('');\n        });\n      });\n    */\n   \n    new Setting(About)\n      .setName('Author')\n      .setDesc(this.plugin.manifest.author);\n    new Setting(About)\n      .setName('Version')\n      .setDesc(this.plugin.manifest.version);\n    new Setting(About)\n      .setName('Privacy')\n      .setDesc('Zoro only talks to the APIs to fetch & update your media data. Nothing else is sent or shared\u2014your data stays local.');\n\n    new Setting(About)\n      .setName('GitHub')\n      .setDesc('Get more info or report an issue.')\n      .addButton(button =>\n        button\n          .setClass('mod-cta')\n          .setButtonText('Open GitHub')\n          .onClick(() => {\n            window.open('https://github.com/zara-kasi/zoro', '_blank');\n          })\n      );\n  }\n\n  updateAuthButton() {\n    if (!this.authButton) return;\n    const { settings } = this.plugin;\n    if (!settings.clientId) {\n      this.authButton.setButtonText('Enter Client ID');\n      this.authButton.removeCta();\n    } else if (!settings.clientSecret) {\n      this.authButton.setButtonText('Enter Client Secret');\n      this.authButton.removeCta();\n    } else if (!settings.accessToken) {\n      this.authButton.setButtonText('Authenticate Now');\n      this.authButton.setCta();\n    } else {\n      this.authButton.setButtonText('Sign Out');\n      this.authButton.setWarning().removeCta();\n    }\n  }\n\n  async handleAuthButtonClick() {\n    const { settings } = this.plugin;\n    if (!settings.clientId) {\n      const modal = AuthModal.clientId(this.app, async (clientId) => {\n        if (clientId?.trim()) {\n          settings.clientId = clientId.trim();\n          await this.plugin.saveSettings();\n          this.updateAuthButton();\n        }\n      });\n      modal.open();\n    } else if (!settings.clientSecret) {\n      const modal = AuthModal.clientSecret(this.app, async (clientSecret) => {\n        if (clientSecret?.trim()) {\n          settings.clientSecret = clientSecret.trim();\n          await this.plugin.saveSettings();\n          this.updateAuthButton();\n        }\n      });\n      modal.open();\n    } else if (!settings.accessToken) {\n      await this.plugin.auth.loginWithFlow();\n      this.updateAuthButton();\n    } else {\n      if (confirm('\u26A0\uFE0F Are you sure you want to sign out?')) {\n        await this.plugin.auth.logout();\n        this.updateAuthButton();\n      }\n    }\n  }\n\n  updateMALAuthButton() {\n    if (!this.malAuthButton) return;\n    const { settings } = this.plugin;\n    if (!settings.malClientId) {\n      this.malAuthButton.setButtonText('Enter Client ID');\n      this.malAuthButton.removeCta();\n    } else if (!settings.malClientSecret) {\n      this.malAuthButton.setButtonText('Enter Client Secret');\n      this.malAuthButton.removeCta();\n    } else if (!settings.malAccessToken) {\n      this.malAuthButton.setButtonText('Authenticate Now');\n      this.malAuthButton.setCta();\n    } else {\n      this.malAuthButton.setButtonText('Sign Out');\n      this.malAuthButton.setWarning().removeCta();\n    }\n  }\n\n  async handleMALAuthButtonClick() {\n    const { settings } = this.plugin;\n    if (!settings.malClientId) {\n      const modal = AuthModal.clientId(this.app, async (clientId) => {\n        if (clientId?.trim()) {\n          settings.malClientId = clientId.trim();\n          await this.plugin.saveSettings();\n          this.updateMALAuthButton();\n        }\n      });\n      modal.open();\n    } else if (!settings.malClientSecret) {\n      const modal = AuthModal.clientSecret(this.app, async (clientSecret) => {\n        if (clientSecret?.trim()) {\n          settings.malClientSecret = clientSecret.trim();\n          await this.plugin.saveSettings();\n          this.updateMALAuthButton();\n        }\n      });\n      modal.open();\n    } else if (!settings.malAccessToken) {\n      await this.plugin.malAuth.loginWithFlow();\n      this.updateMALAuthButton();\n    } else {\n      if (confirm('\u26A0\uFE0F Are you sure you want to sign out?')) {\n        await this.plugin.malAuth.logout();\n        this.updateMALAuthButton();\n      }\n    }\n  }\n  \n  updateSimklAuthButton() {\n    if (!this.simklAuthButton) return;\n    const { settings } = this.plugin;\n    if (!settings.simklClientId) {\n      this.simklAuthButton.setButtonText('Enter Client ID');\n      this.simklAuthButton.removeCta();\n    } else if (!settings.simklClientSecret) {\n      this.simklAuthButton.setButtonText('Enter Client Secret');\n      this.simklAuthButton.removeCta();\n    } else if (!settings.simklAccessToken) {\n      this.simklAuthButton.setButtonText('Authenticate Now');\n      this.simklAuthButton.setCta();\n    } else {\n      this.simklAuthButton.setButtonText('Sign Out');\n      this.simklAuthButton.setWarning().removeCta();\n    }\n  }\n\n  async handleSimklAuthButtonClick() {\n    const { settings } = this.plugin;\n    if (!settings.simklClientId) {\n      const modal = AuthModal.clientId(this.app, async (clientId) => {\n        if (clientId?.trim()) {\n          settings.simklClientId = clientId.trim();\n          await this.plugin.saveSettings();\n          this.updateSimklAuthButton();\n        }\n      });\n      modal.open();\n    } else if (!settings.simklClientSecret) {\n      const modal = AuthModal.clientSecret(this.app, async (clientSecret) => {\n        if (clientSecret?.trim()) {\n          settings.simklClientSecret = clientSecret.trim();\n          await this.plugin.saveSettings();\n          this.updateSimklAuthButton();\n        }\n      });\n      modal.open();\n    } else if (!settings.simklAccessToken) {\n      await this.plugin.simklAuth.loginWithFlow();\n      this.updateSimklAuthButton();\n    } else {\n      if (confirm('\u26A0\uFE0F Are you sure you want to sign out?')) {\n        await this.plugin.simklAuth.logout();\n        this.updateSimklAuthButton();\n      }\n    }\n  }\n  \n  updateGridColumns(value) {\n    const gridElements = document.querySelectorAll('.zoro-cards-grid');\n    gridElements.forEach(grid => {\n      try {\n        if (value === GRID_COLUMN_OPTIONS.DEFAULT) {\n          // For \"Default\", remove the inline styles to let CSS handle responsive behavior\n          grid.style.removeProperty('--zoro-grid-columns');\n          grid.style.removeProperty('--grid-cols');\n          grid.style.removeProperty('grid-template-columns');\n        } else {\n          // For fixed column values, set the CSS variables\n          grid.style.setProperty('--zoro-grid-columns', String(value));\n          grid.style.setProperty('--grid-cols', String(value));\n          // Also set grid-template-columns directly to ensure it takes precedence\n          grid.style.setProperty('grid-template-columns', `repeat(${value}, minmax(0, 1fr))`, 'important');\n        }\n      } catch {}\n    });\n  }\n\n  renderCustomUrls(container, mediaType) {\n    container.empty();\n    const urls = this.plugin.settings.customSearchUrls?.[mediaType] || [];\n    urls.forEach((url, index) => {\n      this.createUrlSetting(container, mediaType, url, index);\n    });\n  }\n\n  createUrlSetting(container, mediaType, url, index) {\n    const urlDiv = container.createDiv('url-setting-item');\n    const inputContainer = urlDiv.createDiv('url-input-container');\n    let displayValue = url;\n    let placeholder = 'https://example.com/search?q=';\n    if (url.startsWith('{') && url.endsWith('}')) {\n      try {\n        const templateData = JSON.parse(url);\n        if (templateData.originalUrl) {\n          displayValue = templateData.originalUrl;\n          placeholder = 'Learned template from example';\n        }\n      } catch {}\n    }\n    const input = inputContainer.createEl('input', {\n      type: 'text',\n      placeholder: placeholder,\n      value: displayValue,\n      cls: 'custom-url-input'\n    });\n    const removeBtn = inputContainer.createEl('button', {\n      text: '\u00D7',\n      cls: 'url-remove-button-inside'\n    });\n    input.addEventListener('input', async (e) => {\n      const newValue = e.target.value;\n      await this.plugin.moreDetailsPanel.customExternalURL.updateUrl(mediaType, index, newValue);\n      if (this.plugin.settings.autoFormatSearchUrls) {\n        const formatted = this.plugin.moreDetailsPanel.customExternalURL.formatSearchUrl(newValue);\n        input.title = formatted !== newValue && formatted ? `Auto-formatted: ${formatted}` : '';\n      } else {\n        if (newValue.toLowerCase().includes('zoro')) {\n          const template = this.plugin.moreDetailsPanel.customExternalURL.learnTemplateFromExample(newValue, 'zoro zoro');\n          if (template) {\n            input.title = `Template learned! Pattern: \"${template.spacePattern}\"`;\n          } else {\n            const basicTemplate = this.plugin.moreDetailsPanel.customExternalURL.extractBasicTemplate(newValue);\n            input.title = basicTemplate ? `Basic template extracted! Pattern: \"${basicTemplate.spacePattern}\"` : 'Auto-formatting disabled - using exact URL';\n          }\n        } else {\n          input.title = 'Auto-formatting disabled - using exact URL';\n        }\n      }\n    });\n    removeBtn.addEventListener('click', async () => {\n      await this.plugin.moreDetailsPanel.customExternalURL.removeUrl(mediaType, index);\n      this.refreshCustomUrlSettings();\n    });\n    if (url && url.trim()) {\n      const preview = urlDiv.createDiv('url-preview');\n      const domainName = this.plugin.moreDetailsPanel.customExternalURL.extractDomainName(url);\n      preview.textContent = `Preview: ${domainName}`;\n    }\n  }\n\n  refreshCustomUrlSettings() {\n    const animeContainer = this.containerEl.querySelector('[data-media-type=\"ANIME\"]');\n    if (animeContainer) this.renderCustomUrls(animeContainer, 'ANIME');\n    const mangaContainer = this.containerEl.querySelector('[data-media-type=\"MANGA\"]');\n    if (mangaContainer) this.renderCustomUrls(mangaContainer, 'MANGA');\n    const movieTvContainer = this.containerEl.querySelector('[data-media-type=\"MOVIE_TV\"]');\n    if (movieTvContainer) this.renderCustomUrls(movieTvContainer, 'MOVIE_TV');\n  }\n}\n\nexport { ZoroSettingTab };"],
  "mappings": "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",
  "names": ["import_obsidian", "import_obsidian", "import_obsidian", "import_obsidian", "import_obsidian", "node", "import_obsidian", "import_obsidian", "import_obsidian", "codeMatch", "import_obsidian", "import_obsidian", "import_obsidian", "import_obsidian", "import_obsidian", "import_obsidian", "import_obsidian", "import_obsidian", "import_obsidian", "import_obsidian", "import_obsidian", "import_obsidian", "detailedMedia", "malData", "imdbData", "import_obsidian", "import_obsidian", "import_obsidian", "import_obsidian", "import_obsidian", "import_obsidian", "import_obsidian", "yearData", "import_obsidian", "import_obsidian", "import_obsidian", "import_obsidian", "Cache"]
}
