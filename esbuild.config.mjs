import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// Add process exit handler for clean shutdown
process.on('SIGINT', () => {
	console.log('\n🛑 Build cancelled');
	process.exit(0);
});

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/index.js"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
	// Add these optimizations
	platform: "node",
	mainFields: ["module", "main"],
	metafile: prod, // Generate build stats in production
	legalComments: "none", // Remove comments in production
}).catch((err) => {
	console.error('❌ Build failed:', err);
	process.exit(1);
});

if (prod) {
	await context.rebuild();
	const result = await context.rebuild();
	
	// Show build stats in production
	if (result.metafile) {
		const size = (Object.values(result.metafile.outputs)[0].bytes / 1024).toFixed(2);
		console.log(`📦 Bundle size: ${size} KB`);
	}
	
	await context.dispose();
	console.log('✅ Production build complete');
	process.exit(0);
} else {
	console.log('👀 Watching for changes...');
	await context.watch();
}
